
F3_ADC_CanReaderWriter_1Mbps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005e50  08005e50  00006e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f0c  08005f0c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005f0c  08005f0c  00006f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f14  08005f14  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f14  08005f14  00006f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f18  08005f18  00006f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005f1c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000320  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000388  20000388  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2ff  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002069  00000000  00000000  00015397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00017400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087f  00000000  00000000  00017f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6f0  00000000  00000000  00018797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e504  00000000  00000000  00034e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a695b  00000000  00000000  0004338b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e9ce6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003564  00000000  00000000  000e9d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  000ed290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e38 	.word	0x08005e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005e38 	.word	0x08005e38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_CAN_RxFifo0MsgPendingCallback>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	@ 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,RxData)==HAL_OK){
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	f107 0214 	add.w	r2, r7, #20
 8000280:	2100      	movs	r1, #0
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f001 ffca 	bl	800221c <HAL_CAN_GetRxMessage>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d167      	bne.n	800035e <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
		id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d101      	bne.n	8000298 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	e000      	b.n	800029a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	4a33      	ldr	r2, [pc, #204]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 800029c:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC;// DLC
 800029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002a0:	4a32      	ldr	r2, [pc, #200]	@ (800036c <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80002a2:	6013      	str	r3, [r2, #0]
		CanId[0]=(id&0xF00)>>8;
 80002a4:	4b30      	ldr	r3, [pc, #192]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80002b4:	701a      	strb	r2, [r3, #0]
		CanId[1]=(id&0x0F0)>>4;
 80002b6:	4b2c      	ldr	r3, [pc, #176]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	091b      	lsrs	r3, r3, #4
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80002c6:	705a      	strb	r2, [r3, #1]
		CanId[2]=(id&0x00F);
 80002c8:	4b27      	ldr	r3, [pc, #156]	@ (8000368 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b26      	ldr	r3, [pc, #152]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80002d6:	709a      	strb	r2, [r3, #2]
		if((myId[0]==CanId[0])&&(myId[1]==CanId[1])&&(myId[2]==CanId[2])){
 80002d8:	4b26      	ldr	r3, [pc, #152]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4b24      	ldr	r3, [pc, #144]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d124      	bne.n	800032e <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
 80002e4:	4b23      	ldr	r3, [pc, #140]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80002e6:	785a      	ldrb	r2, [r3, #1]
 80002e8:	4b21      	ldr	r3, [pc, #132]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80002ea:	785b      	ldrb	r3, [r3, #1]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d11e      	bne.n	800032e <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
 80002f0:	4b20      	ldr	r3, [pc, #128]	@ (8000374 <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80002f2:	789a      	ldrb	r2, [r3, #2]
 80002f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 80002f6:	789b      	ldrb	r3, [r3, #2]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d118      	bne.n	800032e <HAL_CAN_RxFifo0MsgPendingCallback+0xbe>
			data[0] = RxData[0];                                                    // Data
 80002fc:	7b3a      	ldrb	r2, [r7, #12]
 80002fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000300:	701a      	strb	r2, [r3, #0]
			data[1] = RxData[1];
 8000302:	7b7a      	ldrb	r2, [r7, #13]
 8000304:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000306:	705a      	strb	r2, [r3, #1]
			data[2] = RxData[2];
 8000308:	7bba      	ldrb	r2, [r7, #14]
 800030a:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800030c:	709a      	strb	r2, [r3, #2]
			data[3] = RxData[3];
 800030e:	7bfa      	ldrb	r2, [r7, #15]
 8000310:	4b19      	ldr	r3, [pc, #100]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000312:	70da      	strb	r2, [r3, #3]
			data[4] = RxData[4];
 8000314:	7c3a      	ldrb	r2, [r7, #16]
 8000316:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000318:	711a      	strb	r2, [r3, #4]
			data[5] = RxData[5];
 800031a:	7c7a      	ldrb	r2, [r7, #17]
 800031c:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800031e:	715a      	strb	r2, [r3, #5]
			data[6] = RxData[6];
 8000320:	7cba      	ldrb	r2, [r7, #18]
 8000322:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000324:	719a      	strb	r2, [r3, #6]
			data[7] = RxData[7];
 8000326:	7cfa      	ldrb	r2, [r7, #19]
 8000328:	4b13      	ldr	r3, [pc, #76]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800032a:	71da      	strb	r2, [r3, #7]
			data[5] = 0;
			data[6] = 0;
			data[7] = 0;
		}
	}
}
 800032c:	e017      	b.n	800035e <HAL_CAN_RxFifo0MsgPendingCallback+0xee>
			data[0] = 0;
 800032e:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000330:	2200      	movs	r2, #0
 8000332:	701a      	strb	r2, [r3, #0]
			data[1] = 0;
 8000334:	4b10      	ldr	r3, [pc, #64]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000336:	2200      	movs	r2, #0
 8000338:	705a      	strb	r2, [r3, #1]
			data[2] = 0;
 800033a:	4b0f      	ldr	r3, [pc, #60]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800033c:	2200      	movs	r2, #0
 800033e:	709a      	strb	r2, [r3, #2]
			data[3] = 0;
 8000340:	4b0d      	ldr	r3, [pc, #52]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000342:	2200      	movs	r2, #0
 8000344:	70da      	strb	r2, [r3, #3]
			data[4] = 0;
 8000346:	4b0c      	ldr	r3, [pc, #48]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000348:	2200      	movs	r2, #0
 800034a:	711a      	strb	r2, [r3, #4]
			data[5] = 0;
 800034c:	4b0a      	ldr	r3, [pc, #40]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800034e:	2200      	movs	r2, #0
 8000350:	715a      	strb	r2, [r3, #5]
			data[6] = 0;
 8000352:	4b09      	ldr	r3, [pc, #36]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8000354:	2200      	movs	r2, #0
 8000356:	719a      	strb	r2, [r3, #6]
			data[7] = 0;
 8000358:	4b07      	ldr	r3, [pc, #28]	@ (8000378 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800035a:	2200      	movs	r2, #0
 800035c:	71da      	strb	r2, [r3, #7]
}
 800035e:	bf00      	nop
 8000360:	3730      	adds	r7, #48	@ 0x30
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	20000214 	.word	0x20000214
 800036c:	20000218 	.word	0x20000218
 8000370:	20000230 	.word	0x20000230
 8000374:	2000022c 	.word	0x2000022c
 8000378:	2000021c 	.word	0x2000021c

0800037c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800037c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000380:	b08c      	sub	sp, #48	@ 0x30
 8000382:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */
    setbuf(stdout, NULL);
 8000384:	4b94      	ldr	r3, [pc, #592]	@ (80005d8 <main+0x25c>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f004 fe33 	bl	8004ff8 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000392:	f000 fce5 	bl	8000d60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000396:	f000 f937 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039a:	f000 fa7d 	bl	8000898 <MX_GPIO_Init>
  MX_DMA_Init();
 800039e:	f000 fa5d 	bl	800085c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003a2:	f000 fa2b 	bl	80007fc <MX_USART2_UART_Init>
  MX_CAN_Init();
 80003a6:	f000 f9f3 	bl	8000790 <MX_CAN_Init>
  MX_ADC2_Init();
 80003aa:	f000 f969 	bl	8000680 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.StdId = 0x401;
 80003ae:	4b8b      	ldr	r3, [pc, #556]	@ (80005dc <main+0x260>)
 80003b0:	f240 4201 	movw	r2, #1025	@ 0x401
 80003b4:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 80003b6:	4b89      	ldr	r3, [pc, #548]	@ (80005dc <main+0x260>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 80003bc:	4b87      	ldr	r3, [pc, #540]	@ (80005dc <main+0x260>)
 80003be:	2200      	movs	r2, #0
 80003c0:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 80003c2:	4b86      	ldr	r3, [pc, #536]	@ (80005dc <main+0x260>)
 80003c4:	2208      	movs	r2, #8
 80003c6:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 80003c8:	4b84      	ldr	r3, [pc, #528]	@ (80005dc <main+0x260>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	751a      	strb	r2, [r3, #20]

  filter.FilterIdHigh = 0;
 80003ce:	4b84      	ldr	r3, [pc, #528]	@ (80005e0 <main+0x264>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow = 0;
 80003d4:	4b82      	ldr	r3, [pc, #520]	@ (80005e0 <main+0x264>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = 0;
 80003da:	4b81      	ldr	r3, [pc, #516]	@ (80005e0 <main+0x264>)
 80003dc:	2200      	movs	r2, #0
 80003de:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0;
 80003e0:	4b7f      	ldr	r3, [pc, #508]	@ (80005e0 <main+0x264>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80003e6:	4b7e      	ldr	r3, [pc, #504]	@ (80005e0 <main+0x264>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003ec:	4b7c      	ldr	r3, [pc, #496]	@ (80005e0 <main+0x264>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  filter.FilterBank = 0;
 80003f2:	4b7b      	ldr	r3, [pc, #492]	@ (80005e0 <main+0x264>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	615a      	str	r2, [r3, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80003f8:	4b79      	ldr	r3, [pc, #484]	@ (80005e0 <main+0x264>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	619a      	str	r2, [r3, #24]
  filter.SlaveStartFilterBank = 14;
 80003fe:	4b78      	ldr	r3, [pc, #480]	@ (80005e0 <main+0x264>)
 8000400:	220e      	movs	r2, #14
 8000402:	625a      	str	r2, [r3, #36]	@ 0x24
  filter.FilterActivation = ENABLE;
 8000404:	4b76      	ldr	r3, [pc, #472]	@ (80005e0 <main+0x264>)
 8000406:	2201      	movs	r2, #1
 8000408:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan,&filter);
 800040a:	4975      	ldr	r1, [pc, #468]	@ (80005e0 <main+0x264>)
 800040c:	4875      	ldr	r0, [pc, #468]	@ (80005e4 <main+0x268>)
 800040e:	f001 fcf2 	bl	8001df6 <HAL_CAN_ConfigFilter>

  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 8000412:	2102      	movs	r1, #2
 8000414:	4873      	ldr	r0, [pc, #460]	@ (80005e4 <main+0x268>)
 8000416:	f002 f823 	bl	8002460 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan);
 800041a:	4872      	ldr	r0, [pc, #456]	@ (80005e4 <main+0x268>)
 800041c:	f001 fdb5 	bl	8001f8a <HAL_CAN_Start>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000420:	2100      	movs	r1, #0
 8000422:	4871      	ldr	r0, [pc, #452]	@ (80005e8 <main+0x26c>)
 8000424:	f000 ff8c 	bl	8001340 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&result, 4);
 8000428:	2204      	movs	r2, #4
 800042a:	4970      	ldr	r1, [pc, #448]	@ (80005ec <main+0x270>)
 800042c:	486e      	ldr	r0, [pc, #440]	@ (80005e8 <main+0x26c>)
 800042e:	f000 fead 	bl	800118c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(result[3]>2000){
 8000432:	4b6e      	ldr	r3, [pc, #440]	@ (80005ec <main+0x270>)
 8000434:	88db      	ldrh	r3, [r3, #6]
 8000436:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800043a:	d95b      	bls.n	80004f4 <main+0x178>
		  for(uint8_t i = 0 ; i<3 ; i++){
 800043c:	2300      	movs	r3, #0
 800043e:	73fb      	strb	r3, [r7, #15]
 8000440:	e00c      	b.n	800045c <main+0xe0>
			  myId[i]=result[i]/256;//0~4095 -> 0~15
 8000442:	7bfb      	ldrb	r3, [r7, #15]
 8000444:	4a69      	ldr	r2, [pc, #420]	@ (80005ec <main+0x270>)
 8000446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800044a:	0a1b      	lsrs	r3, r3, #8
 800044c:	b29a      	uxth	r2, r3
 800044e:	7bfb      	ldrb	r3, [r7, #15]
 8000450:	b2d1      	uxtb	r1, r2
 8000452:	4a67      	ldr	r2, [pc, #412]	@ (80005f0 <main+0x274>)
 8000454:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0 ; i<3 ; i++){
 8000456:	7bfb      	ldrb	r3, [r7, #15]
 8000458:	3301      	adds	r3, #1
 800045a:	73fb      	strb	r3, [r7, #15]
 800045c:	7bfb      	ldrb	r3, [r7, #15]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d9ef      	bls.n	8000442 <main+0xc6>
		  }
		  if((myId[0]==0) && (myId[1]==0) && (myId[2]==0)){
 8000462:	4b63      	ldr	r3, [pc, #396]	@ (80005f0 <main+0x274>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d114      	bne.n	8000494 <main+0x118>
 800046a:	4b61      	ldr	r3, [pc, #388]	@ (80005f0 <main+0x274>)
 800046c:	785b      	ldrb	r3, [r3, #1]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d110      	bne.n	8000494 <main+0x118>
 8000472:	4b5f      	ldr	r3, [pc, #380]	@ (80005f0 <main+0x274>)
 8000474:	789b      	ldrb	r3, [r3, #2]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d10c      	bne.n	8000494 <main+0x118>
			  for(uint8_t j = 0 ; j<8; j++){
 800047a:	2300      	movs	r3, #0
 800047c:	73bb      	strb	r3, [r7, #14]
 800047e:	e006      	b.n	800048e <main+0x112>
				  data[j]=0;
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	4a5c      	ldr	r2, [pc, #368]	@ (80005f4 <main+0x278>)
 8000484:	2100      	movs	r1, #0
 8000486:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t j = 0 ; j<8; j++){
 8000488:	7bbb      	ldrb	r3, [r7, #14]
 800048a:	3301      	adds	r3, #1
 800048c:	73bb      	strb	r3, [r7, #14]
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	2b07      	cmp	r3, #7
 8000492:	d9f5      	bls.n	8000480 <main+0x104>
			  }
		  }
		  printf("-->[%d%d%d]  %d,%d,%d,%d,%d,%d,%d,%d\r\n",myId[0],myId[1],myId[2],data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
 8000494:	4b56      	ldr	r3, [pc, #344]	@ (80005f0 <main+0x274>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	469c      	mov	ip, r3
 800049a:	4b55      	ldr	r3, [pc, #340]	@ (80005f0 <main+0x274>)
 800049c:	785b      	ldrb	r3, [r3, #1]
 800049e:	469e      	mov	lr, r3
 80004a0:	4b53      	ldr	r3, [pc, #332]	@ (80005f0 <main+0x274>)
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	4698      	mov	r8, r3
 80004a6:	4b53      	ldr	r3, [pc, #332]	@ (80005f4 <main+0x278>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	461a      	mov	r2, r3
 80004ac:	4b51      	ldr	r3, [pc, #324]	@ (80005f4 <main+0x278>)
 80004ae:	785b      	ldrb	r3, [r3, #1]
 80004b0:	4619      	mov	r1, r3
 80004b2:	4b50      	ldr	r3, [pc, #320]	@ (80005f4 <main+0x278>)
 80004b4:	789b      	ldrb	r3, [r3, #2]
 80004b6:	4618      	mov	r0, r3
 80004b8:	4b4e      	ldr	r3, [pc, #312]	@ (80005f4 <main+0x278>)
 80004ba:	78db      	ldrb	r3, [r3, #3]
 80004bc:	461c      	mov	r4, r3
 80004be:	4b4d      	ldr	r3, [pc, #308]	@ (80005f4 <main+0x278>)
 80004c0:	791b      	ldrb	r3, [r3, #4]
 80004c2:	461d      	mov	r5, r3
 80004c4:	4b4b      	ldr	r3, [pc, #300]	@ (80005f4 <main+0x278>)
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	461e      	mov	r6, r3
 80004ca:	4b4a      	ldr	r3, [pc, #296]	@ (80005f4 <main+0x278>)
 80004cc:	799b      	ldrb	r3, [r3, #6]
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	4b48      	ldr	r3, [pc, #288]	@ (80005f4 <main+0x278>)
 80004d2:	79db      	ldrb	r3, [r3, #7]
 80004d4:	9307      	str	r3, [sp, #28]
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	9306      	str	r3, [sp, #24]
 80004da:	9605      	str	r6, [sp, #20]
 80004dc:	9504      	str	r5, [sp, #16]
 80004de:	9403      	str	r4, [sp, #12]
 80004e0:	9002      	str	r0, [sp, #8]
 80004e2:	9101      	str	r1, [sp, #4]
 80004e4:	9200      	str	r2, [sp, #0]
 80004e6:	4643      	mov	r3, r8
 80004e8:	4672      	mov	r2, lr
 80004ea:	4661      	mov	r1, ip
 80004ec:	4842      	ldr	r0, [pc, #264]	@ (80005f8 <main+0x27c>)
 80004ee:	f004 fd71 	bl	8004fd4 <iprintf>
 80004f2:	e79e      	b.n	8000432 <main+0xb6>
	  }else{
		  TxData[0] = result[0]/16;
 80004f4:	4b3d      	ldr	r3, [pc, #244]	@ (80005ec <main+0x270>)
 80004f6:	881b      	ldrh	r3, [r3, #0]
 80004f8:	091b      	lsrs	r3, r3, #4
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b3f      	ldr	r3, [pc, #252]	@ (80005fc <main+0x280>)
 8000500:	701a      	strb	r2, [r3, #0]
		  			  TxData[1] = result[1]/16;
 8000502:	4b3a      	ldr	r3, [pc, #232]	@ (80005ec <main+0x270>)
 8000504:	885b      	ldrh	r3, [r3, #2]
 8000506:	091b      	lsrs	r3, r3, #4
 8000508:	b29b      	uxth	r3, r3
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b3b      	ldr	r3, [pc, #236]	@ (80005fc <main+0x280>)
 800050e:	705a      	strb	r2, [r3, #1]
		  			  TxData[2] = result[2]/16;
 8000510:	4b36      	ldr	r3, [pc, #216]	@ (80005ec <main+0x270>)
 8000512:	889b      	ldrh	r3, [r3, #4]
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	b29b      	uxth	r3, r3
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b38      	ldr	r3, [pc, #224]	@ (80005fc <main+0x280>)
 800051c:	709a      	strb	r2, [r3, #2]
		  			  TxData[3] = result[3]/16;
 800051e:	4b33      	ldr	r3, [pc, #204]	@ (80005ec <main+0x270>)
 8000520:	88db      	ldrh	r3, [r3, #6]
 8000522:	091b      	lsrs	r3, r3, #4
 8000524:	b29b      	uxth	r3, r3
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b34      	ldr	r3, [pc, #208]	@ (80005fc <main+0x280>)
 800052a:	70da      	strb	r2, [r3, #3]
		  			  TxData[4] = 0;
 800052c:	4b33      	ldr	r3, [pc, #204]	@ (80005fc <main+0x280>)
 800052e:	2200      	movs	r2, #0
 8000530:	711a      	strb	r2, [r3, #4]
		  			  TxData[5] = 0;
 8000532:	4b32      	ldr	r3, [pc, #200]	@ (80005fc <main+0x280>)
 8000534:	2200      	movs	r2, #0
 8000536:	715a      	strb	r2, [r3, #5]
		  			  TxData[6] = 0;
 8000538:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <main+0x280>)
 800053a:	2200      	movs	r2, #0
 800053c:	719a      	strb	r2, [r3, #6]
		  			  TxData[7] = 0;
 800053e:	4b2f      	ldr	r3, [pc, #188]	@ (80005fc <main+0x280>)
 8000540:	2200      	movs	r2, #0
 8000542:	71da      	strb	r2, [r3, #7]
		  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 8000544:	4827      	ldr	r0, [pc, #156]	@ (80005e4 <main+0x268>)
 8000546:	f001 fe34 	bl	80021b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d012      	beq.n	8000576 <main+0x1fa>
			  TxHeader.StdId = (myId[0]<<8)|(myId[1]<<4)|(myId[2]);
 8000550:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <main+0x274>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	021a      	lsls	r2, r3, #8
 8000556:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <main+0x274>)
 8000558:	785b      	ldrb	r3, [r3, #1]
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	4313      	orrs	r3, r2
 800055e:	4a24      	ldr	r2, [pc, #144]	@ (80005f0 <main+0x274>)
 8000560:	7892      	ldrb	r2, [r2, #2]
 8000562:	4313      	orrs	r3, r2
 8000564:	461a      	mov	r2, r3
 8000566:	4b1d      	ldr	r3, [pc, #116]	@ (80005dc <main+0x260>)
 8000568:	601a      	str	r2, [r3, #0]

			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 800056a:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <main+0x284>)
 800056c:	4a23      	ldr	r2, [pc, #140]	@ (80005fc <main+0x280>)
 800056e:	491b      	ldr	r1, [pc, #108]	@ (80005dc <main+0x260>)
 8000570:	481c      	ldr	r0, [pc, #112]	@ (80005e4 <main+0x268>)
 8000572:	f001 fd4e 	bl	8002012 <HAL_CAN_AddTxMessage>
		  }
		  printf("<--[%d%d%d]  %d,%d,%d,%d,%d,%d,%d,%d\r\n",myId[0],myId[1],myId[2],TxData[0],TxData[1],TxData[2],TxData[3],TxData[4],TxData[5],TxData[6],TxData[7]);
 8000576:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <main+0x274>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	469c      	mov	ip, r3
 800057c:	4b1c      	ldr	r3, [pc, #112]	@ (80005f0 <main+0x274>)
 800057e:	785b      	ldrb	r3, [r3, #1]
 8000580:	469e      	mov	lr, r3
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <main+0x274>)
 8000584:	789b      	ldrb	r3, [r3, #2]
 8000586:	4698      	mov	r8, r3
 8000588:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <main+0x280>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b1b      	ldr	r3, [pc, #108]	@ (80005fc <main+0x280>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	4619      	mov	r1, r3
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <main+0x280>)
 8000596:	789b      	ldrb	r3, [r3, #2]
 8000598:	4618      	mov	r0, r3
 800059a:	4b18      	ldr	r3, [pc, #96]	@ (80005fc <main+0x280>)
 800059c:	78db      	ldrb	r3, [r3, #3]
 800059e:	461c      	mov	r4, r3
 80005a0:	4b16      	ldr	r3, [pc, #88]	@ (80005fc <main+0x280>)
 80005a2:	791b      	ldrb	r3, [r3, #4]
 80005a4:	461d      	mov	r5, r3
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <main+0x280>)
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	461e      	mov	r6, r3
 80005ac:	4b13      	ldr	r3, [pc, #76]	@ (80005fc <main+0x280>)
 80005ae:	799b      	ldrb	r3, [r3, #6]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	4b12      	ldr	r3, [pc, #72]	@ (80005fc <main+0x280>)
 80005b4:	79db      	ldrb	r3, [r3, #7]
 80005b6:	9307      	str	r3, [sp, #28]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	9306      	str	r3, [sp, #24]
 80005bc:	9605      	str	r6, [sp, #20]
 80005be:	9504      	str	r5, [sp, #16]
 80005c0:	9403      	str	r4, [sp, #12]
 80005c2:	9002      	str	r0, [sp, #8]
 80005c4:	9101      	str	r1, [sp, #4]
 80005c6:	9200      	str	r2, [sp, #0]
 80005c8:	4643      	mov	r3, r8
 80005ca:	4672      	mov	r2, lr
 80005cc:	4661      	mov	r1, ip
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <main+0x288>)
 80005d0:	f004 fd00 	bl	8004fd4 <iprintf>
	  if(result[3]>2000){
 80005d4:	e72d      	b.n	8000432 <main+0xb6>
 80005d6:	bf00      	nop
 80005d8:	20000018 	.word	0x20000018
 80005dc:	200001c8 	.word	0x200001c8
 80005e0:	200001ec 	.word	0x200001ec
 80005e4:	20000118 	.word	0x20000118
 80005e8:	20000084 	.word	0x20000084
 80005ec:	20000224 	.word	0x20000224
 80005f0:	2000022c 	.word	0x2000022c
 80005f4:	2000021c 	.word	0x2000021c
 80005f8:	08005e50 	.word	0x08005e50
 80005fc:	200001e4 	.word	0x200001e4
 8000600:	200001e0 	.word	0x200001e0
 8000604:	08005e78 	.word	0x08005e78

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b090      	sub	sp, #64	@ 0x40
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0318 	add.w	r3, r7, #24
 8000612:	2228      	movs	r2, #40	@ 0x28
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fded 	bl	80051f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
 8000628:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800062a:	2302      	movs	r3, #2
 800062c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	2301      	movs	r3, #1
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2310      	movs	r3, #16
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000636:	2300      	movs	r3, #0
 8000638:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fd7e 	bl	8003140 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800064a:	f000 f95d 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f003 fda8 	bl	80041bc <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000672:	f000 f949 	bl	8000908 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3740      	adds	r7, #64	@ 0x40
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000686:	463b      	mov	r3, r7
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
 8000694:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000696:	4b3c      	ldr	r3, [pc, #240]	@ (8000788 <MX_ADC2_Init+0x108>)
 8000698:	4a3c      	ldr	r2, [pc, #240]	@ (800078c <MX_ADC2_Init+0x10c>)
 800069a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800069c:	4b3a      	ldr	r3, [pc, #232]	@ (8000788 <MX_ADC2_Init+0x108>)
 800069e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80006a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006a4:	4b38      	ldr	r3, [pc, #224]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80006aa:	4b37      	ldr	r3, [pc, #220]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80006b0:	4b35      	ldr	r3, [pc, #212]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006b6:	4b34      	ldr	r3, [pc, #208]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006be:	4b32      	ldr	r3, [pc, #200]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b30      	ldr	r3, [pc, #192]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80006d0:	4b2d      	ldr	r3, [pc, #180]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006d2:	2204      	movs	r2, #4
 80006d4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006d8:	2201      	movs	r2, #1
 80006da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006de:	4b2a      	ldr	r3, [pc, #168]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006e4:	4b28      	ldr	r3, [pc, #160]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006ea:	4b27      	ldr	r3, [pc, #156]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f0:	4825      	ldr	r0, [pc, #148]	@ (8000788 <MX_ADC2_Init+0x108>)
 80006f2:	f000 fbb9 	bl	8000e68 <HAL_ADC_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80006fc:	f000 f904 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000700:	2304      	movs	r3, #4
 8000702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000704:	2301      	movs	r3, #1
 8000706:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000708:	2300      	movs	r3, #0
 800070a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800070c:	2305      	movs	r3, #5
 800070e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000718:	463b      	mov	r3, r7
 800071a:	4619      	mov	r1, r3
 800071c:	481a      	ldr	r0, [pc, #104]	@ (8000788 <MX_ADC2_Init+0x108>)
 800071e:	f000 fe81 	bl	8001424 <HAL_ADC_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000728:	f000 f8ee 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800072c:	2303      	movs	r3, #3
 800072e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000730:	2302      	movs	r3, #2
 8000732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000734:	463b      	mov	r3, r7
 8000736:	4619      	mov	r1, r3
 8000738:	4813      	ldr	r0, [pc, #76]	@ (8000788 <MX_ADC2_Init+0x108>)
 800073a:	f000 fe73 	bl	8001424 <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000744:	f000 f8e0 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000748:	2302      	movs	r3, #2
 800074a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800074c:	2303      	movs	r3, #3
 800074e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <MX_ADC2_Init+0x108>)
 8000756:	f000 fe65 	bl	8001424 <HAL_ADC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000760:	f000 f8d2 	bl	8000908 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000764:	2301      	movs	r3, #1
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000768:	2304      	movs	r3, #4
 800076a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800076c:	463b      	mov	r3, r7
 800076e:	4619      	mov	r1, r3
 8000770:	4805      	ldr	r0, [pc, #20]	@ (8000788 <MX_ADC2_Init+0x108>)
 8000772:	f000 fe57 	bl	8001424 <HAL_ADC_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800077c:	f000 f8c4 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000780:	bf00      	nop
 8000782:	3718      	adds	r7, #24
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	20000084 	.word	0x20000084
 800078c:	50000100 	.word	0x50000100

08000790 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000794:	4b17      	ldr	r3, [pc, #92]	@ (80007f4 <MX_CAN_Init+0x64>)
 8000796:	4a18      	ldr	r2, [pc, #96]	@ (80007f8 <MX_CAN_Init+0x68>)
 8000798:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 800079a:	4b16      	ldr	r3, [pc, #88]	@ (80007f4 <MX_CAN_Init+0x64>)
 800079c:	2201      	movs	r2, #1
 800079e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a6:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007ac:	4b11      	ldr	r3, [pc, #68]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007ae:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80007b2:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_CAN_Init+0x64>)
 80007e0:	f001 fa0e 	bl	8001c00 <HAL_CAN_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80007ea:	f000 f88d 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000118 	.word	0x20000118
 80007f8:	40006400 	.word	0x40006400

080007fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	@ (8000858 <MX_USART2_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000806:	4b13      	ldr	r3, [pc, #76]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000808:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800080c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <MX_USART2_UART_Init+0x58>)
 8000840:	f003 fedc 	bl	80045fc <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f85d 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000140 	.word	0x20000140
 8000858:	40004400 	.word	0x40004400

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <MX_DMA_Init+0x38>)
 8000864:	695b      	ldr	r3, [r3, #20]
 8000866:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <MX_DMA_Init+0x38>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6153      	str	r3, [r2, #20]
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_DMA_Init+0x38>)
 8000870:	695b      	ldr	r3, [r3, #20]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	200c      	movs	r0, #12
 8000880:	f002 f91f 	bl	8002ac2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000884:	200c      	movs	r0, #12
 8000886:	f002 f938 	bl	8002afa <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_GPIO_Init+0x44>)
 80008a0:	695b      	ldr	r3, [r3, #20]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	@ (80008dc <MX_GPIO_Init+0x44>)
 80008a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008a8:	6153      	str	r3, [r2, #20]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_GPIO_Init+0x44>)
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_GPIO_Init+0x44>)
 80008b8:	695b      	ldr	r3, [r3, #20]
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <MX_GPIO_Init+0x44>)
 80008bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c0:	6153      	str	r3, [r2, #20]
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_GPIO_Init+0x44>)
 80008c4:	695b      	ldr	r3, [r3, #20]
 80008c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40021000 	.word	0x40021000

080008e0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	230a      	movs	r3, #10
 80008f2:	68b9      	ldr	r1, [r7, #8]
 80008f4:	4803      	ldr	r0, [pc, #12]	@ (8000904 <_write+0x24>)
 80008f6:	f003 fecf 	bl	8004698 <HAL_UART_Transmit>
  return len;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3710      	adds	r7, #16
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000140 	.word	0x20000140

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <HAL_MspInit+0x44>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	4a0e      	ldr	r2, [pc, #56]	@ (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6193      	str	r3, [r2, #24]
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x44>)
 8000928:	699b      	ldr	r3, [r3, #24]
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x44>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a08      	ldr	r2, [pc, #32]	@ (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <HAL_MspInit+0x44>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a29      	ldr	r2, [pc, #164]	@ (8000a20 <HAL_ADC_MspInit+0xc4>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d14c      	bne.n	8000a18 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800097e:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <HAL_ADC_MspInit+0xc8>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a28      	ldr	r2, [pc, #160]	@ (8000a24 <HAL_ADC_MspInit+0xc8>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <HAL_ADC_MspInit+0xc8>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b23      	ldr	r3, [pc, #140]	@ (8000a24 <HAL_ADC_MspInit+0xc8>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a22      	ldr	r2, [pc, #136]	@ (8000a24 <HAL_ADC_MspInit+0xc8>)
 800099c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b20      	ldr	r3, [pc, #128]	@ (8000a24 <HAL_ADC_MspInit+0xc8>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ae:	23f0      	movs	r3, #240	@ 0xf0
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b2:	2303      	movs	r3, #3
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009c4:	f002 fa4a 	bl	8002e5c <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 80009c8:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009ca:	4a18      	ldr	r2, [pc, #96]	@ (8000a2c <HAL_ADC_MspInit+0xd0>)
 80009cc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ce:	4b16      	ldr	r3, [pc, #88]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009d4:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009da:	4b13      	ldr	r3, [pc, #76]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009e6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ee:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009f2:	2220      	movs	r2, #32
 80009f4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009fc:	480a      	ldr	r0, [pc, #40]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 80009fe:	f002 f896 	bl	8002b2e <HAL_DMA_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000a08:	f7ff ff7e 	bl	8000908 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a06      	ldr	r2, [pc, #24]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 8000a10:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a12:	4a05      	ldr	r2, [pc, #20]	@ (8000a28 <HAL_ADC_MspInit+0xcc>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	@ 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	50000100 	.word	0x50000100
 8000a24:	40021000 	.word	0x40021000
 8000a28:	200000d4 	.word	0x200000d4
 8000a2c:	4002001c 	.word	0x4002001c

08000a30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ac0 <HAL_CAN_MspInit+0x90>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d131      	bne.n	8000ab6 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <HAL_CAN_MspInit+0x94>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	4a1b      	ldr	r2, [pc, #108]	@ (8000ac4 <HAL_CAN_MspInit+0x94>)
 8000a58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5c:	61d3      	str	r3, [r2, #28]
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <HAL_CAN_MspInit+0x94>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a66:	613b      	str	r3, [r7, #16]
 8000a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <HAL_CAN_MspInit+0x94>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a15      	ldr	r2, [pc, #84]	@ (8000ac4 <HAL_CAN_MspInit+0x94>)
 8000a70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a74:	6153      	str	r3, [r2, #20]
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <HAL_CAN_MspInit+0x94>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a82:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a88:	2302      	movs	r3, #2
 8000a8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a90:	2303      	movs	r3, #3
 8000a92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a94:	2309      	movs	r3, #9
 8000a96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa2:	f002 f9db 	bl	8002e5c <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2014      	movs	r0, #20
 8000aac:	f002 f809 	bl	8002ac2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000ab0:	2014      	movs	r0, #20
 8000ab2:	f002 f822 	bl	8002afa <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40006400 	.word	0x40006400
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	@ 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a18      	ldr	r2, [pc, #96]	@ (8000b48 <HAL_UART_MspInit+0x80>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d129      	bne.n	8000b3e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aea:	4b18      	ldr	r3, [pc, #96]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	4a17      	ldr	r2, [pc, #92]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	61d3      	str	r3, [r2, #28]
 8000af6:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	4a11      	ldr	r2, [pc, #68]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b0c:	6153      	str	r3, [r2, #20]
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b4c <HAL_UART_MspInit+0x84>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000b1a:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b20:	2302      	movs	r3, #2
 8000b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b28:	2303      	movs	r3, #3
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3a:	f002 f98f 	bl	8002e5c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	@ 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <HardFault_Handler+0x4>

08000b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <MemManage_Handler+0x4>

08000b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba6:	f000 f921 	bl	8000dec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <DMA1_Channel2_IRQHandler+0x10>)
 8000bb6:	f002 f860 	bl	8002c7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000d4 	.word	0x200000d4

08000bc4 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <CAN_RX0_IRQHandler+0x10>)
 8000bca:	f001 fc6f 	bl	80024ac <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000118 	.word	0x20000118

08000bd8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b086      	sub	sp, #24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	e00a      	b.n	8000c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bea:	f3af 8000 	nop.w
 8000bee:	4601      	mov	r1, r0
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	1c5a      	adds	r2, r3, #1
 8000bf4:	60ba      	str	r2, [r7, #8]
 8000bf6:	b2ca      	uxtb	r2, r1
 8000bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	617b      	str	r3, [r7, #20]
 8000c00:	697a      	ldr	r2, [r7, #20]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	dbf0      	blt.n	8000bea <_read+0x12>
  }

  return len;
 8000c08:	687b      	ldr	r3, [r7, #4]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c12:	b480      	push	{r7}
 8000c14:	b083      	sub	sp, #12
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	370c      	adds	r7, #12
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b083      	sub	sp, #12
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c3c:	2300      	movs	r3, #0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_isatty>:

int _isatty(int file)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b083      	sub	sp, #12
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c84:	4a14      	ldr	r2, [pc, #80]	@ (8000cd8 <_sbrk+0x5c>)
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <_sbrk+0x60>)
 8000c88:	1ad3      	subs	r3, r2, r3
 8000c8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <_sbrk+0x64>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d102      	bne.n	8000c9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <_sbrk+0x64>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <_sbrk+0x68>)
 8000c9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d207      	bcs.n	8000cbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cac:	f004 faf2 	bl	8005294 <__errno>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cba:	e009      	b.n	8000cd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <_sbrk+0x64>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <_sbrk+0x64>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	4413      	add	r3, r2
 8000cca:	4a05      	ldr	r2, [pc, #20]	@ (8000ce0 <_sbrk+0x64>)
 8000ccc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cce:	68fb      	ldr	r3, [r7, #12]
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3718      	adds	r7, #24
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20003000 	.word	0x20003000
 8000cdc:	00000400 	.word	0x00000400
 8000ce0:	20000234 	.word	0x20000234
 8000ce4:	20000388 	.word	0x20000388

08000ce8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <SystemInit+0x20>)
 8000cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cf2:	4a05      	ldr	r2, [pc, #20]	@ (8000d08 <SystemInit+0x20>)
 8000cf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d44 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d10:	f7ff ffea 	bl	8000ce8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d14:	480c      	ldr	r0, [pc, #48]	@ (8000d48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d16:	490d      	ldr	r1, [pc, #52]	@ (8000d4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d18:	4a0d      	ldr	r2, [pc, #52]	@ (8000d50 <LoopForever+0xe>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d1c:	e002      	b.n	8000d24 <LoopCopyDataInit>

08000d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d22:	3304      	adds	r3, #4

08000d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d28:	d3f9      	bcc.n	8000d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d58 <LoopForever+0x16>)
  movs r3, #0
 8000d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d30:	e001      	b.n	8000d36 <LoopFillZerobss>

08000d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d34:	3204      	adds	r2, #4

08000d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d38:	d3fb      	bcc.n	8000d32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d3a:	f004 fab1 	bl	80052a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3e:	f7ff fb1d 	bl	800037c <main>

08000d42 <LoopForever>:

LoopForever:
    b LoopForever
 8000d42:	e7fe      	b.n	8000d42 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d44:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d4c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d50:	08005f1c 	.word	0x08005f1c
  ldr r2, =_sbss
 8000d54:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d58:	20000388 	.word	0x20000388

08000d5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d5c:	e7fe      	b.n	8000d5c <ADC1_2_IRQHandler>
	...

08000d60 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <HAL_Init+0x28>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a07      	ldr	r2, [pc, #28]	@ (8000d88 <HAL_Init+0x28>)
 8000d6a:	f043 0310 	orr.w	r3, r3, #16
 8000d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d70:	2003      	movs	r0, #3
 8000d72:	f001 fe9b 	bl	8002aac <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f000 f808 	bl	8000d8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d7c:	f7ff fdca 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40022000 	.word	0x40022000

08000d8c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d94:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <HAL_InitTick+0x54>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <HAL_InitTick+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000da2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000daa:	4618      	mov	r0, r3
 8000dac:	f001 feb3 	bl	8002b16 <HAL_SYSTICK_Config>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00e      	b.n	8000dd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	d80a      	bhi.n	8000dd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	6879      	ldr	r1, [r7, #4]
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f001 fe7b 	bl	8002ac2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dcc:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_InitTick+0x5c>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e000      	b.n	8000dd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000008 	.word	0x20000008
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b06      	ldr	r3, [pc, #24]	@ (8000e0c <HAL_IncTick+0x20>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_IncTick+0x24>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_IncTick+0x24>)
 8000dfe:	6013      	str	r3, [r2, #0]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	20000238 	.word	0x20000238

08000e14 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <HAL_GetTick+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000238 	.word	0x20000238

08000e2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e5c:	bf00      	nop
 8000e5e:	370c      	adds	r7, #12
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr

08000e68 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09a      	sub	sp, #104	@ 0x68
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e70:	2300      	movs	r3, #0
 8000e72:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e172      	b.n	800116e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	691b      	ldr	r3, [r3, #16]
 8000e8c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d176      	bne.n	8000f88 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d152      	bne.n	8000f48 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff fd4d 	bl	800095c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d13b      	bne.n	8000f48 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 fe2f 	bl	8001b34 <ADC_Disable>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d12f      	bne.n	8000f48 <HAL_ADC_Init+0xe0>
 8000ee8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d12b      	bne.n	8000f48 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ef8:	f023 0302 	bic.w	r3, r3, #2
 8000efc:	f043 0202 	orr.w	r2, r3, #2
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	689a      	ldr	r2, [r3, #8]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000f12:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f22:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f24:	4b94      	ldr	r3, [pc, #592]	@ (8001178 <HAL_ADC_Init+0x310>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a94      	ldr	r2, [pc, #592]	@ (800117c <HAL_ADC_Init+0x314>)
 8000f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f2e:	0c9a      	lsrs	r2, r3, #18
 8000f30:	4613      	mov	r3, r2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f3a:	e002      	b.n	8000f42 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d1f9      	bne.n	8000f3c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d007      	beq.n	8000f66 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f64:	d110      	bne.n	8000f88 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6a:	f023 0312 	bic.w	r3, r3, #18
 8000f6e:	f043 0210 	orr.w	r2, r3, #16
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7a:	f043 0201 	orr.w	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
 8000f84:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f040 80df 	bne.w	8001154 <HAL_ADC_Init+0x2ec>
 8000f96:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 80da 	bne.w	8001154 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	f040 80d2 	bne.w	8001154 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000fb8:	f043 0202 	orr.w	r2, r3, #2
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8001180 <HAL_ADC_Init+0x318>)
 8000fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fcc:	d102      	bne.n	8000fd4 <HAL_ADC_Init+0x16c>
 8000fce:	4b6d      	ldr	r3, [pc, #436]	@ (8001184 <HAL_ADC_Init+0x31c>)
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	e002      	b.n	8000fda <HAL_ADC_Init+0x172>
 8000fd4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000fd8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d108      	bne.n	8000ffa <HAL_ADC_Init+0x192>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Init+0x192>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <HAL_ADC_Init+0x194>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d11c      	bne.n	800103a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001000:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001002:	2b00      	cmp	r3, #0
 8001004:	d010      	beq.n	8001028 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b01      	cmp	r3, #1
 8001010:	d107      	bne.n	8001022 <HAL_ADC_Init+0x1ba>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_ADC_Init+0x1ba>
 800101e:	2301      	movs	r3, #1
 8001020:	e000      	b.n	8001024 <HAL_ADC_Init+0x1bc>
 8001022:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001024:	2b00      	cmp	r3, #0
 8001026:	d108      	bne.n	800103a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001028:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	431a      	orrs	r2, r3
 8001036:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001038:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7e5b      	ldrb	r3, [r3, #25]
 800103e:	035b      	lsls	r3, r3, #13
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001044:	2a01      	cmp	r2, #1
 8001046:	d002      	beq.n	800104e <HAL_ADC_Init+0x1e6>
 8001048:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800104c:	e000      	b.n	8001050 <HAL_ADC_Init+0x1e8>
 800104e:	2200      	movs	r2, #0
 8001050:	431a      	orrs	r2, r3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4313      	orrs	r3, r2
 800105e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001060:	4313      	orrs	r3, r2
 8001062:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d11b      	bne.n	80010a6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7e5b      	ldrb	r3, [r3, #25]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d109      	bne.n	800108a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	3b01      	subs	r3, #1
 800107c:	045a      	lsls	r2, r3, #17
 800107e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001080:	4313      	orrs	r3, r2
 8001082:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001086:	663b      	str	r3, [r7, #96]	@ 0x60
 8001088:	e00d      	b.n	80010a6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001092:	f043 0220 	orr.w	r2, r3, #32
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800109e:	f043 0201 	orr.w	r2, r3, #1
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d007      	beq.n	80010be <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b6:	4313      	orrs	r3, r2
 80010b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010ba:	4313      	orrs	r3, r2
 80010bc:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f003 030c 	and.w	r3, r3, #12
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d114      	bne.n	80010f6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	6812      	ldr	r2, [r2, #0]
 80010d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010da:	f023 0302 	bic.w	r3, r3, #2
 80010de:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7e1b      	ldrb	r3, [r3, #24]
 80010e4:	039a      	lsls	r2, r3, #14
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	4313      	orrs	r3, r2
 80010f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010f2:	4313      	orrs	r3, r2
 80010f4:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <HAL_ADC_Init+0x320>)
 80010fe:	4013      	ands	r3, r2
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001106:	430b      	orrs	r3, r1
 8001108:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d10c      	bne.n	800112c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001118:	f023 010f 	bic.w	r1, r3, #15
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69db      	ldr	r3, [r3, #28]
 8001120:	1e5a      	subs	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	631a      	str	r2, [r3, #48]	@ 0x30
 800112a:	e007      	b.n	800113c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f022 020f 	bic.w	r2, r2, #15
 800113a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	f023 0303 	bic.w	r3, r3, #3
 800114a:	f043 0201 	orr.w	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40
 8001152:	e00a      	b.n	800116a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	f023 0312 	bic.w	r3, r3, #18
 800115c:	f043 0210 	orr.w	r2, r3, #16
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001164:	2301      	movs	r3, #1
 8001166:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800116a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800116e:	4618      	mov	r0, r3
 8001170:	3768      	adds	r7, #104	@ 0x68
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000000 	.word	0x20000000
 800117c:	431bde83 	.word	0x431bde83
 8001180:	50000300 	.word	0x50000300
 8001184:	50000100 	.word	0x50000100
 8001188:	fff0c007 	.word	0xfff0c007

0800118c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	f040 80b9 	bne.w	800131e <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d101      	bne.n	80011ba <HAL_ADC_Start_DMA+0x2e>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e0b4      	b.n	8001324 <HAL_ADC_Start_DMA+0x198>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80011c2:	4b5a      	ldr	r3, [pc, #360]	@ (800132c <HAL_ADC_Start_DMA+0x1a0>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f040 80a0 	bne.w	8001310 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 fc4b 	bl	8001a6c <ADC_Enable>
 80011d6:	4603      	mov	r3, r0
 80011d8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011da:	7dfb      	ldrb	r3, [r7, #23]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f040 8092 	bne.w	8001306 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011f6:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <HAL_ADC_Start_DMA+0x1a0>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <HAL_ADC_Start_DMA+0x80>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800120a:	d115      	bne.n	8001238 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001210:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d027      	beq.n	8001276 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800122e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001236:	e01e      	b.n	8001276 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800124c:	d004      	beq.n	8001258 <HAL_ADC_Start_DMA+0xcc>
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a37      	ldr	r2, [pc, #220]	@ (8001330 <HAL_ADC_Start_DMA+0x1a4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d10e      	bne.n	8001276 <HAL_ADC_Start_DMA+0xea>
 8001258:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d007      	beq.n	8001276 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800126e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800127e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001282:	d106      	bne.n	8001292 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001288:	f023 0206 	bic.w	r2, r3, #6
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001290:	e002      	b.n	8001298 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	2200      	movs	r2, #0
 8001296:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012a4:	4a23      	ldr	r2, [pc, #140]	@ (8001334 <HAL_ADC_Start_DMA+0x1a8>)
 80012a6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ac:	4a22      	ldr	r2, [pc, #136]	@ (8001338 <HAL_ADC_Start_DMA+0x1ac>)
 80012ae:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012b4:	4a21      	ldr	r2, [pc, #132]	@ (800133c <HAL_ADC_Start_DMA+0x1b0>)
 80012b6:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	221c      	movs	r2, #28
 80012be:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0210 	orr.w	r2, r2, #16
 80012ce:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f042 0201 	orr.w	r2, r2, #1
 80012de:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3340      	adds	r3, #64	@ 0x40
 80012ea:	4619      	mov	r1, r3
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f001 fc64 	bl	8002bbc <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0204 	orr.w	r2, r2, #4
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	e00d      	b.n	8001322 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800130e:	e008      	b.n	8001322 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800131c:	e001      	b.n	8001322 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800131e:	2302      	movs	r3, #2
 8001320:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001322:	7dfb      	ldrb	r3, [r7, #23]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	50000300 	.word	0x50000300
 8001330:	50000100 	.word	0x50000100
 8001334:	080019a1 	.word	0x080019a1
 8001338:	08001a1b 	.word	0x08001a1b
 800133c:	08001a37 	.word	0x08001a37

08001340 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_ADCEx_Calibration_Start+0x1c>
 8001358:	2302      	movs	r3, #2
 800135a:	e05f      	b.n	800141c <HAL_ADCEx_Calibration_Start+0xdc>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 fbe5 	bl	8001b34 <ADC_Disable>
 800136a:	4603      	mov	r3, r0
 800136c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d14e      	bne.n	8001412 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001388:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d107      	bne.n	80013a0 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	689a      	ldr	r2, [r3, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800139e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80013ae:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80013b0:	f7ff fd30 	bl	8000e14 <HAL_GetTick>
 80013b4:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013b6:	e01c      	b.n	80013f2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80013b8:	f7ff fd2c 	bl	8000e14 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b0a      	cmp	r3, #10
 80013c4:	d915      	bls.n	80013f2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80013d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013d4:	d10d      	bne.n	80013f2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f023 0312 	bic.w	r3, r3, #18
 80013de:	f043 0210 	orr.w	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e014      	b.n	800141c <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80013fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001400:	d0da      	beq.n	80013b8 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001406:	f023 0303 	bic.w	r3, r3, #3
 800140a:	f043 0201 	orr.w	r2, r3, #1
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2200      	movs	r2, #0
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800141a:	7bfb      	ldrb	r3, [r7, #15]
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001424:	b480      	push	{r7}
 8001426:	b09b      	sub	sp, #108	@ 0x6c
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_ADC_ConfigChannel+0x22>
 8001442:	2302      	movs	r3, #2
 8001444:	e2a1      	b.n	800198a <HAL_ADC_ConfigChannel+0x566>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2201      	movs	r2, #1
 800144a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	f040 8285 	bne.w	8001968 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b04      	cmp	r3, #4
 8001464:	d81c      	bhi.n	80014a0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	461a      	mov	r2, r3
 800147a:	231f      	movs	r3, #31
 800147c:	4093      	lsls	r3, r2
 800147e:	43db      	mvns	r3, r3
 8001480:	4019      	ands	r1, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa00 f203 	lsl.w	r2, r0, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	631a      	str	r2, [r3, #48]	@ 0x30
 800149e:	e063      	b.n	8001568 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	2b09      	cmp	r3, #9
 80014a6:	d81e      	bhi.n	80014e6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	3b1e      	subs	r3, #30
 80014bc:	221f      	movs	r2, #31
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	43db      	mvns	r3, r3
 80014c4:	4019      	ands	r1, r3
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	6818      	ldr	r0, [r3, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685a      	ldr	r2, [r3, #4]
 80014ce:	4613      	mov	r3, r2
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4413      	add	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	3b1e      	subs	r3, #30
 80014d8:	fa00 f203 	lsl.w	r2, r0, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	430a      	orrs	r2, r1
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34
 80014e4:	e040      	b.n	8001568 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b0e      	cmp	r3, #14
 80014ec:	d81e      	bhi.n	800152c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	3b3c      	subs	r3, #60	@ 0x3c
 8001502:	221f      	movs	r2, #31
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	3b3c      	subs	r3, #60	@ 0x3c
 800151e:	fa00 f203 	lsl.w	r2, r0, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	639a      	str	r2, [r3, #56]	@ 0x38
 800152a:	e01d      	b.n	8001568 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	3b5a      	subs	r3, #90	@ 0x5a
 8001540:	221f      	movs	r2, #31
 8001542:	fa02 f303 	lsl.w	r3, r2, r3
 8001546:	43db      	mvns	r3, r3
 8001548:	4019      	ands	r1, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	6818      	ldr	r0, [r3, #0]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	3b5a      	subs	r3, #90	@ 0x5a
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 80e5 	bne.w	8001742 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b09      	cmp	r3, #9
 800157e:	d91c      	bls.n	80015ba <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6999      	ldr	r1, [r3, #24]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	3b1e      	subs	r3, #30
 8001592:	2207      	movs	r2, #7
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	4019      	ands	r1, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6898      	ldr	r0, [r3, #8]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	3b1e      	subs	r3, #30
 80015ac:	fa00 f203 	lsl.w	r2, r0, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	619a      	str	r2, [r3, #24]
 80015b8:	e019      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	6959      	ldr	r1, [r3, #20]
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	4413      	add	r3, r2
 80015ca:	2207      	movs	r2, #7
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4019      	ands	r1, r3
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	6898      	ldr	r0, [r3, #8]
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4613      	mov	r3, r2
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4413      	add	r3, r2
 80015e2:	fa00 f203 	lsl.w	r2, r0, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	08db      	lsrs	r3, r3, #3
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	3b01      	subs	r3, #1
 800160c:	2b03      	cmp	r3, #3
 800160e:	d84f      	bhi.n	80016b0 <HAL_ADC_ConfigChannel+0x28c>
 8001610:	a201      	add	r2, pc, #4	@ (adr r2, 8001618 <HAL_ADC_ConfigChannel+0x1f4>)
 8001612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001616:	bf00      	nop
 8001618:	08001629 	.word	0x08001629
 800161c:	0800164b 	.word	0x0800164b
 8001620:	0800166d 	.word	0x0800166d
 8001624:	0800168f 	.word	0x0800168f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800162e:	4b9c      	ldr	r3, [pc, #624]	@ (80018a0 <HAL_ADC_ConfigChannel+0x47c>)
 8001630:	4013      	ands	r3, r2
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	6812      	ldr	r2, [r2, #0]
 8001636:	0691      	lsls	r1, r2, #26
 8001638:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800163a:	430a      	orrs	r2, r1
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001646:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001648:	e07b      	b.n	8001742 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001650:	4b93      	ldr	r3, [pc, #588]	@ (80018a0 <HAL_ADC_ConfigChannel+0x47c>)
 8001652:	4013      	ands	r3, r2
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	0691      	lsls	r1, r2, #26
 800165a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800165c:	430a      	orrs	r2, r1
 800165e:	431a      	orrs	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001668:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800166a:	e06a      	b.n	8001742 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001672:	4b8b      	ldr	r3, [pc, #556]	@ (80018a0 <HAL_ADC_ConfigChannel+0x47c>)
 8001674:	4013      	ands	r3, r2
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	0691      	lsls	r1, r2, #26
 800167c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800167e:	430a      	orrs	r2, r1
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800168a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800168c:	e059      	b.n	8001742 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001694:	4b82      	ldr	r3, [pc, #520]	@ (80018a0 <HAL_ADC_ConfigChannel+0x47c>)
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	0691      	lsls	r1, r2, #26
 800169e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016a0:	430a      	orrs	r2, r1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80016ac:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016ae:	e048      	b.n	8001742 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	069b      	lsls	r3, r3, #26
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d107      	bne.n	80016d4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016d2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	069b      	lsls	r3, r3, #26
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d107      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016f6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	069b      	lsls	r3, r3, #26
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800171a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001722:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	069b      	lsls	r3, r3, #26
 800172c:	429a      	cmp	r2, r3
 800172e:	d107      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800173e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001740:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x33e>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	d101      	bne.n	8001762 <HAL_ADC_ConfigChannel+0x33e>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_ADC_ConfigChannel+0x340>
 8001762:	2300      	movs	r3, #0
 8001764:	2b00      	cmp	r3, #0
 8001766:	f040 810a 	bne.w	800197e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d00f      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43da      	mvns	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	400a      	ands	r2, r1
 800178c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001790:	e049      	b.n	8001826 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	409a      	lsls	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b09      	cmp	r3, #9
 80017b2:	d91c      	bls.n	80017ee <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6999      	ldr	r1, [r3, #24]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	4613      	mov	r3, r2
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	4413      	add	r3, r2
 80017c4:	3b1b      	subs	r3, #27
 80017c6:	2207      	movs	r2, #7
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	4019      	ands	r1, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	6898      	ldr	r0, [r3, #8]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	3b1b      	subs	r3, #27
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	619a      	str	r2, [r3, #24]
 80017ec:	e01b      	b.n	8001826 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6959      	ldr	r1, [r3, #20]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	2207      	movs	r2, #7
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	4019      	ands	r1, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	6898      	ldr	r0, [r3, #8]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001826:	4b1f      	ldr	r3, [pc, #124]	@ (80018a4 <HAL_ADC_ConfigChannel+0x480>)
 8001828:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b10      	cmp	r3, #16
 8001830:	d105      	bne.n	800183e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800183a:	2b00      	cmp	r3, #0
 800183c:	d015      	beq.n	800186a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001842:	2b11      	cmp	r3, #17
 8001844:	d105      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001846:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00b      	beq.n	800186a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001856:	2b12      	cmp	r3, #18
 8001858:	f040 8091 	bne.w	800197e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800185c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001864:	2b00      	cmp	r3, #0
 8001866:	f040 808a 	bne.w	800197e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001872:	d102      	bne.n	800187a <HAL_ADC_ConfigChannel+0x456>
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_ADC_ConfigChannel+0x484>)
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	e002      	b.n	8001880 <HAL_ADC_ConfigChannel+0x45c>
 800187a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800187e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b01      	cmp	r3, #1
 800188c:	d10e      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x488>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <HAL_ADC_ConfigChannel+0x488>
 800189c:	2301      	movs	r3, #1
 800189e:	e006      	b.n	80018ae <HAL_ADC_ConfigChannel+0x48a>
 80018a0:	83fff000 	.word	0x83fff000
 80018a4:	50000300 	.word	0x50000300
 80018a8:	50000100 	.word	0x50000100
 80018ac:	2300      	movs	r3, #0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d150      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d107      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x4b0>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d101      	bne.n	80018d4 <HAL_ADC_ConfigChannel+0x4b0>
 80018d0:	2301      	movs	r3, #1
 80018d2:	e000      	b.n	80018d6 <HAL_ADC_ConfigChannel+0x4b2>
 80018d4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d13c      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d11d      	bne.n	800191e <HAL_ADC_ConfigChannel+0x4fa>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018ea:	d118      	bne.n	800191e <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <HAL_ADC_ConfigChannel+0x574>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a27      	ldr	r2, [pc, #156]	@ (800199c <HAL_ADC_ConfigChannel+0x578>)
 80018fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001902:	0c9a      	lsrs	r2, r3, #18
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800190e:	e002      	b.n	8001916 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	3b01      	subs	r3, #1
 8001914:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d1f9      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800191c:	e02e      	b.n	800197c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2b11      	cmp	r3, #17
 8001924:	d10b      	bne.n	800193e <HAL_ADC_ConfigChannel+0x51a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800192e:	d106      	bne.n	800193e <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001930:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001938:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800193a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800193c:	e01e      	b.n	800197c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	2b12      	cmp	r3, #18
 8001944:	d11a      	bne.n	800197c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800194e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001950:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001952:	e013      	b.n	800197c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001966:	e00a      	b.n	800197e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196c:	f043 0220 	orr.w	r2, r3, #32
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800197a:	e000      	b.n	800197e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800197c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001986:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800198a:	4618      	mov	r0, r3
 800198c:	376c      	adds	r7, #108	@ 0x6c
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000000 	.word	0x20000000
 800199c:	431bde83 	.word	0x431bde83

080019a0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d126      	bne.n	8001a08 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d115      	bne.n	8001a00 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d111      	bne.n	8001a00 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f8:	f043 0201 	orr.w	r2, r3, #1
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	f7ff fa13 	bl	8000e2c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001a06:	e004      	b.n	8001a12 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b084      	sub	sp, #16
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff fa09 	bl	8000e40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a54:	f043 0204 	orr.w	r2, r3, #4
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f7ff f9f9 	bl	8000e54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d108      	bne.n	8001a98 <ADC_Enable+0x2c>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <ADC_Enable+0x2c>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <ADC_Enable+0x2e>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d143      	bne.n	8001b26 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <ADC_Enable+0xc4>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab0:	f043 0210 	orr.w	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abc:	f043 0201 	orr.w	r2, r3, #1
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e02f      	b.n	8001b28 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f042 0201 	orr.w	r2, r2, #1
 8001ad6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ad8:	f7ff f99c 	bl	8000e14 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ade:	e01b      	b.n	8001b18 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ae0:	f7ff f998 	bl	8000e14 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d914      	bls.n	8001b18 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d00d      	beq.n	8001b18 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e007      	b.n	8001b28 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d1dc      	bne.n	8001ae0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b26:	2300      	movs	r3, #0
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	8000003f 	.word	0x8000003f

08001b34 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <ADC_Disable+0x2c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <ADC_Disable+0x2c>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <ADC_Disable+0x2e>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d047      	beq.n	8001bf6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 030d 	and.w	r3, r3, #13
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d10f      	bne.n	8001b94 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 0202 	orr.w	r2, r2, #2
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f942 	bl	8000e14 <HAL_GetTick>
 8001b90:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b92:	e029      	b.n	8001be8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	f043 0210 	orr.w	r2, r3, #16
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e023      	b.n	8001bf8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bb0:	f7ff f930 	bl	8000e14 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d914      	bls.n	8001be8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d10d      	bne.n	8001be8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	f043 0210 	orr.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bdc:	f043 0201 	orr.w	r2, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e007      	b.n	8001bf8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d0dc      	beq.n	8001bb0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0ed      	b.n	8001dee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe ff06 	bl	8000a30 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c34:	f7ff f8ee 	bl	8000e14 <HAL_GetTick>
 8001c38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c3a:	e012      	b.n	8001c62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c3c:	f7ff f8ea 	bl	8000e14 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b0a      	cmp	r3, #10
 8001c48:	d90b      	bls.n	8001c62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2205      	movs	r2, #5
 8001c5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0c5      	b.n	8001dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d0e5      	beq.n	8001c3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0202 	bic.w	r2, r2, #2
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c80:	f7ff f8c8 	bl	8000e14 <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c86:	e012      	b.n	8001cae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c88:	f7ff f8c4 	bl	8000e14 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	d90b      	bls.n	8001cae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e09f      	b.n	8001dee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1e5      	bne.n	8001c88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	7e1b      	ldrb	r3, [r3, #24]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d108      	bne.n	8001cd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e007      	b.n	8001ce6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7e5b      	ldrb	r3, [r3, #25]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d108      	bne.n	8001d00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	e007      	b.n	8001d10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	7e9b      	ldrb	r3, [r3, #26]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d108      	bne.n	8001d2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e007      	b.n	8001d3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0220 	bic.w	r2, r2, #32
 8001d38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	7edb      	ldrb	r3, [r3, #27]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d108      	bne.n	8001d54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0210 	bic.w	r2, r2, #16
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	e007      	b.n	8001d64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0210 	orr.w	r2, r2, #16
 8001d62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	7f1b      	ldrb	r3, [r3, #28]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d108      	bne.n	8001d7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0208 	orr.w	r2, r2, #8
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	e007      	b.n	8001d8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f022 0208 	bic.w	r2, r2, #8
 8001d8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	7f5b      	ldrb	r3, [r3, #29]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d108      	bne.n	8001da8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0204 	orr.w	r2, r2, #4
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	e007      	b.n	8001db8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0204 	bic.w	r2, r2, #4
 8001db6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	695b      	ldr	r3, [r3, #20]
 8001dcc:	ea42 0103 	orr.w	r1, r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	1e5a      	subs	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e0c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e0e:	7cfb      	ldrb	r3, [r7, #19]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d003      	beq.n	8001e1c <HAL_CAN_ConfigFilter+0x26>
 8001e14:	7cfb      	ldrb	r3, [r7, #19]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	f040 80aa 	bne.w	8001f70 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	2201      	movs	r2, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d123      	bne.n	8001e9e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	401a      	ands	r2, r3
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e78:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	3248      	adds	r2, #72	@ 0x48
 8001e7e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e92:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e94:	6979      	ldr	r1, [r7, #20]
 8001e96:	3348      	adds	r3, #72	@ 0x48
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d122      	bne.n	8001eec <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ec6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3248      	adds	r2, #72	@ 0x48
 8001ecc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee2:	6979      	ldr	r1, [r7, #20]
 8001ee4:	3348      	adds	r3, #72	@ 0x48
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	440b      	add	r3, r1
 8001eea:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f06:	e007      	b.n	8001f18 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	691b      	ldr	r3, [r3, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f32:	e007      	b.n	8001f44 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d107      	bne.n	8001f5c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f62:	f023 0201 	bic.w	r2, r3, #1
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	e006      	b.n	8001f7e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
  }
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	371c      	adds	r7, #28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b084      	sub	sp, #16
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d12e      	bne.n	8001ffc <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0201 	bic.w	r2, r2, #1
 8001fb4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001fb6:	f7fe ff2d 	bl	8000e14 <HAL_GetTick>
 8001fba:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fbc:	e012      	b.n	8001fe4 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001fbe:	f7fe ff29 	bl	8000e14 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b0a      	cmp	r3, #10
 8001fca:	d90b      	bls.n	8001fe4 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2205      	movs	r2, #5
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e012      	b.n	800200a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0301 	and.w	r3, r3, #1
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1e5      	bne.n	8001fbe <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e006      	b.n	800200a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002000:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002012:	b480      	push	{r7}
 8002014:	b089      	sub	sp, #36	@ 0x24
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
 800201e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002026:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002030:	7ffb      	ldrb	r3, [r7, #31]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d003      	beq.n	800203e <HAL_CAN_AddTxMessage+0x2c>
 8002036:	7ffb      	ldrb	r3, [r7, #31]
 8002038:	2b02      	cmp	r3, #2
 800203a:	f040 80ad 	bne.w	8002198 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10a      	bne.n	800205e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 8095 	beq.w	8002188 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	0e1b      	lsrs	r3, r3, #24
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002068:	2201      	movs	r2, #1
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	409a      	lsls	r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10d      	bne.n	8002096 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	6809      	ldr	r1, [r1, #0]
 8002088:	431a      	orrs	r2, r3
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3318      	adds	r3, #24
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	440b      	add	r3, r1
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	e00f      	b.n	80020b6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020a0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80020aa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3318      	adds	r3, #24
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	440b      	add	r3, r1
 80020b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3318      	adds	r3, #24
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	440b      	add	r3, r1
 80020c6:	3304      	adds	r3, #4
 80020c8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	7d1b      	ldrb	r3, [r3, #20]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d111      	bne.n	80020f6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3318      	adds	r3, #24
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	6811      	ldr	r1, [r2, #0]
 80020e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3318      	adds	r3, #24
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	440b      	add	r3, r1
 80020f2:	3304      	adds	r3, #4
 80020f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	3307      	adds	r3, #7
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	061a      	lsls	r2, r3, #24
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3306      	adds	r3, #6
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	041b      	lsls	r3, r3, #16
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3305      	adds	r3, #5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4313      	orrs	r3, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	3204      	adds	r2, #4
 8002116:	7812      	ldrb	r2, [r2, #0]
 8002118:	4610      	mov	r0, r2
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	6811      	ldr	r1, [r2, #0]
 800211e:	ea43 0200 	orr.w	r2, r3, r0
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	440b      	add	r3, r1
 8002128:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800212c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3303      	adds	r3, #3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	061a      	lsls	r2, r3, #24
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3301      	adds	r3, #1
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	021b      	lsls	r3, r3, #8
 8002148:	4313      	orrs	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	7812      	ldrb	r2, [r2, #0]
 800214e:	4610      	mov	r0, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	6811      	ldr	r1, [r2, #0]
 8002154:	ea43 0200 	orr.w	r2, r3, r0
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	440b      	add	r3, r1
 800215e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002162:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	3318      	adds	r3, #24
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	6811      	ldr	r1, [r2, #0]
 8002176:	f043 0201 	orr.w	r2, r3, #1
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3318      	adds	r3, #24
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	440b      	add	r3, r1
 8002182:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	e00e      	b.n	80021a6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e006      	b.n	80021a6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
  }
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3724      	adds	r7, #36	@ 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80021c6:	7afb      	ldrb	r3, [r7, #11]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d002      	beq.n	80021d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80021cc:	7afb      	ldrb	r3, [r7, #11]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d11d      	bne.n	800220e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d002      	beq.n	80021e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3301      	adds	r3, #1
 80021e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3301      	adds	r3, #1
 80021f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d002      	beq.n	800220e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	3301      	adds	r3, #1
 800220c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
 8002228:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002230:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002232:	7dfb      	ldrb	r3, [r7, #23]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d003      	beq.n	8002240 <HAL_CAN_GetRxMessage+0x24>
 8002238:	7dfb      	ldrb	r3, [r7, #23]
 800223a:	2b02      	cmp	r3, #2
 800223c:	f040 8103 	bne.w	8002446 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10e      	bne.n	8002264 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b00      	cmp	r3, #0
 8002252:	d116      	bne.n	8002282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002258:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e0f7      	b.n	8002454 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d107      	bne.n	8002282 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002276:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0e8      	b.n	8002454 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	331b      	adds	r3, #27
 800228a:	011b      	lsls	r3, r3, #4
 800228c:	4413      	add	r3, r2
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0204 	and.w	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10c      	bne.n	80022ba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	331b      	adds	r3, #27
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	4413      	add	r3, r2
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	0d5b      	lsrs	r3, r3, #21
 80022b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	e00b      	b.n	80022d2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	331b      	adds	r3, #27
 80022c2:	011b      	lsls	r3, r3, #4
 80022c4:	4413      	add	r3, r2
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	08db      	lsrs	r3, r3, #3
 80022ca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	331b      	adds	r3, #27
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0202 	and.w	r2, r3, #2
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	331b      	adds	r3, #27
 80022f0:	011b      	lsls	r3, r3, #4
 80022f2:	4413      	add	r3, r2
 80022f4:	3304      	adds	r3, #4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0308 	and.w	r3, r3, #8
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2208      	movs	r2, #8
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	e00b      	b.n	8002320 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	331b      	adds	r3, #27
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4413      	add	r3, r2
 8002314:	3304      	adds	r3, #4
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 020f 	and.w	r2, r3, #15
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	331b      	adds	r3, #27
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	4413      	add	r3, r2
 800232c:	3304      	adds	r3, #4
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	b2da      	uxtb	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	331b      	adds	r3, #27
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	0c1b      	lsrs	r3, r3, #16
 800234a:	b29a      	uxth	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	4413      	add	r3, r2
 800235a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	4413      	add	r3, r2
 8002370:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0a1a      	lsrs	r2, r3, #8
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	0c1a      	lsrs	r2, r3, #16
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	3302      	adds	r3, #2
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0e1a      	lsrs	r2, r3, #24
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	3303      	adds	r3, #3
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	4413      	add	r3, r2
 80023be:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3304      	adds	r3, #4
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0a1a      	lsrs	r2, r3, #8
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3305      	adds	r3, #5
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0c1a      	lsrs	r2, r3, #16
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3306      	adds	r3, #6
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	0e1a      	lsrs	r2, r3, #24
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	3307      	adds	r3, #7
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d108      	bne.n	8002432 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68da      	ldr	r2, [r3, #12]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0220 	orr.w	r2, r2, #32
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	e007      	b.n	8002442 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	691a      	ldr	r2, [r3, #16]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002442:	2300      	movs	r3, #0
 8002444:	e006      	b.n	8002454 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
  }
}
 8002454:	4618      	mov	r0, r3
 8002456:	371c      	adds	r7, #28
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002470:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002472:	7bfb      	ldrb	r3, [r7, #15]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d002      	beq.n	800247e <HAL_CAN_ActivateNotification+0x1e>
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d109      	bne.n	8002492 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6959      	ldr	r1, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e006      	b.n	80024a0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b08a      	sub	sp, #40	@ 0x28
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024e8:	6a3b      	ldr	r3, [r7, #32]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d07c      	beq.n	80025ec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d023      	beq.n	8002544 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2201      	movs	r2, #1
 8002502:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f983 	bl	800281a <HAL_CAN_TxMailbox0CompleteCallback>
 8002514:	e016      	b.n	8002544 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	2b00      	cmp	r3, #0
 800251e:	d004      	beq.n	800252a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002522:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
 8002528:	e00c      	b.n	8002544 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f003 0308 	and.w	r3, r3, #8
 8002530:	2b00      	cmp	r3, #0
 8002532:	d004      	beq.n	800253e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800253a:	627b      	str	r3, [r7, #36]	@ 0x24
 800253c:	e002      	b.n	8002544 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f989 	bl	8002856 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d024      	beq.n	8002598 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002556:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f963 	bl	800282e <HAL_CAN_TxMailbox1CompleteCallback>
 8002568:	e016      	b.n	8002598 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d004      	beq.n	800257e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002576:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
 800257c:	e00c      	b.n	8002598 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800258e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002590:	e002      	b.n	8002598 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f969 	bl	800286a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d024      	beq.n	80025ec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025aa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f943 	bl	8002842 <HAL_CAN_TxMailbox2CompleteCallback>
 80025bc:	e016      	b.n	80025ec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d0:	e00c      	b.n	80025ec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d004      	beq.n	80025e6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e4:	e002      	b.n	80025ec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f949 	bl	800287e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00c      	beq.n	8002610 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2210      	movs	r2, #16
 800260e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00b      	beq.n	8002632 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d006      	beq.n	8002632 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2208      	movs	r2, #8
 800262a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f930 	bl	8002892 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d009      	beq.n	8002650 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	f003 0303 	and.w	r3, r3, #3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d002      	beq.n	8002650 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7fd fe10 	bl	8000270 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00c      	beq.n	8002674 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	f003 0310 	and.w	r3, r3, #16
 8002660:	2b00      	cmp	r3, #0
 8002662:	d007      	beq.n	8002674 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2210      	movs	r2, #16
 8002672:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00b      	beq.n	8002696 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b00      	cmp	r3, #0
 8002686:	d006      	beq.n	8002696 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2208      	movs	r2, #8
 800268e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f912 	bl	80028ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002696:	6a3b      	ldr	r3, [r7, #32]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b00      	cmp	r3, #0
 800269e:	d009      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d002      	beq.n	80026b4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8f9 	bl	80028a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2210      	movs	r2, #16
 80026ce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f8fc 	bl	80028ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00b      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2208      	movs	r2, #8
 80026f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8f5 	bl	80028e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026f8:	6a3b      	ldr	r3, [r7, #32]
 80026fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d07b      	beq.n	80027fa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	f003 0304 	and.w	r3, r3, #4
 8002708:	2b00      	cmp	r3, #0
 800270a:	d072      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d008      	beq.n	8002728 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002722:	f043 0301 	orr.w	r3, r3, #1
 8002726:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800272e:	2b00      	cmp	r3, #0
 8002730:	d008      	beq.n	8002744 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	d003      	beq.n	8002744 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800273c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273e:	f043 0302 	orr.w	r3, r3, #2
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	f043 0304 	orr.w	r3, r3, #4
 800275e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002760:	6a3b      	ldr	r3, [r7, #32]
 8002762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002766:	2b00      	cmp	r3, #0
 8002768:	d043      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002770:	2b00      	cmp	r3, #0
 8002772:	d03e      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277a:	2b60      	cmp	r3, #96	@ 0x60
 800277c:	d02b      	beq.n	80027d6 <HAL_CAN_IRQHandler+0x32a>
 800277e:	2b60      	cmp	r3, #96	@ 0x60
 8002780:	d82e      	bhi.n	80027e0 <HAL_CAN_IRQHandler+0x334>
 8002782:	2b50      	cmp	r3, #80	@ 0x50
 8002784:	d022      	beq.n	80027cc <HAL_CAN_IRQHandler+0x320>
 8002786:	2b50      	cmp	r3, #80	@ 0x50
 8002788:	d82a      	bhi.n	80027e0 <HAL_CAN_IRQHandler+0x334>
 800278a:	2b40      	cmp	r3, #64	@ 0x40
 800278c:	d019      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x316>
 800278e:	2b40      	cmp	r3, #64	@ 0x40
 8002790:	d826      	bhi.n	80027e0 <HAL_CAN_IRQHandler+0x334>
 8002792:	2b30      	cmp	r3, #48	@ 0x30
 8002794:	d010      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x30c>
 8002796:	2b30      	cmp	r3, #48	@ 0x30
 8002798:	d822      	bhi.n	80027e0 <HAL_CAN_IRQHandler+0x334>
 800279a:	2b10      	cmp	r3, #16
 800279c:	d002      	beq.n	80027a4 <HAL_CAN_IRQHandler+0x2f8>
 800279e:	2b20      	cmp	r3, #32
 80027a0:	d005      	beq.n	80027ae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027a2:	e01d      	b.n	80027e0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	f043 0308 	orr.w	r3, r3, #8
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027ac:	e019      	b.n	80027e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b0:	f043 0310 	orr.w	r3, r3, #16
 80027b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027b6:	e014      	b.n	80027e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ba:	f043 0320 	orr.w	r3, r3, #32
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027c0:	e00f      	b.n	80027e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027ca:	e00a      	b.n	80027e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027d4:	e005      	b.n	80027e2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027de:	e000      	b.n	80027e2 <HAL_CAN_IRQHandler+0x336>
            break;
 80027e0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	699a      	ldr	r2, [r3, #24]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027f0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2204      	movs	r2, #4
 80027f8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f872 	bl	80028f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002812:	bf00      	nop
 8002814:	3728      	adds	r7, #40	@ 0x28
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002842:	b480      	push	{r7}
 8002844:	b083      	sub	sp, #12
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800291c:	4b0c      	ldr	r3, [pc, #48]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002928:	4013      	ands	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002934:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002938:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800293c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800293e:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <__NVIC_SetPriorityGrouping+0x44>)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	60d3      	str	r3, [r2, #12]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002958:	4b04      	ldr	r3, [pc, #16]	@ (800296c <__NVIC_GetPriorityGrouping+0x18>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	f003 0307 	and.w	r3, r3, #7
}
 8002962:	4618      	mov	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	e000ed00 	.word	0xe000ed00

08002970 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	2b00      	cmp	r3, #0
 8002980:	db0b      	blt.n	800299a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	f003 021f 	and.w	r2, r3, #31
 8002988:	4907      	ldr	r1, [pc, #28]	@ (80029a8 <__NVIC_EnableIRQ+0x38>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	095b      	lsrs	r3, r3, #5
 8002990:	2001      	movs	r0, #1
 8002992:	fa00 f202 	lsl.w	r2, r0, r2
 8002996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	e000e100 	.word	0xe000e100

080029ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	6039      	str	r1, [r7, #0]
 80029b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	db0a      	blt.n	80029d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	490c      	ldr	r1, [pc, #48]	@ (80029f8 <__NVIC_SetPriority+0x4c>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	0112      	lsls	r2, r2, #4
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	440b      	add	r3, r1
 80029d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029d4:	e00a      	b.n	80029ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	4908      	ldr	r1, [pc, #32]	@ (80029fc <__NVIC_SetPriority+0x50>)
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	f003 030f 	and.w	r3, r3, #15
 80029e2:	3b04      	subs	r3, #4
 80029e4:	0112      	lsls	r2, r2, #4
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	440b      	add	r3, r1
 80029ea:	761a      	strb	r2, [r3, #24]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000e100 	.word	0xe000e100
 80029fc:	e000ed00 	.word	0xe000ed00

08002a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b089      	sub	sp, #36	@ 0x24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f1c3 0307 	rsb	r3, r3, #7
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	bf28      	it	cs
 8002a1e:	2304      	movcs	r3, #4
 8002a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3304      	adds	r3, #4
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d902      	bls.n	8002a30 <NVIC_EncodePriority+0x30>
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3b03      	subs	r3, #3
 8002a2e:	e000      	b.n	8002a32 <NVIC_EncodePriority+0x32>
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	f04f 32ff 	mov.w	r2, #4294967295
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43da      	mvns	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	401a      	ands	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a48:	f04f 31ff 	mov.w	r1, #4294967295
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a52:	43d9      	mvns	r1, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	4313      	orrs	r3, r2
         );
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	@ 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
	...

08002a68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3b01      	subs	r3, #1
 8002a74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a78:	d301      	bcc.n	8002a7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e00f      	b.n	8002a9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <SysTick_Config+0x40>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a86:	210f      	movs	r1, #15
 8002a88:	f04f 30ff 	mov.w	r0, #4294967295
 8002a8c:	f7ff ff8e 	bl	80029ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <SysTick_Config+0x40>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a96:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <SysTick_Config+0x40>)
 8002a98:	2207      	movs	r2, #7
 8002a9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff ff29 	bl	800290c <__NVIC_SetPriorityGrouping>
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b086      	sub	sp, #24
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60b9      	str	r1, [r7, #8]
 8002acc:	607a      	str	r2, [r7, #4]
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ad4:	f7ff ff3e 	bl	8002954 <__NVIC_GetPriorityGrouping>
 8002ad8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	6978      	ldr	r0, [r7, #20]
 8002ae0:	f7ff ff8e 	bl	8002a00 <NVIC_EncodePriority>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff ff5d 	bl	80029ac <__NVIC_SetPriority>
}
 8002af2:	bf00      	nop
 8002af4:	3718      	adds	r7, #24
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7ff ff31 	bl	8002970 <__NVIC_EnableIRQ>
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b082      	sub	sp, #8
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff ffa2 	bl	8002a68 <SysTick_Config>
 8002b24:	4603      	mov	r3, r0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b084      	sub	sp, #16
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e037      	b.n	8002bb4 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b5a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68fa      	ldr	r2, [r7, #12]
 8002b94:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f940 	bl	8002e1c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d101      	bne.n	8002bdc <HAL_DMA_Start_IT+0x20>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e04a      	b.n	8002c72 <HAL_DMA_Start_IT+0xb6>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d13a      	bne.n	8002c64 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68b9      	ldr	r1, [r7, #8]
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f8d4 	bl	8002dc0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d008      	beq.n	8002c32 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 020e 	orr.w	r2, r2, #14
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	e00f      	b.n	8002c52 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 020a 	orr.w	r2, r2, #10
 8002c40:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0204 	bic.w	r2, r2, #4
 8002c50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0201 	orr.w	r2, r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e005      	b.n	8002c70 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b084      	sub	sp, #16
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	2204      	movs	r2, #4
 8002c98:	409a      	lsls	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d024      	beq.n	8002cec <HAL_DMA_IRQHandler+0x72>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f003 0304 	and.w	r3, r3, #4
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d01f      	beq.n	8002cec <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0204 	bic.w	r2, r2, #4
 8002cc8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd2:	2104      	movs	r1, #4
 8002cd4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d06a      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cea:	e065      	b.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d02c      	beq.n	8002d56 <HAL_DMA_IRQHandler+0xdc>
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d027      	beq.n	8002d56 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0320 	and.w	r3, r3, #32
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10b      	bne.n	8002d2c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 020a 	bic.w	r2, r2, #10
 8002d22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	2102      	movs	r1, #2
 8002d36:	fa01 f202 	lsl.w	r2, r1, r2
 8002d3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d035      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d54:	e030      	b.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	2208      	movs	r2, #8
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d028      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d023      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 020e 	bic.w	r2, r2, #14
 8002d7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d88:	2101      	movs	r1, #1
 8002d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d004      	beq.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
    }
  }
}
 8002db6:	e7ff      	b.n	8002db8 <HAL_DMA_IRQHandler+0x13e>
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ddc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b10      	cmp	r3, #16
 8002dec:	d108      	bne.n	8002e00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dfe:	e007      	b.n	8002e10 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b09      	ldr	r3, [pc, #36]	@ (8002e50 <DMA_CalcBaseAndBitshift+0x34>)
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4a09      	ldr	r2, [pc, #36]	@ (8002e54 <DMA_CalcBaseAndBitshift+0x38>)
 8002e30:	fba2 2303 	umull	r2, r3, r2, r3
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	009a      	lsls	r2, r3, #2
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a06      	ldr	r2, [pc, #24]	@ (8002e58 <DMA_CalcBaseAndBitshift+0x3c>)
 8002e40:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	bffdfff8 	.word	0xbffdfff8
 8002e54:	cccccccd 	.word	0xcccccccd
 8002e58:	40020000 	.word	0x40020000

08002e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b087      	sub	sp, #28
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	e14e      	b.n	800310a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	2101      	movs	r1, #1
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	fa01 f303 	lsl.w	r3, r1, r3
 8002e78:	4013      	ands	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 8140 	beq.w	8003104 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d005      	beq.n	8002e9c <HAL_GPIO_Init+0x40>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d130      	bne.n	8002efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	43db      	mvns	r3, r3
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	005b      	lsls	r3, r3, #1
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43db      	mvns	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	091b      	lsrs	r3, r3, #4
 8002ee8:	f003 0201 	and.w	r2, r3, #1
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d017      	beq.n	8002f3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	2203      	movs	r2, #3
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d123      	bne.n	8002f8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	4013      	ands	r3, r2
 8002f68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	08da      	lsrs	r2, r3, #3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	3208      	adds	r2, #8
 8002f88:	6939      	ldr	r1, [r7, #16]
 8002f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	2203      	movs	r2, #3
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43db      	mvns	r3, r3
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	f003 0203 	and.w	r2, r3, #3
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 809a 	beq.w	8003104 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd0:	4b55      	ldr	r3, [pc, #340]	@ (8003128 <HAL_GPIO_Init+0x2cc>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	4a54      	ldr	r2, [pc, #336]	@ (8003128 <HAL_GPIO_Init+0x2cc>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	6193      	str	r3, [r2, #24]
 8002fdc:	4b52      	ldr	r3, [pc, #328]	@ (8003128 <HAL_GPIO_Init+0x2cc>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60bb      	str	r3, [r7, #8]
 8002fe6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fe8:	4a50      	ldr	r2, [pc, #320]	@ (800312c <HAL_GPIO_Init+0x2d0>)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	089b      	lsrs	r3, r3, #2
 8002fee:	3302      	adds	r3, #2
 8002ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0303 	and.w	r3, r3, #3
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	220f      	movs	r2, #15
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003012:	d013      	beq.n	800303c <HAL_GPIO_Init+0x1e0>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a46      	ldr	r2, [pc, #280]	@ (8003130 <HAL_GPIO_Init+0x2d4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d00d      	beq.n	8003038 <HAL_GPIO_Init+0x1dc>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a45      	ldr	r2, [pc, #276]	@ (8003134 <HAL_GPIO_Init+0x2d8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d007      	beq.n	8003034 <HAL_GPIO_Init+0x1d8>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a44      	ldr	r2, [pc, #272]	@ (8003138 <HAL_GPIO_Init+0x2dc>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d101      	bne.n	8003030 <HAL_GPIO_Init+0x1d4>
 800302c:	2303      	movs	r3, #3
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x1e2>
 8003030:	2305      	movs	r3, #5
 8003032:	e004      	b.n	800303e <HAL_GPIO_Init+0x1e2>
 8003034:	2302      	movs	r3, #2
 8003036:	e002      	b.n	800303e <HAL_GPIO_Init+0x1e2>
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_GPIO_Init+0x1e2>
 800303c:	2300      	movs	r3, #0
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	f002 0203 	and.w	r2, r2, #3
 8003044:	0092      	lsls	r2, r2, #2
 8003046:	4093      	lsls	r3, r2
 8003048:	693a      	ldr	r2, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800304e:	4937      	ldr	r1, [pc, #220]	@ (800312c <HAL_GPIO_Init+0x2d0>)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	089b      	lsrs	r3, r3, #2
 8003054:	3302      	adds	r3, #2
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305c:	4b37      	ldr	r3, [pc, #220]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	43db      	mvns	r3, r3
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4013      	ands	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003080:	4a2e      	ldr	r2, [pc, #184]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003086:	4b2d      	ldr	r3, [pc, #180]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	43db      	mvns	r3, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4013      	ands	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030aa:	4a24      	ldr	r2, [pc, #144]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b0:	4b22      	ldr	r3, [pc, #136]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030d4:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030da:	4b18      	ldr	r3, [pc, #96]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030fe:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <HAL_GPIO_Init+0x2e0>)
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	3301      	adds	r3, #1
 8003108:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	fa22 f303 	lsr.w	r3, r2, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	f47f aea9 	bne.w	8002e6c <HAL_GPIO_Init+0x10>
  }
}
 800311a:	bf00      	nop
 800311c:	bf00      	nop
 800311e:	371c      	adds	r7, #28
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	40021000 	.word	0x40021000
 800312c:	40010000 	.word	0x40010000
 8003130:	48000400 	.word	0x48000400
 8003134:	48000800 	.word	0x48000800
 8003138:	48000c00 	.word	0x48000c00
 800313c:	40010400 	.word	0x40010400

08003140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003146:	af00      	add	r7, sp, #0
 8003148:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003150:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003152:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003156:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d102      	bne.n	8003166 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f001 b823 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800316a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 817d 	beq.w	8003476 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800317c:	4bbc      	ldr	r3, [pc, #752]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b04      	cmp	r3, #4
 8003186:	d00c      	beq.n	80031a2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003188:	4bb9      	ldr	r3, [pc, #740]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 030c 	and.w	r3, r3, #12
 8003190:	2b08      	cmp	r3, #8
 8003192:	d15c      	bne.n	800324e <HAL_RCC_OscConfig+0x10e>
 8003194:	4bb6      	ldr	r3, [pc, #728]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800319c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a0:	d155      	bne.n	800324e <HAL_RCC_OscConfig+0x10e>
 80031a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031a6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031b6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0x94>
 80031ce:	4ba8      	ldr	r3, [pc, #672]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e015      	b.n	8003200 <HAL_RCC_OscConfig+0xc0>
 80031d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d8:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031dc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80031e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031ec:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80031f0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80031f4:	fa93 f3a3 	rbit	r3, r3
 80031f8:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80031fc:	4b9c      	ldr	r3, [pc, #624]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003200:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003204:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003208:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800320c:	fa92 f2a2 	rbit	r2, r2
 8003210:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8003214:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003218:	fab2 f282 	clz	r2, r2
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f042 0220 	orr.w	r2, r2, #32
 8003222:	b2d2      	uxtb	r2, r2
 8003224:	f002 021f 	and.w	r2, r2, #31
 8003228:	2101      	movs	r1, #1
 800322a:	fa01 f202 	lsl.w	r2, r1, r2
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 811f 	beq.w	8003474 <HAL_RCC_OscConfig+0x334>
 8003236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f040 8116 	bne.w	8003474 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f000 bfaf 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003252:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x12e>
 8003260:	4b83      	ldr	r3, [pc, #524]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a82      	ldr	r2, [pc, #520]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e036      	b.n	80032dc <HAL_RCC_OscConfig+0x19c>
 800326e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003272:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0x158>
 800327e:	4b7c      	ldr	r3, [pc, #496]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a7b      	ldr	r2, [pc, #492]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003284:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b79      	ldr	r3, [pc, #484]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a78      	ldr	r2, [pc, #480]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003290:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e021      	b.n	80032dc <HAL_RCC_OscConfig+0x19c>
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x184>
 80032aa:	4b71      	ldr	r3, [pc, #452]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a70      	ldr	r2, [pc, #448]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b6e      	ldr	r3, [pc, #440]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a6d      	ldr	r2, [pc, #436]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0x19c>
 80032c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a69      	ldr	r2, [pc, #420]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b67      	ldr	r3, [pc, #412]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a66      	ldr	r2, [pc, #408]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032da:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032dc:	4b64      	ldr	r3, [pc, #400]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	f023 020f 	bic.w	r2, r3, #15
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	495f      	ldr	r1, [pc, #380]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d059      	beq.n	80033ba <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7fd fd85 	bl	8000e14 <HAL_GetTick>
 800330a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330e:	e00a      	b.n	8003326 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003310:	f7fd fd80 	bl	8000e14 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	2b64      	cmp	r3, #100	@ 0x64
 800331e:	d902      	bls.n	8003326 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	f000 bf43 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
 8003326:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800332a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800333a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800333e:	fab3 f383 	clz	r3, r3
 8003342:	b2db      	uxtb	r3, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	d102      	bne.n	8003358 <HAL_RCC_OscConfig+0x218>
 8003352:	4b47      	ldr	r3, [pc, #284]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	e015      	b.n	8003384 <HAL_RCC_OscConfig+0x244>
 8003358:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800335c:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800336c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003370:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003374:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003378:	fa93 f3a3 	rbit	r3, r3
 800337c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003380:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003388:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800338c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003390:	fa92 f2a2 	rbit	r2, r2
 8003394:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003398:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800339c:	fab2 f282 	clz	r2, r2
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	f042 0220 	orr.w	r2, r2, #32
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	f002 021f 	and.w	r2, r2, #31
 80033ac:	2101      	movs	r1, #1
 80033ae:	fa01 f202 	lsl.w	r2, r1, r2
 80033b2:	4013      	ands	r3, r2
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0ab      	beq.n	8003310 <HAL_RCC_OscConfig+0x1d0>
 80033b8:	e05d      	b.n	8003476 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ba:	f7fd fd2b 	bl	8000e14 <HAL_GetTick>
 80033be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fd fd26 	bl	8000e14 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b64      	cmp	r3, #100	@ 0x64
 80033d2:	d902      	bls.n	80033da <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	f000 bee9 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
 80033da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033de:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80033ee:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	fab3 f383 	clz	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b01      	cmp	r3, #1
 8003404:	d102      	bne.n	800340c <HAL_RCC_OscConfig+0x2cc>
 8003406:	4b1a      	ldr	r3, [pc, #104]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	e015      	b.n	8003438 <HAL_RCC_OscConfig+0x2f8>
 800340c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003410:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003414:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003418:	fa93 f3a3 	rbit	r3, r3
 800341c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003420:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003424:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003428:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003434:	4b0e      	ldr	r3, [pc, #56]	@ (8003470 <HAL_RCC_OscConfig+0x330>)
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800343c:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8003440:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003444:	fa92 f2a2 	rbit	r2, r2
 8003448:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800344c:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8003450:	fab2 f282 	clz	r2, r2
 8003454:	b2d2      	uxtb	r2, r2
 8003456:	f042 0220 	orr.w	r2, r2, #32
 800345a:	b2d2      	uxtb	r2, r2
 800345c:	f002 021f 	and.w	r2, r2, #31
 8003460:	2101      	movs	r1, #1
 8003462:	fa01 f202 	lsl.w	r2, r1, r2
 8003466:	4013      	ands	r3, r2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ab      	bne.n	80033c4 <HAL_RCC_OscConfig+0x284>
 800346c:	e003      	b.n	8003476 <HAL_RCC_OscConfig+0x336>
 800346e:	bf00      	nop
 8003470:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 817d 	beq.w	8003786 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800348c:	4ba6      	ldr	r3, [pc, #664]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00b      	beq.n	80034b0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003498:	4ba3      	ldr	r3, [pc, #652]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 030c 	and.w	r3, r3, #12
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d172      	bne.n	800358a <HAL_RCC_OscConfig+0x44a>
 80034a4:	4ba0      	ldr	r3, [pc, #640]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d16c      	bne.n	800358a <HAL_RCC_OscConfig+0x44a>
 80034b0:	2302      	movs	r3, #2
 80034b2:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80034ba:	fa93 f3a3 	rbit	r3, r3
 80034be:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80034c2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034c6:	fab3 f383 	clz	r3, r3
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	095b      	lsrs	r3, r3, #5
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	f043 0301 	orr.w	r3, r3, #1
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d102      	bne.n	80034e0 <HAL_RCC_OscConfig+0x3a0>
 80034da:	4b93      	ldr	r3, [pc, #588]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	e013      	b.n	8003508 <HAL_RCC_OscConfig+0x3c8>
 80034e0:	2302      	movs	r3, #2
 80034e2:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80034ea:	fa93 f3a3 	rbit	r3, r3
 80034ee:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80034f2:	2302      	movs	r3, #2
 80034f4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80034f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8003504:	4b88      	ldr	r3, [pc, #544]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 8003506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003508:	2202      	movs	r2, #2
 800350a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800350e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003512:	fa92 f2a2 	rbit	r2, r2
 8003516:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800351a:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800351e:	fab2 f282 	clz	r2, r2
 8003522:	b2d2      	uxtb	r2, r2
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	f002 021f 	and.w	r2, r2, #31
 800352e:	2101      	movs	r1, #1
 8003530:	fa01 f202 	lsl.w	r2, r1, r2
 8003534:	4013      	ands	r3, r2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00a      	beq.n	8003550 <HAL_RCC_OscConfig+0x410>
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d002      	beq.n	8003550 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f000 be2e 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003550:	4b75      	ldr	r3, [pc, #468]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003558:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	21f8      	movs	r1, #248	@ 0xf8
 8003566:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800356e:	fa91 f1a1 	rbit	r1, r1
 8003572:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003576:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800357a:	fab1 f181 	clz	r1, r1
 800357e:	b2c9      	uxtb	r1, r1
 8003580:	408b      	lsls	r3, r1
 8003582:	4969      	ldr	r1, [pc, #420]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003588:	e0fd      	b.n	8003786 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	f000 8088 	beq.w	80036ac <HAL_RCC_OscConfig+0x56c>
 800359c:	2301      	movs	r3, #1
 800359e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80035a6:	fa93 f3a3 	rbit	r3, r3
 80035aa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80035ae:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035b2:	fab3 f383 	clz	r3, r3
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035bc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	461a      	mov	r2, r3
 80035c4:	2301      	movs	r3, #1
 80035c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c8:	f7fd fc24 	bl	8000e14 <HAL_GetTick>
 80035cc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d0:	e00a      	b.n	80035e8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fd fc1f 	bl	8000e14 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d902      	bls.n	80035e8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	f000 bde2 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
 80035e8:	2302      	movs	r3, #2
 80035ea:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80035f2:	fa93 f3a3 	rbit	r3, r3
 80035f6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80035fa:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	fab3 f383 	clz	r3, r3
 8003602:	b2db      	uxtb	r3, r3
 8003604:	095b      	lsrs	r3, r3, #5
 8003606:	b2db      	uxtb	r3, r3
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d102      	bne.n	8003618 <HAL_RCC_OscConfig+0x4d8>
 8003612:	4b45      	ldr	r3, [pc, #276]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	e013      	b.n	8003640 <HAL_RCC_OscConfig+0x500>
 8003618:	2302      	movs	r3, #2
 800361a:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800362a:	2302      	movs	r3, #2
 800362c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003630:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800363c:	4b3a      	ldr	r3, [pc, #232]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 800363e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003640:	2202      	movs	r2, #2
 8003642:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003646:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800364a:	fa92 f2a2 	rbit	r2, r2
 800364e:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8003652:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003656:	fab2 f282 	clz	r2, r2
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	f042 0220 	orr.w	r2, r2, #32
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	f002 021f 	and.w	r2, r2, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f202 	lsl.w	r2, r1, r2
 800366c:	4013      	ands	r3, r2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d0af      	beq.n	80035d2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003672:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800367a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800367e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	21f8      	movs	r1, #248	@ 0xf8
 8003688:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003690:	fa91 f1a1 	rbit	r1, r1
 8003694:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003698:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800369c:	fab1 f181 	clz	r1, r1
 80036a0:	b2c9      	uxtb	r1, r1
 80036a2:	408b      	lsls	r3, r1
 80036a4:	4920      	ldr	r1, [pc, #128]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	600b      	str	r3, [r1, #0]
 80036aa:	e06c      	b.n	8003786 <HAL_RCC_OscConfig+0x646>
 80036ac:	2301      	movs	r3, #1
 80036ae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80036b6:	fa93 f3a3 	rbit	r3, r3
 80036ba:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80036be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036c2:	fab3 f383 	clz	r3, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	461a      	mov	r2, r3
 80036d4:	2300      	movs	r3, #0
 80036d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d8:	f7fd fb9c 	bl	8000e14 <HAL_GetTick>
 80036dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e2:	f7fd fb97 	bl	8000e14 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	f000 bd5a 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800370a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	095b      	lsrs	r3, r3, #5
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f043 0301 	orr.w	r3, r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d104      	bne.n	800372c <HAL_RCC_OscConfig+0x5ec>
 8003722:	4b01      	ldr	r3, [pc, #4]	@ (8003728 <HAL_RCC_OscConfig+0x5e8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	e015      	b.n	8003754 <HAL_RCC_OscConfig+0x614>
 8003728:	40021000 	.word	0x40021000
 800372c:	2302      	movs	r3, #2
 800372e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003736:	fa93 f3a3 	rbit	r3, r3
 800373a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800373e:	2302      	movs	r3, #2
 8003740:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003744:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003748:	fa93 f3a3 	rbit	r3, r3
 800374c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8003750:	4bc8      	ldr	r3, [pc, #800]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 8003752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003754:	2202      	movs	r2, #2
 8003756:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800375a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800375e:	fa92 f2a2 	rbit	r2, r2
 8003762:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003766:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800376a:	fab2 f282 	clz	r2, r2
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	f042 0220 	orr.w	r2, r2, #32
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	f002 021f 	and.w	r2, r2, #31
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f202 	lsl.w	r2, r1, r2
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ad      	bne.n	80036e2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003786:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800378a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8110 	beq.w	80039bc <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800379c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d079      	beq.n	80038a0 <HAL_RCC_OscConfig+0x760>
 80037ac:	2301      	movs	r3, #1
 80037ae:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80037b6:	fa93 f3a3 	rbit	r3, r3
 80037ba:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80037be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
 80037ca:	4bab      	ldr	r3, [pc, #684]	@ (8003a78 <HAL_RCC_OscConfig+0x938>)
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	461a      	mov	r2, r3
 80037d2:	2301      	movs	r3, #1
 80037d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d6:	f7fd fb1d 	bl	8000e14 <HAL_GetTick>
 80037da:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fd fb18 	bl	8000e14 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d902      	bls.n	80037f6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	f000 bcdb 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
 80037f6:	2302      	movs	r3, #2
 80037f8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003800:	fa93 f3a3 	rbit	r3, r3
 8003804:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003808:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800380c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003810:	2202      	movs	r2, #2
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003818:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fa93 f2a3 	rbit	r2, r3
 8003822:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003834:	2202      	movs	r2, #2
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	fa93 f2a3 	rbit	r2, r3
 8003846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800384e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003850:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 8003852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003854:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003858:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800385c:	2102      	movs	r1, #2
 800385e:	6019      	str	r1, [r3, #0]
 8003860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003864:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	fa93 f1a3 	rbit	r1, r3
 800386e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003872:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003876:	6019      	str	r1, [r3, #0]
  return result;
 8003878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fab3 f383 	clz	r3, r3
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2101      	movs	r1, #1
 8003894:	fa01 f303 	lsl.w	r3, r1, r3
 8003898:	4013      	ands	r3, r2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d0a0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x6a0>
 800389e:	e08d      	b.n	80039bc <HAL_RCC_OscConfig+0x87c>
 80038a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038a4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80038a8:	2201      	movs	r2, #1
 80038aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	fa93 f2a3 	rbit	r2, r3
 80038ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80038c2:	601a      	str	r2, [r3, #0]
  return result;
 80038c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80038cc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ce:	fab3 f383 	clz	r3, r3
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	4b68      	ldr	r3, [pc, #416]	@ (8003a78 <HAL_RCC_OscConfig+0x938>)
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	461a      	mov	r2, r3
 80038de:	2300      	movs	r3, #0
 80038e0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e2:	f7fd fa97 	bl	8000e14 <HAL_GetTick>
 80038e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fd fa92 	bl	8000e14 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d902      	bls.n	8003902 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038fc:	2303      	movs	r3, #3
 80038fe:	f000 bc55 	b.w	80041ac <HAL_RCC_OscConfig+0x106c>
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800390a:	2202      	movs	r2, #2
 800390c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003912:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f2a3 	rbit	r2, r3
 800391c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003920:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800392e:	2202      	movs	r2, #2
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003936:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	fa93 f2a3 	rbit	r2, r3
 8003940:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003944:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003952:	2202      	movs	r2, #2
 8003954:	601a      	str	r2, [r3, #0]
 8003956:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	fa93 f2a3 	rbit	r2, r3
 8003964:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003968:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800396c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396e:	4b41      	ldr	r3, [pc, #260]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 8003970:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003976:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800397a:	2102      	movs	r1, #2
 800397c:	6019      	str	r1, [r3, #0]
 800397e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003982:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	fa93 f1a3 	rbit	r1, r3
 800398c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003990:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003994:	6019      	str	r1, [r3, #0]
  return result;
 8003996:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800399a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	fab3 f383 	clz	r3, r3
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f303 	lsl.w	r3, r1, r3
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d197      	bne.n	80038ec <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 81a1 	beq.w	8003d14 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039d8:	4b26      	ldr	r3, [pc, #152]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 80039da:	69db      	ldr	r3, [r3, #28]
 80039dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d116      	bne.n	8003a12 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e4:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	4a22      	ldr	r2, [pc, #136]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ee:	61d3      	str	r3, [r2, #28]
 80039f0:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80039f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fc:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a06:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003a0a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a12:	4b1a      	ldr	r3, [pc, #104]	@ (8003a7c <HAL_RCC_OscConfig+0x93c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11a      	bne.n	8003a54 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a1e:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <HAL_RCC_OscConfig+0x93c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a16      	ldr	r2, [pc, #88]	@ (8003a7c <HAL_RCC_OscConfig+0x93c>)
 8003a24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a2a:	f7fd f9f3 	bl	8000e14 <HAL_GetTick>
 8003a2e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a32:	e009      	b.n	8003a48 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a34:	f7fd f9ee 	bl	8000e14 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b64      	cmp	r3, #100	@ 0x64
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e3b1      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <HAL_RCC_OscConfig+0x93c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d0ef      	beq.n	8003a34 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10d      	bne.n	8003a80 <HAL_RCC_OscConfig+0x940>
 8003a64:	4b03      	ldr	r3, [pc, #12]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4a02      	ldr	r2, [pc, #8]	@ (8003a74 <HAL_RCC_OscConfig+0x934>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6213      	str	r3, [r2, #32]
 8003a70:	e03c      	b.n	8003aec <HAL_RCC_OscConfig+0x9ac>
 8003a72:	bf00      	nop
 8003a74:	40021000 	.word	0x40021000
 8003a78:	10908120 	.word	0x10908120
 8003a7c:	40007000 	.word	0x40007000
 8003a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCC_OscConfig+0x96a>
 8003a90:	4bc1      	ldr	r3, [pc, #772]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	4ac0      	ldr	r2, [pc, #768]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6213      	str	r3, [r2, #32]
 8003a9c:	4bbe      	ldr	r3, [pc, #760]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	4abd      	ldr	r2, [pc, #756]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003aa2:	f023 0304 	bic.w	r3, r3, #4
 8003aa6:	6213      	str	r3, [r2, #32]
 8003aa8:	e020      	b.n	8003aec <HAL_RCC_OscConfig+0x9ac>
 8003aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x994>
 8003aba:	4bb7      	ldr	r3, [pc, #732]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4ab6      	ldr	r2, [pc, #728]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6213      	str	r3, [r2, #32]
 8003ac6:	4bb4      	ldr	r3, [pc, #720]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4ab3      	ldr	r2, [pc, #716]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6213      	str	r3, [r2, #32]
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x9ac>
 8003ad4:	4bb0      	ldr	r3, [pc, #704]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4aaf      	ldr	r2, [pc, #700]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6213      	str	r3, [r2, #32]
 8003ae0:	4bad      	ldr	r3, [pc, #692]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4aac      	ldr	r2, [pc, #688]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8081 	beq.w	8003c00 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003afe:	f7fd f989 	bl	8000e14 <HAL_GetTick>
 8003b02:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b06:	e00b      	b.n	8003b20 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b08:	f7fd f984 	bl	8000e14 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e345      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
 8003b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b24:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003b28:	2202      	movs	r2, #2
 8003b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b30:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	fa93 f2a3 	rbit	r2, r3
 8003b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b48:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b54:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b66:	601a      	str	r2, [r3, #0]
  return result;
 8003b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b70:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b72:	fab3 f383 	clz	r3, r3
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f043 0302 	orr.w	r3, r3, #2
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d102      	bne.n	8003b8c <HAL_RCC_OscConfig+0xa4c>
 8003b86:	4b84      	ldr	r3, [pc, #528]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	e013      	b.n	8003bb4 <HAL_RCC_OscConfig+0xa74>
 8003b8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b94:	2202      	movs	r2, #2
 8003b96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	fa93 f2a3 	rbit	r2, r3
 8003ba6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003baa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	4b79      	ldr	r3, [pc, #484]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bb8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	6011      	str	r1, [r2, #0]
 8003bc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bc4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003bc8:	6812      	ldr	r2, [r2, #0]
 8003bca:	fa92 f1a2 	rbit	r1, r2
 8003bce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bd2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bd6:	6011      	str	r1, [r2, #0]
  return result;
 8003bd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bdc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	fab2 f282 	clz	r2, r2
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	f002 021f 	and.w	r2, r2, #31
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d084      	beq.n	8003b08 <HAL_RCC_OscConfig+0x9c8>
 8003bfe:	e07f      	b.n	8003d00 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c00:	f7fd f908 	bl	8000e14 <HAL_GetTick>
 8003c04:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c08:	e00b      	b.n	8003c22 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0a:	f7fd f903 	bl	8000e14 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e2c4      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
 8003c22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c26:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c32:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	fa93 f2a3 	rbit	r2, r3
 8003c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c40:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c4e:	2202      	movs	r2, #2
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c56:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	fa93 f2a3 	rbit	r2, r3
 8003c60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c68:	601a      	str	r2, [r3, #0]
  return result;
 8003c6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c72:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c74:	fab3 f383 	clz	r3, r3
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	095b      	lsrs	r3, r3, #5
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	f043 0302 	orr.w	r3, r3, #2
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d102      	bne.n	8003c8e <HAL_RCC_OscConfig+0xb4e>
 8003c88:	4b43      	ldr	r3, [pc, #268]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	e013      	b.n	8003cb6 <HAL_RCC_OscConfig+0xb76>
 8003c8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c92:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c96:	2202      	movs	r2, #2
 8003c98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	fa93 f2a3 	rbit	r2, r3
 8003ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	4b39      	ldr	r3, [pc, #228]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cba:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	6011      	str	r1, [r2, #0]
 8003cc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cc6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	fa92 f1a2 	rbit	r1, r2
 8003cd0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cd4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003cd8:	6011      	str	r1, [r2, #0]
  return result;
 8003cda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cde:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ce2:	6812      	ldr	r2, [r2, #0]
 8003ce4:	fab2 f282 	clz	r2, r2
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f002 021f 	and.w	r2, r2, #31
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d184      	bne.n	8003c0a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d00:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b23      	ldr	r3, [pc, #140]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4a22      	ldr	r2, [pc, #136]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d12:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d18:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f000 8242 	beq.w	80041aa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d26:	4b1c      	ldr	r3, [pc, #112]	@ (8003d98 <HAL_RCC_OscConfig+0xc58>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	f000 8213 	beq.w	800415a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d38:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	f040 8162 	bne.w	800400a <HAL_RCC_OscConfig+0xeca>
 8003d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d4a:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d58:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	fa93 f2a3 	rbit	r2, r3
 8003d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d66:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d6a:	601a      	str	r2, [r3, #0]
  return result;
 8003d6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d70:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d74:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	461a      	mov	r2, r3
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f842 	bl	8000e14 <HAL_GetTick>
 8003d90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d94:	e00c      	b.n	8003db0 <HAL_RCC_OscConfig+0xc70>
 8003d96:	bf00      	nop
 8003d98:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9c:	f7fd f83a 	bl	8000e14 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1fd      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
 8003db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003db8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dc2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003dd4:	601a      	str	r2, [r3, #0]
  return result;
 8003dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dda:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003dde:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003de0:	fab3 f383 	clz	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f043 0301 	orr.w	r3, r3, #1
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d102      	bne.n	8003dfa <HAL_RCC_OscConfig+0xcba>
 8003df4:	4bb0      	ldr	r3, [pc, #704]	@ (80040b8 <HAL_RCC_OscConfig+0xf78>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	e027      	b.n	8003e4a <HAL_RCC_OscConfig+0xd0a>
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e24:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e32:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	fa93 f2a3 	rbit	r2, r3
 8003e3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	4b9c      	ldr	r3, [pc, #624]	@ (80040b8 <HAL_RCC_OscConfig+0xf78>)
 8003e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e4e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e52:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e56:	6011      	str	r1, [r2, #0]
 8003e58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e5c:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e60:	6812      	ldr	r2, [r2, #0]
 8003e62:	fa92 f1a2 	rbit	r1, r2
 8003e66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e6e:	6011      	str	r1, [r2, #0]
  return result;
 8003e70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e74:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	fab2 f282 	clz	r2, r2
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	f042 0220 	orr.w	r2, r2, #32
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	f002 021f 	and.w	r2, r2, #31
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d182      	bne.n	8003d9c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e96:	4b88      	ldr	r3, [pc, #544]	@ (80040b8 <HAL_RCC_OscConfig+0xf78>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ea2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	497f      	ldr	r1, [pc, #508]	@ (80040b8 <HAL_RCC_OscConfig+0xf78>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
 8003ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ec2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003ec6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ed0:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	fa93 f2a3 	rbit	r2, r3
 8003eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ede:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003ee2:	601a      	str	r2, [r3, #0]
  return result;
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003eec:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ef8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	461a      	mov	r2, r3
 8003f00:	2301      	movs	r3, #1
 8003f02:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f04:	f7fc ff86 	bl	8000e14 <HAL_GetTick>
 8003f08:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f0c:	e009      	b.n	8003f22 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fc ff81 	bl	8000e14 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e144      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
 8003f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f34:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f42:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f46:	601a      	str	r2, [r3, #0]
  return result;
 8003f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f50:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_RCC_OscConfig+0xe2c>
 8003f66:	4b54      	ldr	r3, [pc, #336]	@ (80040b8 <HAL_RCC_OscConfig+0xf78>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	e027      	b.n	8003fbc <HAL_RCC_OscConfig+0xe7c>
 8003f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f70:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	fa93 f2a3 	rbit	r2, r3
 8003f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f8c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f96:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fa4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	fa93 f2a3 	rbit	r2, r3
 8003fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fb2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80040b8 <HAL_RCC_OscConfig+0xf78>)
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fc0:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003fc4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003fc8:	6011      	str	r1, [r2, #0]
 8003fca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fce:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003fd2:	6812      	ldr	r2, [r2, #0]
 8003fd4:	fa92 f1a2 	rbit	r1, r2
 8003fd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fdc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fe0:	6011      	str	r1, [r2, #0]
  return result;
 8003fe2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fe6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	fab2 f282 	clz	r2, r2
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	f042 0220 	orr.w	r2, r2, #32
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	f002 021f 	and.w	r2, r2, #31
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	fa01 f202 	lsl.w	r2, r1, r2
 8004002:	4013      	ands	r3, r2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d082      	beq.n	8003f0e <HAL_RCC_OscConfig+0xdce>
 8004008:	e0cf      	b.n	80041aa <HAL_RCC_OscConfig+0x106a>
 800400a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800400e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004012:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004016:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004018:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800401c:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	fa93 f2a3 	rbit	r2, r3
 8004026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800402a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800402e:	601a      	str	r2, [r3, #0]
  return result;
 8004030:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004034:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004038:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800403a:	fab3 f383 	clz	r3, r3
 800403e:	b2db      	uxtb	r3, r3
 8004040:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004044:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	461a      	mov	r2, r3
 800404c:	2300      	movs	r3, #0
 800404e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004050:	f7fc fee0 	bl	8000e14 <HAL_GetTick>
 8004054:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004058:	e009      	b.n	800406e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800405a:	f7fc fedb 	bl	8000e14 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e09e      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
 800406e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004072:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004076:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800407a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004080:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004092:	601a      	str	r2, [r3, #0]
  return result;
 8004094:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004098:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800409c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800409e:	fab3 f383 	clz	r3, r3
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	095b      	lsrs	r3, r3, #5
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d104      	bne.n	80040bc <HAL_RCC_OscConfig+0xf7c>
 80040b2:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <HAL_RCC_OscConfig+0xf78>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	e029      	b.n	800410c <HAL_RCC_OscConfig+0xfcc>
 80040b8:	40021000 	.word	0x40021000
 80040bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c0:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ce:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	fa93 f2a3 	rbit	r2, r3
 80040d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040dc:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040e6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040f4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f2a3 	rbit	r2, r3
 80040fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004102:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	4b2b      	ldr	r3, [pc, #172]	@ (80041b8 <HAL_RCC_OscConfig+0x1078>)
 800410a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004110:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004114:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004118:	6011      	str	r1, [r2, #0]
 800411a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800411e:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	fa92 f1a2 	rbit	r1, r2
 8004128:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800412c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004130:	6011      	str	r1, [r2, #0]
  return result;
 8004132:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004136:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	fab2 f282 	clz	r2, r2
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	f042 0220 	orr.w	r2, r2, #32
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	f002 021f 	and.w	r2, r2, #31
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f202 	lsl.w	r2, r1, r2
 8004152:	4013      	ands	r3, r2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d180      	bne.n	800405a <HAL_RCC_OscConfig+0xf1a>
 8004158:	e027      	b.n	80041aa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800415a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800415e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e01e      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800416e:	4b12      	ldr	r3, [pc, #72]	@ (80041b8 <HAL_RCC_OscConfig+0x1078>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004176:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800417a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800417e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	429a      	cmp	r2, r3
 800418c:	d10b      	bne.n	80041a6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800418e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004192:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004196:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800419a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e000      	b.n	80041ac <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000

080041bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b09e      	sub	sp, #120	@ 0x78
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e162      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d4:	4b90      	ldr	r3, [pc, #576]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d910      	bls.n	8004204 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e2:	4b8d      	ldr	r3, [pc, #564]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 0207 	bic.w	r2, r3, #7
 80041ea:	498b      	ldr	r1, [pc, #556]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f2:	4b89      	ldr	r3, [pc, #548]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e14a      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004210:	4b82      	ldr	r3, [pc, #520]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	497f      	ldr	r1, [pc, #508]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 800421e:	4313      	orrs	r3, r2
 8004220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 80dc 	beq.w	80043e8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d13c      	bne.n	80042b2 <HAL_RCC_ClockConfig+0xf6>
 8004238:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800423c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800423e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004240:	fa93 f3a3 	rbit	r3, r3
 8004244:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004248:	fab3 f383 	clz	r3, r3
 800424c:	b2db      	uxtb	r3, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	b2db      	uxtb	r3, r3
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <HAL_RCC_ClockConfig+0xa6>
 800425c:	4b6f      	ldr	r3, [pc, #444]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	e00f      	b.n	8004282 <HAL_RCC_ClockConfig+0xc6>
 8004262:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004266:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800426a:	fa93 f3a3 	rbit	r3, r3
 800426e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004270:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004274:	663b      	str	r3, [r7, #96]	@ 0x60
 8004276:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004278:	fa93 f3a3 	rbit	r3, r3
 800427c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800427e:	4b67      	ldr	r3, [pc, #412]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 8004280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004282:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004286:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004288:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800428a:	fa92 f2a2 	rbit	r2, r2
 800428e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004290:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004292:	fab2 f282 	clz	r2, r2
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	f042 0220 	orr.w	r2, r2, #32
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	f002 021f 	and.w	r2, r2, #31
 80042a2:	2101      	movs	r1, #1
 80042a4:	fa01 f202 	lsl.w	r2, r1, r2
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d17b      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0f3      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d13c      	bne.n	8004334 <HAL_RCC_ClockConfig+0x178>
 80042ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042be:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80042c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	095b      	lsrs	r3, r3, #5
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d102      	bne.n	80042e4 <HAL_RCC_ClockConfig+0x128>
 80042de:	4b4f      	ldr	r3, [pc, #316]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	e00f      	b.n	8004304 <HAL_RCC_ClockConfig+0x148>
 80042e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ec:	fa93 f3a3 	rbit	r3, r3
 80042f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80042f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042fa:	fa93 f3a3 	rbit	r3, r3
 80042fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004300:	4b46      	ldr	r3, [pc, #280]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004308:	63ba      	str	r2, [r7, #56]	@ 0x38
 800430a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800430c:	fa92 f2a2 	rbit	r2, r2
 8004310:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004312:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004314:	fab2 f282 	clz	r2, r2
 8004318:	b2d2      	uxtb	r2, r2
 800431a:	f042 0220 	orr.w	r2, r2, #32
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	f002 021f 	and.w	r2, r2, #31
 8004324:	2101      	movs	r1, #1
 8004326:	fa01 f202 	lsl.w	r2, r1, r2
 800432a:	4013      	ands	r3, r2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d13a      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e0b2      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
 8004334:	2302      	movs	r3, #2
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	095b      	lsrs	r3, r3, #5
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b01      	cmp	r3, #1
 8004354:	d102      	bne.n	800435c <HAL_RCC_ClockConfig+0x1a0>
 8004356:	4b31      	ldr	r3, [pc, #196]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	e00d      	b.n	8004378 <HAL_RCC_ClockConfig+0x1bc>
 800435c:	2302      	movs	r3, #2
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004362:	fa93 f3a3 	rbit	r3, r3
 8004366:	627b      	str	r3, [r7, #36]	@ 0x24
 8004368:	2302      	movs	r3, #2
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	fa93 f3a3 	rbit	r3, r3
 8004372:	61fb      	str	r3, [r7, #28]
 8004374:	4b29      	ldr	r3, [pc, #164]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 8004376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004378:	2202      	movs	r2, #2
 800437a:	61ba      	str	r2, [r7, #24]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	fa92 f2a2 	rbit	r2, r2
 8004382:	617a      	str	r2, [r7, #20]
  return result;
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	fab2 f282 	clz	r2, r2
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	f042 0220 	orr.w	r2, r2, #32
 8004390:	b2d2      	uxtb	r2, r2
 8004392:	f002 021f 	and.w	r2, r2, #31
 8004396:	2101      	movs	r1, #1
 8004398:	fa01 f202 	lsl.w	r2, r1, r2
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e079      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043a6:	4b1d      	ldr	r3, [pc, #116]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f023 0203 	bic.w	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	491a      	ldr	r1, [pc, #104]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043b8:	f7fc fd2c 	bl	8000e14 <HAL_GetTick>
 80043bc:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	e00a      	b.n	80043d6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043c0:	f7fc fd28 	bl	8000e14 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e061      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	4b11      	ldr	r3, [pc, #68]	@ (800441c <HAL_RCC_ClockConfig+0x260>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f003 020c 	and.w	r2, r3, #12
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d1eb      	bne.n	80043c0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d214      	bcs.n	8004420 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043f6:	4b08      	ldr	r3, [pc, #32]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f023 0207 	bic.w	r2, r3, #7
 80043fe:	4906      	ldr	r1, [pc, #24]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	4313      	orrs	r3, r2
 8004404:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004406:	4b04      	ldr	r3, [pc, #16]	@ (8004418 <HAL_RCC_ClockConfig+0x25c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d005      	beq.n	8004420 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e040      	b.n	800449a <HAL_RCC_ClockConfig+0x2de>
 8004418:	40022000 	.word	0x40022000
 800441c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800442c:	4b1d      	ldr	r3, [pc, #116]	@ (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	491a      	ldr	r1, [pc, #104]	@ (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800443a:	4313      	orrs	r3, r2
 800443c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0308 	and.w	r3, r3, #8
 8004446:	2b00      	cmp	r3, #0
 8004448:	d009      	beq.n	800445e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444a:	4b16      	ldr	r3, [pc, #88]	@ (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4912      	ldr	r1, [pc, #72]	@ (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800445e:	f000 f829 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004462:	4601      	mov	r1, r0
 8004464:	4b0f      	ldr	r3, [pc, #60]	@ (80044a4 <HAL_RCC_ClockConfig+0x2e8>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800446c:	22f0      	movs	r2, #240	@ 0xf0
 800446e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	fa92 f2a2 	rbit	r2, r2
 8004476:	60fa      	str	r2, [r7, #12]
  return result;
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	fab2 f282 	clz	r2, r2
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	40d3      	lsrs	r3, r2
 8004482:	4a09      	ldr	r2, [pc, #36]	@ (80044a8 <HAL_RCC_ClockConfig+0x2ec>)
 8004484:	5cd3      	ldrb	r3, [r2, r3]
 8004486:	fa21 f303 	lsr.w	r3, r1, r3
 800448a:	4a08      	ldr	r2, [pc, #32]	@ (80044ac <HAL_RCC_ClockConfig+0x2f0>)
 800448c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800448e:	4b08      	ldr	r3, [pc, #32]	@ (80044b0 <HAL_RCC_ClockConfig+0x2f4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7fc fc7a 	bl	8000d8c <HAL_InitTick>
  
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3778      	adds	r7, #120	@ 0x78
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40021000 	.word	0x40021000
 80044a8:	08005ea0 	.word	0x08005ea0
 80044ac:	20000000 	.word	0x20000000
 80044b0:	20000004 	.word	0x20000004

080044b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044ba:	2300      	movs	r3, #0
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044ca:	2300      	movs	r3, #0
 80044cc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80044ce:	4b1e      	ldr	r3, [pc, #120]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x94>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d002      	beq.n	80044e4 <HAL_RCC_GetSysClockFreq+0x30>
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d003      	beq.n	80044ea <HAL_RCC_GetSysClockFreq+0x36>
 80044e2:	e026      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044e4:	4b19      	ldr	r3, [pc, #100]	@ (800454c <HAL_RCC_GetSysClockFreq+0x98>)
 80044e6:	613b      	str	r3, [r7, #16]
      break;
 80044e8:	e026      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	0c9b      	lsrs	r3, r3, #18
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	4a17      	ldr	r2, [pc, #92]	@ (8004550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80044f4:	5cd3      	ldrb	r3, [r2, r3]
 80044f6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80044f8:	4b13      	ldr	r3, [pc, #76]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x94>)
 80044fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fc:	f003 030f 	and.w	r3, r3, #15
 8004500:	4a14      	ldr	r2, [pc, #80]	@ (8004554 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004502:	5cd3      	ldrb	r3, [r2, r3]
 8004504:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004510:	4a0e      	ldr	r2, [pc, #56]	@ (800454c <HAL_RCC_GetSysClockFreq+0x98>)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	fbb2 f2f3 	udiv	r2, r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e004      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a0c      	ldr	r2, [pc, #48]	@ (8004558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	613b      	str	r3, [r7, #16]
      break;
 8004530:	e002      	b.n	8004538 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004532:	4b06      	ldr	r3, [pc, #24]	@ (800454c <HAL_RCC_GetSysClockFreq+0x98>)
 8004534:	613b      	str	r3, [r7, #16]
      break;
 8004536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004538:	693b      	ldr	r3, [r7, #16]
}
 800453a:	4618      	mov	r0, r3
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000
 800454c:	007a1200 	.word	0x007a1200
 8004550:	08005eb8 	.word	0x08005eb8
 8004554:	08005ec8 	.word	0x08005ec8
 8004558:	003d0900 	.word	0x003d0900

0800455c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004560:	4b03      	ldr	r3, [pc, #12]	@ (8004570 <HAL_RCC_GetHCLKFreq+0x14>)
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20000000 	.word	0x20000000

08004574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800457a:	f7ff ffef 	bl	800455c <HAL_RCC_GetHCLKFreq>
 800457e:	4601      	mov	r1, r0
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004588:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800458c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	fa92 f2a2 	rbit	r2, r2
 8004594:	603a      	str	r2, [r7, #0]
  return result;
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	fab2 f282 	clz	r2, r2
 800459c:	b2d2      	uxtb	r2, r2
 800459e:	40d3      	lsrs	r3, r2
 80045a0:	4a04      	ldr	r2, [pc, #16]	@ (80045b4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80045a8:	4618      	mov	r0, r3
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000
 80045b4:	08005eb0 	.word	0x08005eb0

080045b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80045be:	f7ff ffcd 	bl	800455c <HAL_RCC_GetHCLKFreq>
 80045c2:	4601      	mov	r1, r0
 80045c4:	4b0b      	ldr	r3, [pc, #44]	@ (80045f4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80045cc:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80045d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	fa92 f2a2 	rbit	r2, r2
 80045d8:	603a      	str	r2, [r7, #0]
  return result;
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	fab2 f282 	clz	r2, r2
 80045e0:	b2d2      	uxtb	r2, r2
 80045e2:	40d3      	lsrs	r3, r2
 80045e4:	4a04      	ldr	r2, [pc, #16]	@ (80045f8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045e6:	5cd3      	ldrb	r3, [r2, r3]
 80045e8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	08005eb0 	.word	0x08005eb0

080045fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e040      	b.n	8004690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fc fa52 	bl	8000ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2224      	movs	r2, #36	@ 0x24
 8004628:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f9e8 	bl	8004a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 f8af 	bl	80047ac <UART_SetConfig>
 800464e:	4603      	mov	r3, r0
 8004650:	2b01      	cmp	r3, #1
 8004652:	d101      	bne.n	8004658 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e01b      	b.n	8004690 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685a      	ldr	r2, [r3, #4]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689a      	ldr	r2, [r3, #8]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0201 	orr.w	r2, r2, #1
 8004686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 fa67 	bl	8004b5c <UART_CheckIdleState>
 800468e:	4603      	mov	r3, r0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08a      	sub	sp, #40	@ 0x28
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	603b      	str	r3, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ac:	2b20      	cmp	r3, #32
 80046ae:	d177      	bne.n	80047a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <HAL_UART_Transmit+0x24>
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e070      	b.n	80047a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2221      	movs	r2, #33	@ 0x21
 80046cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ce:	f7fc fba1 	bl	8000e14 <HAL_GetTick>
 80046d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	88fa      	ldrh	r2, [r7, #6]
 80046e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ec:	d108      	bne.n	8004700 <HAL_UART_Transmit+0x68>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d104      	bne.n	8004700 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	e003      	b.n	8004708 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004708:	e02f      	b.n	800476a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2180      	movs	r1, #128	@ 0x80
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 fac9 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d004      	beq.n	800472a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e03b      	b.n	80047a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	881a      	ldrh	r2, [r3, #0]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800473c:	b292      	uxth	r2, r2
 800473e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	3302      	adds	r3, #2
 8004744:	61bb      	str	r3, [r7, #24]
 8004746:	e007      	b.n	8004758 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1c9      	bne.n	800470a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	2140      	movs	r1, #64	@ 0x40
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 fa93 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d004      	beq.n	8004796 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e005      	b.n	80047a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2220      	movs	r2, #32
 800479a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	4b8a      	ldr	r3, [pc, #552]	@ (8004a00 <UART_SetConfig+0x254>)
 80047d8:	4013      	ands	r3, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	6979      	ldr	r1, [r7, #20]
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	430a      	orrs	r2, r1
 80047f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	430a      	orrs	r2, r1
 800481c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a78      	ldr	r2, [pc, #480]	@ (8004a04 <UART_SetConfig+0x258>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d120      	bne.n	800486a <UART_SetConfig+0xbe>
 8004828:	4b77      	ldr	r3, [pc, #476]	@ (8004a08 <UART_SetConfig+0x25c>)
 800482a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	2b03      	cmp	r3, #3
 8004832:	d817      	bhi.n	8004864 <UART_SetConfig+0xb8>
 8004834:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <UART_SetConfig+0x90>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	0800484d 	.word	0x0800484d
 8004840:	08004859 	.word	0x08004859
 8004844:	0800485f 	.word	0x0800485f
 8004848:	08004853 	.word	0x08004853
 800484c:	2300      	movs	r3, #0
 800484e:	77fb      	strb	r3, [r7, #31]
 8004850:	e01d      	b.n	800488e <UART_SetConfig+0xe2>
 8004852:	2302      	movs	r3, #2
 8004854:	77fb      	strb	r3, [r7, #31]
 8004856:	e01a      	b.n	800488e <UART_SetConfig+0xe2>
 8004858:	2304      	movs	r3, #4
 800485a:	77fb      	strb	r3, [r7, #31]
 800485c:	e017      	b.n	800488e <UART_SetConfig+0xe2>
 800485e:	2308      	movs	r3, #8
 8004860:	77fb      	strb	r3, [r7, #31]
 8004862:	e014      	b.n	800488e <UART_SetConfig+0xe2>
 8004864:	2310      	movs	r3, #16
 8004866:	77fb      	strb	r3, [r7, #31]
 8004868:	e011      	b.n	800488e <UART_SetConfig+0xe2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a67      	ldr	r2, [pc, #412]	@ (8004a0c <UART_SetConfig+0x260>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d102      	bne.n	800487a <UART_SetConfig+0xce>
 8004874:	2300      	movs	r3, #0
 8004876:	77fb      	strb	r3, [r7, #31]
 8004878:	e009      	b.n	800488e <UART_SetConfig+0xe2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a64      	ldr	r2, [pc, #400]	@ (8004a10 <UART_SetConfig+0x264>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d102      	bne.n	800488a <UART_SetConfig+0xde>
 8004884:	2300      	movs	r3, #0
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e001      	b.n	800488e <UART_SetConfig+0xe2>
 800488a:	2310      	movs	r3, #16
 800488c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004896:	d15a      	bne.n	800494e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004898:	7ffb      	ldrb	r3, [r7, #31]
 800489a:	2b08      	cmp	r3, #8
 800489c:	d827      	bhi.n	80048ee <UART_SetConfig+0x142>
 800489e:	a201      	add	r2, pc, #4	@ (adr r2, 80048a4 <UART_SetConfig+0xf8>)
 80048a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a4:	080048c9 	.word	0x080048c9
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d9 	.word	0x080048d9
 80048b0:	080048ef 	.word	0x080048ef
 80048b4:	080048df 	.word	0x080048df
 80048b8:	080048ef 	.word	0x080048ef
 80048bc:	080048ef 	.word	0x080048ef
 80048c0:	080048ef 	.word	0x080048ef
 80048c4:	080048e7 	.word	0x080048e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c8:	f7ff fe54 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 80048cc:	61b8      	str	r0, [r7, #24]
        break;
 80048ce:	e013      	b.n	80048f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d0:	f7ff fe72 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 80048d4:	61b8      	str	r0, [r7, #24]
        break;
 80048d6:	e00f      	b.n	80048f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d8:	4b4e      	ldr	r3, [pc, #312]	@ (8004a14 <UART_SetConfig+0x268>)
 80048da:	61bb      	str	r3, [r7, #24]
        break;
 80048dc:	e00c      	b.n	80048f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048de:	f7ff fde9 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 80048e2:	61b8      	str	r0, [r7, #24]
        break;
 80048e4:	e008      	b.n	80048f8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048ea:	61bb      	str	r3, [r7, #24]
        break;
 80048ec:	e004      	b.n	80048f8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80048ee:	2300      	movs	r3, #0
 80048f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	77bb      	strb	r3, [r7, #30]
        break;
 80048f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d074      	beq.n	80049e8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	005a      	lsls	r2, r3, #1
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	441a      	add	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004912:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b0f      	cmp	r3, #15
 8004918:	d916      	bls.n	8004948 <UART_SetConfig+0x19c>
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004920:	d212      	bcs.n	8004948 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	b29b      	uxth	r3, r3
 8004926:	f023 030f 	bic.w	r3, r3, #15
 800492a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	085b      	lsrs	r3, r3, #1
 8004930:	b29b      	uxth	r3, r3
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	b29a      	uxth	r2, r3
 8004938:	89fb      	ldrh	r3, [r7, #14]
 800493a:	4313      	orrs	r3, r2
 800493c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	89fa      	ldrh	r2, [r7, #14]
 8004944:	60da      	str	r2, [r3, #12]
 8004946:	e04f      	b.n	80049e8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	77bb      	strb	r3, [r7, #30]
 800494c:	e04c      	b.n	80049e8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494e:	7ffb      	ldrb	r3, [r7, #31]
 8004950:	2b08      	cmp	r3, #8
 8004952:	d828      	bhi.n	80049a6 <UART_SetConfig+0x1fa>
 8004954:	a201      	add	r2, pc, #4	@ (adr r2, 800495c <UART_SetConfig+0x1b0>)
 8004956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800495a:	bf00      	nop
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	080049a7 	.word	0x080049a7
 800496c:	08004997 	.word	0x08004997
 8004970:	080049a7 	.word	0x080049a7
 8004974:	080049a7 	.word	0x080049a7
 8004978:	080049a7 	.word	0x080049a7
 800497c:	0800499f 	.word	0x0800499f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004980:	f7ff fdf8 	bl	8004574 <HAL_RCC_GetPCLK1Freq>
 8004984:	61b8      	str	r0, [r7, #24]
        break;
 8004986:	e013      	b.n	80049b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7ff fe16 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 800498c:	61b8      	str	r0, [r7, #24]
        break;
 800498e:	e00f      	b.n	80049b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004990:	4b20      	ldr	r3, [pc, #128]	@ (8004a14 <UART_SetConfig+0x268>)
 8004992:	61bb      	str	r3, [r7, #24]
        break;
 8004994:	e00c      	b.n	80049b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004996:	f7ff fd8d 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 800499a:	61b8      	str	r0, [r7, #24]
        break;
 800499c:	e008      	b.n	80049b0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049a2:	61bb      	str	r3, [r7, #24]
        break;
 80049a4:	e004      	b.n	80049b0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	77bb      	strb	r3, [r7, #30]
        break;
 80049ae:	bf00      	nop
    }

    if (pclk != 0U)
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d018      	beq.n	80049e8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	085a      	lsrs	r2, r3, #1
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	441a      	add	r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b0f      	cmp	r3, #15
 80049ce:	d909      	bls.n	80049e4 <UART_SetConfig+0x238>
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d6:	d205      	bcs.n	80049e4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	b29a      	uxth	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60da      	str	r2, [r3, #12]
 80049e2:	e001      	b.n	80049e8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049f4:	7fbb      	ldrb	r3, [r7, #30]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	efff69f3 	.word	0xefff69f3
 8004a04:	40013800 	.word	0x40013800
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40004400 	.word	0x40004400
 8004a10:	40004800 	.word	0x40004800
 8004a14:	007a1200 	.word	0x007a1200

08004a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	f003 0308 	and.w	r3, r3, #8
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00a      	beq.n	8004a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00a      	beq.n	8004a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	f003 0302 	and.w	r3, r3, #2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	430a      	orrs	r2, r1
 8004a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a8a:	f003 0304 	and.w	r3, r3, #4
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ace:	f003 0320 	and.w	r3, r3, #32
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b16:	d10a      	bne.n	8004b2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b098      	sub	sp, #96	@ 0x60
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b6c:	f7fc f952 	bl	8000e14 <HAL_GetTick>
 8004b70:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d12e      	bne.n	8004bde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b80:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f88c 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d021      	beq.n	8004bde <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004baa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e6      	bne.n	8004b9a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e062      	b.n	8004ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0304 	and.w	r3, r3, #4
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d149      	bne.n	8004c80 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bf0:	9300      	str	r3, [sp, #0]
 8004bf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f856 	bl	8004cac <UART_WaitOnFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d03c      	beq.n	8004c80 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	623b      	str	r3, [r7, #32]
   return(result);
 8004c14:	6a3b      	ldr	r3, [r7, #32]
 8004c16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	461a      	mov	r2, r3
 8004c22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c24:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c26:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e6      	bne.n	8004c06 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0301 	bic.w	r3, r3, #1
 8004c4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3308      	adds	r3, #8
 8004c56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c58:	61fa      	str	r2, [r7, #28]
 8004c5a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	69b9      	ldr	r1, [r7, #24]
 8004c5e:	69fa      	ldr	r2, [r7, #28]
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	617b      	str	r3, [r7, #20]
   return(result);
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e5      	bne.n	8004c38 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2220      	movs	r2, #32
 8004c70:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e011      	b.n	8004ca4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3758      	adds	r7, #88	@ 0x58
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	603b      	str	r3, [r7, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cbc:	e04f      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d04b      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cc6:	f7fc f8a5 	bl	8000e14 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d302      	bcc.n	8004cdc <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e04e      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0304 	and.w	r3, r3, #4
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d037      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b80      	cmp	r3, #128	@ 0x80
 8004cf2:	d034      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b40      	cmp	r3, #64	@ 0x40
 8004cf8:	d031      	beq.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69db      	ldr	r3, [r3, #28]
 8004d00:	f003 0308 	and.w	r3, r3, #8
 8004d04:	2b08      	cmp	r3, #8
 8004d06:	d110      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f838 	bl	8004d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2208      	movs	r2, #8
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e029      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d38:	d111      	bne.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f81e 	bl	8004d86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e00f      	b.n	8004d7e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	4013      	ands	r3, r2
 8004d68:	68ba      	ldr	r2, [r7, #8]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	461a      	mov	r2, r3
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d0a0      	beq.n	8004cbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3710      	adds	r7, #16
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b095      	sub	sp, #84	@ 0x54
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	461a      	mov	r2, r3
 8004daa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dac:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e6      	bne.n	8004d8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f023 0301 	bic.w	r3, r3, #1
 8004dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d118      	bne.n	8004e2e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	e853 3f00 	ldrex	r3, [r3]
 8004e08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f023 0310 	bic.w	r3, r3, #16
 8004e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1e:	6979      	ldr	r1, [r7, #20]
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	e841 2300 	strex	r3, r2, [r1]
 8004e26:	613b      	str	r3, [r7, #16]
   return(result);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d1e6      	bne.n	8004dfc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2220      	movs	r2, #32
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e42:	bf00      	nop
 8004e44:	3754      	adds	r7, #84	@ 0x54
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <std>:
 8004e50:	2300      	movs	r3, #0
 8004e52:	b510      	push	{r4, lr}
 8004e54:	4604      	mov	r4, r0
 8004e56:	e9c0 3300 	strd	r3, r3, [r0]
 8004e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e5e:	6083      	str	r3, [r0, #8]
 8004e60:	8181      	strh	r1, [r0, #12]
 8004e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e64:	81c2      	strh	r2, [r0, #14]
 8004e66:	6183      	str	r3, [r0, #24]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	305c      	adds	r0, #92	@ 0x5c
 8004e6e:	f000 f9c2 	bl	80051f6 <memset>
 8004e72:	4b0d      	ldr	r3, [pc, #52]	@ (8004ea8 <std+0x58>)
 8004e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e76:	4b0d      	ldr	r3, [pc, #52]	@ (8004eac <std+0x5c>)
 8004e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <std+0x60>)
 8004e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb4 <std+0x64>)
 8004e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <std+0x68>)
 8004e84:	6224      	str	r4, [r4, #32]
 8004e86:	429c      	cmp	r4, r3
 8004e88:	d006      	beq.n	8004e98 <std+0x48>
 8004e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e8e:	4294      	cmp	r4, r2
 8004e90:	d002      	beq.n	8004e98 <std+0x48>
 8004e92:	33d0      	adds	r3, #208	@ 0xd0
 8004e94:	429c      	cmp	r4, r3
 8004e96:	d105      	bne.n	8004ea4 <std+0x54>
 8004e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ea0:	f000 ba22 	b.w	80052e8 <__retarget_lock_init_recursive>
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	bf00      	nop
 8004ea8:	08005171 	.word	0x08005171
 8004eac:	08005193 	.word	0x08005193
 8004eb0:	080051cb 	.word	0x080051cb
 8004eb4:	080051ef 	.word	0x080051ef
 8004eb8:	2000023c 	.word	0x2000023c

08004ebc <stdio_exit_handler>:
 8004ebc:	4a02      	ldr	r2, [pc, #8]	@ (8004ec8 <stdio_exit_handler+0xc>)
 8004ebe:	4903      	ldr	r1, [pc, #12]	@ (8004ecc <stdio_exit_handler+0x10>)
 8004ec0:	4803      	ldr	r0, [pc, #12]	@ (8004ed0 <stdio_exit_handler+0x14>)
 8004ec2:	f000 b869 	b.w	8004f98 <_fwalk_sglue>
 8004ec6:	bf00      	nop
 8004ec8:	2000000c 	.word	0x2000000c
 8004ecc:	08005b99 	.word	0x08005b99
 8004ed0:	2000001c 	.word	0x2000001c

08004ed4 <cleanup_stdio>:
 8004ed4:	6841      	ldr	r1, [r0, #4]
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <cleanup_stdio+0x34>)
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	b510      	push	{r4, lr}
 8004edc:	4604      	mov	r4, r0
 8004ede:	d001      	beq.n	8004ee4 <cleanup_stdio+0x10>
 8004ee0:	f000 fe5a 	bl	8005b98 <_fflush_r>
 8004ee4:	68a1      	ldr	r1, [r4, #8]
 8004ee6:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <cleanup_stdio+0x38>)
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	d002      	beq.n	8004ef2 <cleanup_stdio+0x1e>
 8004eec:	4620      	mov	r0, r4
 8004eee:	f000 fe53 	bl	8005b98 <_fflush_r>
 8004ef2:	68e1      	ldr	r1, [r4, #12]
 8004ef4:	4b06      	ldr	r3, [pc, #24]	@ (8004f10 <cleanup_stdio+0x3c>)
 8004ef6:	4299      	cmp	r1, r3
 8004ef8:	d004      	beq.n	8004f04 <cleanup_stdio+0x30>
 8004efa:	4620      	mov	r0, r4
 8004efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f00:	f000 be4a 	b.w	8005b98 <_fflush_r>
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	bf00      	nop
 8004f08:	2000023c 	.word	0x2000023c
 8004f0c:	200002a4 	.word	0x200002a4
 8004f10:	2000030c 	.word	0x2000030c

08004f14 <global_stdio_init.part.0>:
 8004f14:	b510      	push	{r4, lr}
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <global_stdio_init.part.0+0x30>)
 8004f18:	4c0b      	ldr	r4, [pc, #44]	@ (8004f48 <global_stdio_init.part.0+0x34>)
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f4c <global_stdio_init.part.0+0x38>)
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	4620      	mov	r0, r4
 8004f20:	2200      	movs	r2, #0
 8004f22:	2104      	movs	r1, #4
 8004f24:	f7ff ff94 	bl	8004e50 <std>
 8004f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	2109      	movs	r1, #9
 8004f30:	f7ff ff8e 	bl	8004e50 <std>
 8004f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f38:	2202      	movs	r2, #2
 8004f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f3e:	2112      	movs	r1, #18
 8004f40:	f7ff bf86 	b.w	8004e50 <std>
 8004f44:	20000374 	.word	0x20000374
 8004f48:	2000023c 	.word	0x2000023c
 8004f4c:	08004ebd 	.word	0x08004ebd

08004f50 <__sfp_lock_acquire>:
 8004f50:	4801      	ldr	r0, [pc, #4]	@ (8004f58 <__sfp_lock_acquire+0x8>)
 8004f52:	f000 b9ca 	b.w	80052ea <__retarget_lock_acquire_recursive>
 8004f56:	bf00      	nop
 8004f58:	2000037d 	.word	0x2000037d

08004f5c <__sfp_lock_release>:
 8004f5c:	4801      	ldr	r0, [pc, #4]	@ (8004f64 <__sfp_lock_release+0x8>)
 8004f5e:	f000 b9c5 	b.w	80052ec <__retarget_lock_release_recursive>
 8004f62:	bf00      	nop
 8004f64:	2000037d 	.word	0x2000037d

08004f68 <__sinit>:
 8004f68:	b510      	push	{r4, lr}
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	f7ff fff0 	bl	8004f50 <__sfp_lock_acquire>
 8004f70:	6a23      	ldr	r3, [r4, #32]
 8004f72:	b11b      	cbz	r3, 8004f7c <__sinit+0x14>
 8004f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f78:	f7ff bff0 	b.w	8004f5c <__sfp_lock_release>
 8004f7c:	4b04      	ldr	r3, [pc, #16]	@ (8004f90 <__sinit+0x28>)
 8004f7e:	6223      	str	r3, [r4, #32]
 8004f80:	4b04      	ldr	r3, [pc, #16]	@ (8004f94 <__sinit+0x2c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f5      	bne.n	8004f74 <__sinit+0xc>
 8004f88:	f7ff ffc4 	bl	8004f14 <global_stdio_init.part.0>
 8004f8c:	e7f2      	b.n	8004f74 <__sinit+0xc>
 8004f8e:	bf00      	nop
 8004f90:	08004ed5 	.word	0x08004ed5
 8004f94:	20000374 	.word	0x20000374

08004f98 <_fwalk_sglue>:
 8004f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f9c:	4607      	mov	r7, r0
 8004f9e:	4688      	mov	r8, r1
 8004fa0:	4614      	mov	r4, r2
 8004fa2:	2600      	movs	r6, #0
 8004fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8004fac:	d505      	bpl.n	8004fba <_fwalk_sglue+0x22>
 8004fae:	6824      	ldr	r4, [r4, #0]
 8004fb0:	2c00      	cmp	r4, #0
 8004fb2:	d1f7      	bne.n	8004fa4 <_fwalk_sglue+0xc>
 8004fb4:	4630      	mov	r0, r6
 8004fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d907      	bls.n	8004fd0 <_fwalk_sglue+0x38>
 8004fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	d003      	beq.n	8004fd0 <_fwalk_sglue+0x38>
 8004fc8:	4629      	mov	r1, r5
 8004fca:	4638      	mov	r0, r7
 8004fcc:	47c0      	blx	r8
 8004fce:	4306      	orrs	r6, r0
 8004fd0:	3568      	adds	r5, #104	@ 0x68
 8004fd2:	e7e9      	b.n	8004fa8 <_fwalk_sglue+0x10>

08004fd4 <iprintf>:
 8004fd4:	b40f      	push	{r0, r1, r2, r3}
 8004fd6:	b507      	push	{r0, r1, r2, lr}
 8004fd8:	4906      	ldr	r1, [pc, #24]	@ (8004ff4 <iprintf+0x20>)
 8004fda:	ab04      	add	r3, sp, #16
 8004fdc:	6808      	ldr	r0, [r1, #0]
 8004fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fe2:	6881      	ldr	r1, [r0, #8]
 8004fe4:	9301      	str	r3, [sp, #4]
 8004fe6:	f000 faad 	bl	8005544 <_vfiprintf_r>
 8004fea:	b003      	add	sp, #12
 8004fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff0:	b004      	add	sp, #16
 8004ff2:	4770      	bx	lr
 8004ff4:	20000018 	.word	0x20000018

08004ff8 <setbuf>:
 8004ff8:	fab1 f281 	clz	r2, r1
 8004ffc:	0952      	lsrs	r2, r2, #5
 8004ffe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005002:	0052      	lsls	r2, r2, #1
 8005004:	f000 b800 	b.w	8005008 <setvbuf>

08005008 <setvbuf>:
 8005008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800500c:	461d      	mov	r5, r3
 800500e:	4b57      	ldr	r3, [pc, #348]	@ (800516c <setvbuf+0x164>)
 8005010:	681f      	ldr	r7, [r3, #0]
 8005012:	4604      	mov	r4, r0
 8005014:	460e      	mov	r6, r1
 8005016:	4690      	mov	r8, r2
 8005018:	b127      	cbz	r7, 8005024 <setvbuf+0x1c>
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	b913      	cbnz	r3, 8005024 <setvbuf+0x1c>
 800501e:	4638      	mov	r0, r7
 8005020:	f7ff ffa2 	bl	8004f68 <__sinit>
 8005024:	f1b8 0f02 	cmp.w	r8, #2
 8005028:	d006      	beq.n	8005038 <setvbuf+0x30>
 800502a:	f1b8 0f01 	cmp.w	r8, #1
 800502e:	f200 809a 	bhi.w	8005166 <setvbuf+0x15e>
 8005032:	2d00      	cmp	r5, #0
 8005034:	f2c0 8097 	blt.w	8005166 <setvbuf+0x15e>
 8005038:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800503a:	07d9      	lsls	r1, r3, #31
 800503c:	d405      	bmi.n	800504a <setvbuf+0x42>
 800503e:	89a3      	ldrh	r3, [r4, #12]
 8005040:	059a      	lsls	r2, r3, #22
 8005042:	d402      	bmi.n	800504a <setvbuf+0x42>
 8005044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005046:	f000 f950 	bl	80052ea <__retarget_lock_acquire_recursive>
 800504a:	4621      	mov	r1, r4
 800504c:	4638      	mov	r0, r7
 800504e:	f000 fda3 	bl	8005b98 <_fflush_r>
 8005052:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005054:	b141      	cbz	r1, 8005068 <setvbuf+0x60>
 8005056:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800505a:	4299      	cmp	r1, r3
 800505c:	d002      	beq.n	8005064 <setvbuf+0x5c>
 800505e:	4638      	mov	r0, r7
 8005060:	f000 f946 	bl	80052f0 <_free_r>
 8005064:	2300      	movs	r3, #0
 8005066:	6363      	str	r3, [r4, #52]	@ 0x34
 8005068:	2300      	movs	r3, #0
 800506a:	61a3      	str	r3, [r4, #24]
 800506c:	6063      	str	r3, [r4, #4]
 800506e:	89a3      	ldrh	r3, [r4, #12]
 8005070:	061b      	lsls	r3, r3, #24
 8005072:	d503      	bpl.n	800507c <setvbuf+0x74>
 8005074:	6921      	ldr	r1, [r4, #16]
 8005076:	4638      	mov	r0, r7
 8005078:	f000 f93a 	bl	80052f0 <_free_r>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	f1b8 0f02 	cmp.w	r8, #2
 800508a:	81a3      	strh	r3, [r4, #12]
 800508c:	d061      	beq.n	8005152 <setvbuf+0x14a>
 800508e:	ab01      	add	r3, sp, #4
 8005090:	466a      	mov	r2, sp
 8005092:	4621      	mov	r1, r4
 8005094:	4638      	mov	r0, r7
 8005096:	f000 fda7 	bl	8005be8 <__swhatbuf_r>
 800509a:	89a3      	ldrh	r3, [r4, #12]
 800509c:	4318      	orrs	r0, r3
 800509e:	81a0      	strh	r0, [r4, #12]
 80050a0:	bb2d      	cbnz	r5, 80050ee <setvbuf+0xe6>
 80050a2:	9d00      	ldr	r5, [sp, #0]
 80050a4:	4628      	mov	r0, r5
 80050a6:	f000 f96d 	bl	8005384 <malloc>
 80050aa:	4606      	mov	r6, r0
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d152      	bne.n	8005156 <setvbuf+0x14e>
 80050b0:	f8dd 9000 	ldr.w	r9, [sp]
 80050b4:	45a9      	cmp	r9, r5
 80050b6:	d140      	bne.n	800513a <setvbuf+0x132>
 80050b8:	f04f 35ff 	mov.w	r5, #4294967295
 80050bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050c0:	f043 0202 	orr.w	r2, r3, #2
 80050c4:	81a2      	strh	r2, [r4, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	60a2      	str	r2, [r4, #8]
 80050ca:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80050ce:	6022      	str	r2, [r4, #0]
 80050d0:	6122      	str	r2, [r4, #16]
 80050d2:	2201      	movs	r2, #1
 80050d4:	6162      	str	r2, [r4, #20]
 80050d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050d8:	07d6      	lsls	r6, r2, #31
 80050da:	d404      	bmi.n	80050e6 <setvbuf+0xde>
 80050dc:	0598      	lsls	r0, r3, #22
 80050de:	d402      	bmi.n	80050e6 <setvbuf+0xde>
 80050e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050e2:	f000 f903 	bl	80052ec <__retarget_lock_release_recursive>
 80050e6:	4628      	mov	r0, r5
 80050e8:	b003      	add	sp, #12
 80050ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	d0d8      	beq.n	80050a4 <setvbuf+0x9c>
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	b913      	cbnz	r3, 80050fc <setvbuf+0xf4>
 80050f6:	4638      	mov	r0, r7
 80050f8:	f7ff ff36 	bl	8004f68 <__sinit>
 80050fc:	f1b8 0f01 	cmp.w	r8, #1
 8005100:	bf08      	it	eq
 8005102:	89a3      	ldrheq	r3, [r4, #12]
 8005104:	6026      	str	r6, [r4, #0]
 8005106:	bf04      	itt	eq
 8005108:	f043 0301 	orreq.w	r3, r3, #1
 800510c:	81a3      	strheq	r3, [r4, #12]
 800510e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005112:	f013 0208 	ands.w	r2, r3, #8
 8005116:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800511a:	d01e      	beq.n	800515a <setvbuf+0x152>
 800511c:	07d9      	lsls	r1, r3, #31
 800511e:	bf41      	itttt	mi
 8005120:	2200      	movmi	r2, #0
 8005122:	426d      	negmi	r5, r5
 8005124:	60a2      	strmi	r2, [r4, #8]
 8005126:	61a5      	strmi	r5, [r4, #24]
 8005128:	bf58      	it	pl
 800512a:	60a5      	strpl	r5, [r4, #8]
 800512c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800512e:	07d2      	lsls	r2, r2, #31
 8005130:	d401      	bmi.n	8005136 <setvbuf+0x12e>
 8005132:	059b      	lsls	r3, r3, #22
 8005134:	d513      	bpl.n	800515e <setvbuf+0x156>
 8005136:	2500      	movs	r5, #0
 8005138:	e7d5      	b.n	80050e6 <setvbuf+0xde>
 800513a:	4648      	mov	r0, r9
 800513c:	f000 f922 	bl	8005384 <malloc>
 8005140:	4606      	mov	r6, r0
 8005142:	2800      	cmp	r0, #0
 8005144:	d0b8      	beq.n	80050b8 <setvbuf+0xb0>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	464d      	mov	r5, r9
 8005150:	e7cf      	b.n	80050f2 <setvbuf+0xea>
 8005152:	2500      	movs	r5, #0
 8005154:	e7b2      	b.n	80050bc <setvbuf+0xb4>
 8005156:	46a9      	mov	r9, r5
 8005158:	e7f5      	b.n	8005146 <setvbuf+0x13e>
 800515a:	60a2      	str	r2, [r4, #8]
 800515c:	e7e6      	b.n	800512c <setvbuf+0x124>
 800515e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005160:	f000 f8c4 	bl	80052ec <__retarget_lock_release_recursive>
 8005164:	e7e7      	b.n	8005136 <setvbuf+0x12e>
 8005166:	f04f 35ff 	mov.w	r5, #4294967295
 800516a:	e7bc      	b.n	80050e6 <setvbuf+0xde>
 800516c:	20000018 	.word	0x20000018

08005170 <__sread>:
 8005170:	b510      	push	{r4, lr}
 8005172:	460c      	mov	r4, r1
 8005174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005178:	f000 f868 	bl	800524c <_read_r>
 800517c:	2800      	cmp	r0, #0
 800517e:	bfab      	itete	ge
 8005180:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005182:	89a3      	ldrhlt	r3, [r4, #12]
 8005184:	181b      	addge	r3, r3, r0
 8005186:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800518a:	bfac      	ite	ge
 800518c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800518e:	81a3      	strhlt	r3, [r4, #12]
 8005190:	bd10      	pop	{r4, pc}

08005192 <__swrite>:
 8005192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005196:	461f      	mov	r7, r3
 8005198:	898b      	ldrh	r3, [r1, #12]
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	4605      	mov	r5, r0
 800519e:	460c      	mov	r4, r1
 80051a0:	4616      	mov	r6, r2
 80051a2:	d505      	bpl.n	80051b0 <__swrite+0x1e>
 80051a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051a8:	2302      	movs	r3, #2
 80051aa:	2200      	movs	r2, #0
 80051ac:	f000 f83c 	bl	8005228 <_lseek_r>
 80051b0:	89a3      	ldrh	r3, [r4, #12]
 80051b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051ba:	81a3      	strh	r3, [r4, #12]
 80051bc:	4632      	mov	r2, r6
 80051be:	463b      	mov	r3, r7
 80051c0:	4628      	mov	r0, r5
 80051c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051c6:	f000 b853 	b.w	8005270 <_write_r>

080051ca <__sseek>:
 80051ca:	b510      	push	{r4, lr}
 80051cc:	460c      	mov	r4, r1
 80051ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051d2:	f000 f829 	bl	8005228 <_lseek_r>
 80051d6:	1c43      	adds	r3, r0, #1
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	bf15      	itete	ne
 80051dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051e6:	81a3      	strheq	r3, [r4, #12]
 80051e8:	bf18      	it	ne
 80051ea:	81a3      	strhne	r3, [r4, #12]
 80051ec:	bd10      	pop	{r4, pc}

080051ee <__sclose>:
 80051ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051f2:	f000 b809 	b.w	8005208 <_close_r>

080051f6 <memset>:
 80051f6:	4402      	add	r2, r0
 80051f8:	4603      	mov	r3, r0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d100      	bne.n	8005200 <memset+0xa>
 80051fe:	4770      	bx	lr
 8005200:	f803 1b01 	strb.w	r1, [r3], #1
 8005204:	e7f9      	b.n	80051fa <memset+0x4>
	...

08005208 <_close_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4d06      	ldr	r5, [pc, #24]	@ (8005224 <_close_r+0x1c>)
 800520c:	2300      	movs	r3, #0
 800520e:	4604      	mov	r4, r0
 8005210:	4608      	mov	r0, r1
 8005212:	602b      	str	r3, [r5, #0]
 8005214:	f7fb fcfd 	bl	8000c12 <_close>
 8005218:	1c43      	adds	r3, r0, #1
 800521a:	d102      	bne.n	8005222 <_close_r+0x1a>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	b103      	cbz	r3, 8005222 <_close_r+0x1a>
 8005220:	6023      	str	r3, [r4, #0]
 8005222:	bd38      	pop	{r3, r4, r5, pc}
 8005224:	20000378 	.word	0x20000378

08005228 <_lseek_r>:
 8005228:	b538      	push	{r3, r4, r5, lr}
 800522a:	4d07      	ldr	r5, [pc, #28]	@ (8005248 <_lseek_r+0x20>)
 800522c:	4604      	mov	r4, r0
 800522e:	4608      	mov	r0, r1
 8005230:	4611      	mov	r1, r2
 8005232:	2200      	movs	r2, #0
 8005234:	602a      	str	r2, [r5, #0]
 8005236:	461a      	mov	r2, r3
 8005238:	f7fb fd12 	bl	8000c60 <_lseek>
 800523c:	1c43      	adds	r3, r0, #1
 800523e:	d102      	bne.n	8005246 <_lseek_r+0x1e>
 8005240:	682b      	ldr	r3, [r5, #0]
 8005242:	b103      	cbz	r3, 8005246 <_lseek_r+0x1e>
 8005244:	6023      	str	r3, [r4, #0]
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	20000378 	.word	0x20000378

0800524c <_read_r>:
 800524c:	b538      	push	{r3, r4, r5, lr}
 800524e:	4d07      	ldr	r5, [pc, #28]	@ (800526c <_read_r+0x20>)
 8005250:	4604      	mov	r4, r0
 8005252:	4608      	mov	r0, r1
 8005254:	4611      	mov	r1, r2
 8005256:	2200      	movs	r2, #0
 8005258:	602a      	str	r2, [r5, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f7fb fcbc 	bl	8000bd8 <_read>
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	d102      	bne.n	800526a <_read_r+0x1e>
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	b103      	cbz	r3, 800526a <_read_r+0x1e>
 8005268:	6023      	str	r3, [r4, #0]
 800526a:	bd38      	pop	{r3, r4, r5, pc}
 800526c:	20000378 	.word	0x20000378

08005270 <_write_r>:
 8005270:	b538      	push	{r3, r4, r5, lr}
 8005272:	4d07      	ldr	r5, [pc, #28]	@ (8005290 <_write_r+0x20>)
 8005274:	4604      	mov	r4, r0
 8005276:	4608      	mov	r0, r1
 8005278:	4611      	mov	r1, r2
 800527a:	2200      	movs	r2, #0
 800527c:	602a      	str	r2, [r5, #0]
 800527e:	461a      	mov	r2, r3
 8005280:	f7fb fb2e 	bl	80008e0 <_write>
 8005284:	1c43      	adds	r3, r0, #1
 8005286:	d102      	bne.n	800528e <_write_r+0x1e>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	b103      	cbz	r3, 800528e <_write_r+0x1e>
 800528c:	6023      	str	r3, [r4, #0]
 800528e:	bd38      	pop	{r3, r4, r5, pc}
 8005290:	20000378 	.word	0x20000378

08005294 <__errno>:
 8005294:	4b01      	ldr	r3, [pc, #4]	@ (800529c <__errno+0x8>)
 8005296:	6818      	ldr	r0, [r3, #0]
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	20000018 	.word	0x20000018

080052a0 <__libc_init_array>:
 80052a0:	b570      	push	{r4, r5, r6, lr}
 80052a2:	4d0d      	ldr	r5, [pc, #52]	@ (80052d8 <__libc_init_array+0x38>)
 80052a4:	4c0d      	ldr	r4, [pc, #52]	@ (80052dc <__libc_init_array+0x3c>)
 80052a6:	1b64      	subs	r4, r4, r5
 80052a8:	10a4      	asrs	r4, r4, #2
 80052aa:	2600      	movs	r6, #0
 80052ac:	42a6      	cmp	r6, r4
 80052ae:	d109      	bne.n	80052c4 <__libc_init_array+0x24>
 80052b0:	4d0b      	ldr	r5, [pc, #44]	@ (80052e0 <__libc_init_array+0x40>)
 80052b2:	4c0c      	ldr	r4, [pc, #48]	@ (80052e4 <__libc_init_array+0x44>)
 80052b4:	f000 fdc0 	bl	8005e38 <_init>
 80052b8:	1b64      	subs	r4, r4, r5
 80052ba:	10a4      	asrs	r4, r4, #2
 80052bc:	2600      	movs	r6, #0
 80052be:	42a6      	cmp	r6, r4
 80052c0:	d105      	bne.n	80052ce <__libc_init_array+0x2e>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80052c8:	4798      	blx	r3
 80052ca:	3601      	adds	r6, #1
 80052cc:	e7ee      	b.n	80052ac <__libc_init_array+0xc>
 80052ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80052d2:	4798      	blx	r3
 80052d4:	3601      	adds	r6, #1
 80052d6:	e7f2      	b.n	80052be <__libc_init_array+0x1e>
 80052d8:	08005f14 	.word	0x08005f14
 80052dc:	08005f14 	.word	0x08005f14
 80052e0:	08005f14 	.word	0x08005f14
 80052e4:	08005f18 	.word	0x08005f18

080052e8 <__retarget_lock_init_recursive>:
 80052e8:	4770      	bx	lr

080052ea <__retarget_lock_acquire_recursive>:
 80052ea:	4770      	bx	lr

080052ec <__retarget_lock_release_recursive>:
 80052ec:	4770      	bx	lr
	...

080052f0 <_free_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4605      	mov	r5, r0
 80052f4:	2900      	cmp	r1, #0
 80052f6:	d041      	beq.n	800537c <_free_r+0x8c>
 80052f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052fc:	1f0c      	subs	r4, r1, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	bfb8      	it	lt
 8005302:	18e4      	addlt	r4, r4, r3
 8005304:	f000 f8e8 	bl	80054d8 <__malloc_lock>
 8005308:	4a1d      	ldr	r2, [pc, #116]	@ (8005380 <_free_r+0x90>)
 800530a:	6813      	ldr	r3, [r2, #0]
 800530c:	b933      	cbnz	r3, 800531c <_free_r+0x2c>
 800530e:	6063      	str	r3, [r4, #4]
 8005310:	6014      	str	r4, [r2, #0]
 8005312:	4628      	mov	r0, r5
 8005314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005318:	f000 b8e4 	b.w	80054e4 <__malloc_unlock>
 800531c:	42a3      	cmp	r3, r4
 800531e:	d908      	bls.n	8005332 <_free_r+0x42>
 8005320:	6820      	ldr	r0, [r4, #0]
 8005322:	1821      	adds	r1, r4, r0
 8005324:	428b      	cmp	r3, r1
 8005326:	bf01      	itttt	eq
 8005328:	6819      	ldreq	r1, [r3, #0]
 800532a:	685b      	ldreq	r3, [r3, #4]
 800532c:	1809      	addeq	r1, r1, r0
 800532e:	6021      	streq	r1, [r4, #0]
 8005330:	e7ed      	b.n	800530e <_free_r+0x1e>
 8005332:	461a      	mov	r2, r3
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	b10b      	cbz	r3, 800533c <_free_r+0x4c>
 8005338:	42a3      	cmp	r3, r4
 800533a:	d9fa      	bls.n	8005332 <_free_r+0x42>
 800533c:	6811      	ldr	r1, [r2, #0]
 800533e:	1850      	adds	r0, r2, r1
 8005340:	42a0      	cmp	r0, r4
 8005342:	d10b      	bne.n	800535c <_free_r+0x6c>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	4401      	add	r1, r0
 8005348:	1850      	adds	r0, r2, r1
 800534a:	4283      	cmp	r3, r0
 800534c:	6011      	str	r1, [r2, #0]
 800534e:	d1e0      	bne.n	8005312 <_free_r+0x22>
 8005350:	6818      	ldr	r0, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	6053      	str	r3, [r2, #4]
 8005356:	4408      	add	r0, r1
 8005358:	6010      	str	r0, [r2, #0]
 800535a:	e7da      	b.n	8005312 <_free_r+0x22>
 800535c:	d902      	bls.n	8005364 <_free_r+0x74>
 800535e:	230c      	movs	r3, #12
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	e7d6      	b.n	8005312 <_free_r+0x22>
 8005364:	6820      	ldr	r0, [r4, #0]
 8005366:	1821      	adds	r1, r4, r0
 8005368:	428b      	cmp	r3, r1
 800536a:	bf04      	itt	eq
 800536c:	6819      	ldreq	r1, [r3, #0]
 800536e:	685b      	ldreq	r3, [r3, #4]
 8005370:	6063      	str	r3, [r4, #4]
 8005372:	bf04      	itt	eq
 8005374:	1809      	addeq	r1, r1, r0
 8005376:	6021      	streq	r1, [r4, #0]
 8005378:	6054      	str	r4, [r2, #4]
 800537a:	e7ca      	b.n	8005312 <_free_r+0x22>
 800537c:	bd38      	pop	{r3, r4, r5, pc}
 800537e:	bf00      	nop
 8005380:	20000384 	.word	0x20000384

08005384 <malloc>:
 8005384:	4b02      	ldr	r3, [pc, #8]	@ (8005390 <malloc+0xc>)
 8005386:	4601      	mov	r1, r0
 8005388:	6818      	ldr	r0, [r3, #0]
 800538a:	f000 b825 	b.w	80053d8 <_malloc_r>
 800538e:	bf00      	nop
 8005390:	20000018 	.word	0x20000018

08005394 <sbrk_aligned>:
 8005394:	b570      	push	{r4, r5, r6, lr}
 8005396:	4e0f      	ldr	r6, [pc, #60]	@ (80053d4 <sbrk_aligned+0x40>)
 8005398:	460c      	mov	r4, r1
 800539a:	6831      	ldr	r1, [r6, #0]
 800539c:	4605      	mov	r5, r0
 800539e:	b911      	cbnz	r1, 80053a6 <sbrk_aligned+0x12>
 80053a0:	f000 fd3a 	bl	8005e18 <_sbrk_r>
 80053a4:	6030      	str	r0, [r6, #0]
 80053a6:	4621      	mov	r1, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 fd35 	bl	8005e18 <_sbrk_r>
 80053ae:	1c43      	adds	r3, r0, #1
 80053b0:	d103      	bne.n	80053ba <sbrk_aligned+0x26>
 80053b2:	f04f 34ff 	mov.w	r4, #4294967295
 80053b6:	4620      	mov	r0, r4
 80053b8:	bd70      	pop	{r4, r5, r6, pc}
 80053ba:	1cc4      	adds	r4, r0, #3
 80053bc:	f024 0403 	bic.w	r4, r4, #3
 80053c0:	42a0      	cmp	r0, r4
 80053c2:	d0f8      	beq.n	80053b6 <sbrk_aligned+0x22>
 80053c4:	1a21      	subs	r1, r4, r0
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 fd26 	bl	8005e18 <_sbrk_r>
 80053cc:	3001      	adds	r0, #1
 80053ce:	d1f2      	bne.n	80053b6 <sbrk_aligned+0x22>
 80053d0:	e7ef      	b.n	80053b2 <sbrk_aligned+0x1e>
 80053d2:	bf00      	nop
 80053d4:	20000380 	.word	0x20000380

080053d8 <_malloc_r>:
 80053d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053dc:	1ccd      	adds	r5, r1, #3
 80053de:	f025 0503 	bic.w	r5, r5, #3
 80053e2:	3508      	adds	r5, #8
 80053e4:	2d0c      	cmp	r5, #12
 80053e6:	bf38      	it	cc
 80053e8:	250c      	movcc	r5, #12
 80053ea:	2d00      	cmp	r5, #0
 80053ec:	4606      	mov	r6, r0
 80053ee:	db01      	blt.n	80053f4 <_malloc_r+0x1c>
 80053f0:	42a9      	cmp	r1, r5
 80053f2:	d904      	bls.n	80053fe <_malloc_r+0x26>
 80053f4:	230c      	movs	r3, #12
 80053f6:	6033      	str	r3, [r6, #0]
 80053f8:	2000      	movs	r0, #0
 80053fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054d4 <_malloc_r+0xfc>
 8005402:	f000 f869 	bl	80054d8 <__malloc_lock>
 8005406:	f8d8 3000 	ldr.w	r3, [r8]
 800540a:	461c      	mov	r4, r3
 800540c:	bb44      	cbnz	r4, 8005460 <_malloc_r+0x88>
 800540e:	4629      	mov	r1, r5
 8005410:	4630      	mov	r0, r6
 8005412:	f7ff ffbf 	bl	8005394 <sbrk_aligned>
 8005416:	1c43      	adds	r3, r0, #1
 8005418:	4604      	mov	r4, r0
 800541a:	d158      	bne.n	80054ce <_malloc_r+0xf6>
 800541c:	f8d8 4000 	ldr.w	r4, [r8]
 8005420:	4627      	mov	r7, r4
 8005422:	2f00      	cmp	r7, #0
 8005424:	d143      	bne.n	80054ae <_malloc_r+0xd6>
 8005426:	2c00      	cmp	r4, #0
 8005428:	d04b      	beq.n	80054c2 <_malloc_r+0xea>
 800542a:	6823      	ldr	r3, [r4, #0]
 800542c:	4639      	mov	r1, r7
 800542e:	4630      	mov	r0, r6
 8005430:	eb04 0903 	add.w	r9, r4, r3
 8005434:	f000 fcf0 	bl	8005e18 <_sbrk_r>
 8005438:	4581      	cmp	r9, r0
 800543a:	d142      	bne.n	80054c2 <_malloc_r+0xea>
 800543c:	6821      	ldr	r1, [r4, #0]
 800543e:	1a6d      	subs	r5, r5, r1
 8005440:	4629      	mov	r1, r5
 8005442:	4630      	mov	r0, r6
 8005444:	f7ff ffa6 	bl	8005394 <sbrk_aligned>
 8005448:	3001      	adds	r0, #1
 800544a:	d03a      	beq.n	80054c2 <_malloc_r+0xea>
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	442b      	add	r3, r5
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	f8d8 3000 	ldr.w	r3, [r8]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	bb62      	cbnz	r2, 80054b4 <_malloc_r+0xdc>
 800545a:	f8c8 7000 	str.w	r7, [r8]
 800545e:	e00f      	b.n	8005480 <_malloc_r+0xa8>
 8005460:	6822      	ldr	r2, [r4, #0]
 8005462:	1b52      	subs	r2, r2, r5
 8005464:	d420      	bmi.n	80054a8 <_malloc_r+0xd0>
 8005466:	2a0b      	cmp	r2, #11
 8005468:	d917      	bls.n	800549a <_malloc_r+0xc2>
 800546a:	1961      	adds	r1, r4, r5
 800546c:	42a3      	cmp	r3, r4
 800546e:	6025      	str	r5, [r4, #0]
 8005470:	bf18      	it	ne
 8005472:	6059      	strne	r1, [r3, #4]
 8005474:	6863      	ldr	r3, [r4, #4]
 8005476:	bf08      	it	eq
 8005478:	f8c8 1000 	streq.w	r1, [r8]
 800547c:	5162      	str	r2, [r4, r5]
 800547e:	604b      	str	r3, [r1, #4]
 8005480:	4630      	mov	r0, r6
 8005482:	f000 f82f 	bl	80054e4 <__malloc_unlock>
 8005486:	f104 000b 	add.w	r0, r4, #11
 800548a:	1d23      	adds	r3, r4, #4
 800548c:	f020 0007 	bic.w	r0, r0, #7
 8005490:	1ac2      	subs	r2, r0, r3
 8005492:	bf1c      	itt	ne
 8005494:	1a1b      	subne	r3, r3, r0
 8005496:	50a3      	strne	r3, [r4, r2]
 8005498:	e7af      	b.n	80053fa <_malloc_r+0x22>
 800549a:	6862      	ldr	r2, [r4, #4]
 800549c:	42a3      	cmp	r3, r4
 800549e:	bf0c      	ite	eq
 80054a0:	f8c8 2000 	streq.w	r2, [r8]
 80054a4:	605a      	strne	r2, [r3, #4]
 80054a6:	e7eb      	b.n	8005480 <_malloc_r+0xa8>
 80054a8:	4623      	mov	r3, r4
 80054aa:	6864      	ldr	r4, [r4, #4]
 80054ac:	e7ae      	b.n	800540c <_malloc_r+0x34>
 80054ae:	463c      	mov	r4, r7
 80054b0:	687f      	ldr	r7, [r7, #4]
 80054b2:	e7b6      	b.n	8005422 <_malloc_r+0x4a>
 80054b4:	461a      	mov	r2, r3
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	42a3      	cmp	r3, r4
 80054ba:	d1fb      	bne.n	80054b4 <_malloc_r+0xdc>
 80054bc:	2300      	movs	r3, #0
 80054be:	6053      	str	r3, [r2, #4]
 80054c0:	e7de      	b.n	8005480 <_malloc_r+0xa8>
 80054c2:	230c      	movs	r3, #12
 80054c4:	6033      	str	r3, [r6, #0]
 80054c6:	4630      	mov	r0, r6
 80054c8:	f000 f80c 	bl	80054e4 <__malloc_unlock>
 80054cc:	e794      	b.n	80053f8 <_malloc_r+0x20>
 80054ce:	6005      	str	r5, [r0, #0]
 80054d0:	e7d6      	b.n	8005480 <_malloc_r+0xa8>
 80054d2:	bf00      	nop
 80054d4:	20000384 	.word	0x20000384

080054d8 <__malloc_lock>:
 80054d8:	4801      	ldr	r0, [pc, #4]	@ (80054e0 <__malloc_lock+0x8>)
 80054da:	f7ff bf06 	b.w	80052ea <__retarget_lock_acquire_recursive>
 80054de:	bf00      	nop
 80054e0:	2000037c 	.word	0x2000037c

080054e4 <__malloc_unlock>:
 80054e4:	4801      	ldr	r0, [pc, #4]	@ (80054ec <__malloc_unlock+0x8>)
 80054e6:	f7ff bf01 	b.w	80052ec <__retarget_lock_release_recursive>
 80054ea:	bf00      	nop
 80054ec:	2000037c 	.word	0x2000037c

080054f0 <__sfputc_r>:
 80054f0:	6893      	ldr	r3, [r2, #8]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	b410      	push	{r4}
 80054f8:	6093      	str	r3, [r2, #8]
 80054fa:	da08      	bge.n	800550e <__sfputc_r+0x1e>
 80054fc:	6994      	ldr	r4, [r2, #24]
 80054fe:	42a3      	cmp	r3, r4
 8005500:	db01      	blt.n	8005506 <__sfputc_r+0x16>
 8005502:	290a      	cmp	r1, #10
 8005504:	d103      	bne.n	800550e <__sfputc_r+0x1e>
 8005506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550a:	f000 bbcf 	b.w	8005cac <__swbuf_r>
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	1c58      	adds	r0, r3, #1
 8005512:	6010      	str	r0, [r2, #0]
 8005514:	7019      	strb	r1, [r3, #0]
 8005516:	4608      	mov	r0, r1
 8005518:	f85d 4b04 	ldr.w	r4, [sp], #4
 800551c:	4770      	bx	lr

0800551e <__sfputs_r>:
 800551e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005520:	4606      	mov	r6, r0
 8005522:	460f      	mov	r7, r1
 8005524:	4614      	mov	r4, r2
 8005526:	18d5      	adds	r5, r2, r3
 8005528:	42ac      	cmp	r4, r5
 800552a:	d101      	bne.n	8005530 <__sfputs_r+0x12>
 800552c:	2000      	movs	r0, #0
 800552e:	e007      	b.n	8005540 <__sfputs_r+0x22>
 8005530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005534:	463a      	mov	r2, r7
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff ffda 	bl	80054f0 <__sfputc_r>
 800553c:	1c43      	adds	r3, r0, #1
 800553e:	d1f3      	bne.n	8005528 <__sfputs_r+0xa>
 8005540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005544 <_vfiprintf_r>:
 8005544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005548:	460d      	mov	r5, r1
 800554a:	b09d      	sub	sp, #116	@ 0x74
 800554c:	4614      	mov	r4, r2
 800554e:	4698      	mov	r8, r3
 8005550:	4606      	mov	r6, r0
 8005552:	b118      	cbz	r0, 800555c <_vfiprintf_r+0x18>
 8005554:	6a03      	ldr	r3, [r0, #32]
 8005556:	b90b      	cbnz	r3, 800555c <_vfiprintf_r+0x18>
 8005558:	f7ff fd06 	bl	8004f68 <__sinit>
 800555c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800555e:	07d9      	lsls	r1, r3, #31
 8005560:	d405      	bmi.n	800556e <_vfiprintf_r+0x2a>
 8005562:	89ab      	ldrh	r3, [r5, #12]
 8005564:	059a      	lsls	r2, r3, #22
 8005566:	d402      	bmi.n	800556e <_vfiprintf_r+0x2a>
 8005568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800556a:	f7ff febe 	bl	80052ea <__retarget_lock_acquire_recursive>
 800556e:	89ab      	ldrh	r3, [r5, #12]
 8005570:	071b      	lsls	r3, r3, #28
 8005572:	d501      	bpl.n	8005578 <_vfiprintf_r+0x34>
 8005574:	692b      	ldr	r3, [r5, #16]
 8005576:	b99b      	cbnz	r3, 80055a0 <_vfiprintf_r+0x5c>
 8005578:	4629      	mov	r1, r5
 800557a:	4630      	mov	r0, r6
 800557c:	f000 fbd4 	bl	8005d28 <__swsetup_r>
 8005580:	b170      	cbz	r0, 80055a0 <_vfiprintf_r+0x5c>
 8005582:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005584:	07dc      	lsls	r4, r3, #31
 8005586:	d504      	bpl.n	8005592 <_vfiprintf_r+0x4e>
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	b01d      	add	sp, #116	@ 0x74
 800558e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005592:	89ab      	ldrh	r3, [r5, #12]
 8005594:	0598      	lsls	r0, r3, #22
 8005596:	d4f7      	bmi.n	8005588 <_vfiprintf_r+0x44>
 8005598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800559a:	f7ff fea7 	bl	80052ec <__retarget_lock_release_recursive>
 800559e:	e7f3      	b.n	8005588 <_vfiprintf_r+0x44>
 80055a0:	2300      	movs	r3, #0
 80055a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80055a4:	2320      	movs	r3, #32
 80055a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80055aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80055ae:	2330      	movs	r3, #48	@ 0x30
 80055b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005760 <_vfiprintf_r+0x21c>
 80055b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80055b8:	f04f 0901 	mov.w	r9, #1
 80055bc:	4623      	mov	r3, r4
 80055be:	469a      	mov	sl, r3
 80055c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c4:	b10a      	cbz	r2, 80055ca <_vfiprintf_r+0x86>
 80055c6:	2a25      	cmp	r2, #37	@ 0x25
 80055c8:	d1f9      	bne.n	80055be <_vfiprintf_r+0x7a>
 80055ca:	ebba 0b04 	subs.w	fp, sl, r4
 80055ce:	d00b      	beq.n	80055e8 <_vfiprintf_r+0xa4>
 80055d0:	465b      	mov	r3, fp
 80055d2:	4622      	mov	r2, r4
 80055d4:	4629      	mov	r1, r5
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7ff ffa1 	bl	800551e <__sfputs_r>
 80055dc:	3001      	adds	r0, #1
 80055de:	f000 80a7 	beq.w	8005730 <_vfiprintf_r+0x1ec>
 80055e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055e4:	445a      	add	r2, fp
 80055e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80055e8:	f89a 3000 	ldrb.w	r3, [sl]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 809f 	beq.w	8005730 <_vfiprintf_r+0x1ec>
 80055f2:	2300      	movs	r3, #0
 80055f4:	f04f 32ff 	mov.w	r2, #4294967295
 80055f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055fc:	f10a 0a01 	add.w	sl, sl, #1
 8005600:	9304      	str	r3, [sp, #16]
 8005602:	9307      	str	r3, [sp, #28]
 8005604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005608:	931a      	str	r3, [sp, #104]	@ 0x68
 800560a:	4654      	mov	r4, sl
 800560c:	2205      	movs	r2, #5
 800560e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005612:	4853      	ldr	r0, [pc, #332]	@ (8005760 <_vfiprintf_r+0x21c>)
 8005614:	f7fa fddc 	bl	80001d0 <memchr>
 8005618:	9a04      	ldr	r2, [sp, #16]
 800561a:	b9d8      	cbnz	r0, 8005654 <_vfiprintf_r+0x110>
 800561c:	06d1      	lsls	r1, r2, #27
 800561e:	bf44      	itt	mi
 8005620:	2320      	movmi	r3, #32
 8005622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005626:	0713      	lsls	r3, r2, #28
 8005628:	bf44      	itt	mi
 800562a:	232b      	movmi	r3, #43	@ 0x2b
 800562c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005630:	f89a 3000 	ldrb.w	r3, [sl]
 8005634:	2b2a      	cmp	r3, #42	@ 0x2a
 8005636:	d015      	beq.n	8005664 <_vfiprintf_r+0x120>
 8005638:	9a07      	ldr	r2, [sp, #28]
 800563a:	4654      	mov	r4, sl
 800563c:	2000      	movs	r0, #0
 800563e:	f04f 0c0a 	mov.w	ip, #10
 8005642:	4621      	mov	r1, r4
 8005644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005648:	3b30      	subs	r3, #48	@ 0x30
 800564a:	2b09      	cmp	r3, #9
 800564c:	d94b      	bls.n	80056e6 <_vfiprintf_r+0x1a2>
 800564e:	b1b0      	cbz	r0, 800567e <_vfiprintf_r+0x13a>
 8005650:	9207      	str	r2, [sp, #28]
 8005652:	e014      	b.n	800567e <_vfiprintf_r+0x13a>
 8005654:	eba0 0308 	sub.w	r3, r0, r8
 8005658:	fa09 f303 	lsl.w	r3, r9, r3
 800565c:	4313      	orrs	r3, r2
 800565e:	9304      	str	r3, [sp, #16]
 8005660:	46a2      	mov	sl, r4
 8005662:	e7d2      	b.n	800560a <_vfiprintf_r+0xc6>
 8005664:	9b03      	ldr	r3, [sp, #12]
 8005666:	1d19      	adds	r1, r3, #4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	9103      	str	r1, [sp, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	bfbb      	ittet	lt
 8005670:	425b      	neglt	r3, r3
 8005672:	f042 0202 	orrlt.w	r2, r2, #2
 8005676:	9307      	strge	r3, [sp, #28]
 8005678:	9307      	strlt	r3, [sp, #28]
 800567a:	bfb8      	it	lt
 800567c:	9204      	strlt	r2, [sp, #16]
 800567e:	7823      	ldrb	r3, [r4, #0]
 8005680:	2b2e      	cmp	r3, #46	@ 0x2e
 8005682:	d10a      	bne.n	800569a <_vfiprintf_r+0x156>
 8005684:	7863      	ldrb	r3, [r4, #1]
 8005686:	2b2a      	cmp	r3, #42	@ 0x2a
 8005688:	d132      	bne.n	80056f0 <_vfiprintf_r+0x1ac>
 800568a:	9b03      	ldr	r3, [sp, #12]
 800568c:	1d1a      	adds	r2, r3, #4
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	9203      	str	r2, [sp, #12]
 8005692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005696:	3402      	adds	r4, #2
 8005698:	9305      	str	r3, [sp, #20]
 800569a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005770 <_vfiprintf_r+0x22c>
 800569e:	7821      	ldrb	r1, [r4, #0]
 80056a0:	2203      	movs	r2, #3
 80056a2:	4650      	mov	r0, sl
 80056a4:	f7fa fd94 	bl	80001d0 <memchr>
 80056a8:	b138      	cbz	r0, 80056ba <_vfiprintf_r+0x176>
 80056aa:	9b04      	ldr	r3, [sp, #16]
 80056ac:	eba0 000a 	sub.w	r0, r0, sl
 80056b0:	2240      	movs	r2, #64	@ 0x40
 80056b2:	4082      	lsls	r2, r0
 80056b4:	4313      	orrs	r3, r2
 80056b6:	3401      	adds	r4, #1
 80056b8:	9304      	str	r3, [sp, #16]
 80056ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056be:	4829      	ldr	r0, [pc, #164]	@ (8005764 <_vfiprintf_r+0x220>)
 80056c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80056c4:	2206      	movs	r2, #6
 80056c6:	f7fa fd83 	bl	80001d0 <memchr>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	d03f      	beq.n	800574e <_vfiprintf_r+0x20a>
 80056ce:	4b26      	ldr	r3, [pc, #152]	@ (8005768 <_vfiprintf_r+0x224>)
 80056d0:	bb1b      	cbnz	r3, 800571a <_vfiprintf_r+0x1d6>
 80056d2:	9b03      	ldr	r3, [sp, #12]
 80056d4:	3307      	adds	r3, #7
 80056d6:	f023 0307 	bic.w	r3, r3, #7
 80056da:	3308      	adds	r3, #8
 80056dc:	9303      	str	r3, [sp, #12]
 80056de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e0:	443b      	add	r3, r7
 80056e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80056e4:	e76a      	b.n	80055bc <_vfiprintf_r+0x78>
 80056e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80056ea:	460c      	mov	r4, r1
 80056ec:	2001      	movs	r0, #1
 80056ee:	e7a8      	b.n	8005642 <_vfiprintf_r+0xfe>
 80056f0:	2300      	movs	r3, #0
 80056f2:	3401      	adds	r4, #1
 80056f4:	9305      	str	r3, [sp, #20]
 80056f6:	4619      	mov	r1, r3
 80056f8:	f04f 0c0a 	mov.w	ip, #10
 80056fc:	4620      	mov	r0, r4
 80056fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005702:	3a30      	subs	r2, #48	@ 0x30
 8005704:	2a09      	cmp	r2, #9
 8005706:	d903      	bls.n	8005710 <_vfiprintf_r+0x1cc>
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0c6      	beq.n	800569a <_vfiprintf_r+0x156>
 800570c:	9105      	str	r1, [sp, #20]
 800570e:	e7c4      	b.n	800569a <_vfiprintf_r+0x156>
 8005710:	fb0c 2101 	mla	r1, ip, r1, r2
 8005714:	4604      	mov	r4, r0
 8005716:	2301      	movs	r3, #1
 8005718:	e7f0      	b.n	80056fc <_vfiprintf_r+0x1b8>
 800571a:	ab03      	add	r3, sp, #12
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	462a      	mov	r2, r5
 8005720:	4b12      	ldr	r3, [pc, #72]	@ (800576c <_vfiprintf_r+0x228>)
 8005722:	a904      	add	r1, sp, #16
 8005724:	4630      	mov	r0, r6
 8005726:	f3af 8000 	nop.w
 800572a:	4607      	mov	r7, r0
 800572c:	1c78      	adds	r0, r7, #1
 800572e:	d1d6      	bne.n	80056de <_vfiprintf_r+0x19a>
 8005730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005732:	07d9      	lsls	r1, r3, #31
 8005734:	d405      	bmi.n	8005742 <_vfiprintf_r+0x1fe>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	059a      	lsls	r2, r3, #22
 800573a:	d402      	bmi.n	8005742 <_vfiprintf_r+0x1fe>
 800573c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800573e:	f7ff fdd5 	bl	80052ec <__retarget_lock_release_recursive>
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	065b      	lsls	r3, r3, #25
 8005746:	f53f af1f 	bmi.w	8005588 <_vfiprintf_r+0x44>
 800574a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800574c:	e71e      	b.n	800558c <_vfiprintf_r+0x48>
 800574e:	ab03      	add	r3, sp, #12
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	462a      	mov	r2, r5
 8005754:	4b05      	ldr	r3, [pc, #20]	@ (800576c <_vfiprintf_r+0x228>)
 8005756:	a904      	add	r1, sp, #16
 8005758:	4630      	mov	r0, r6
 800575a:	f000 f879 	bl	8005850 <_printf_i>
 800575e:	e7e4      	b.n	800572a <_vfiprintf_r+0x1e6>
 8005760:	08005ed8 	.word	0x08005ed8
 8005764:	08005ee2 	.word	0x08005ee2
 8005768:	00000000 	.word	0x00000000
 800576c:	0800551f 	.word	0x0800551f
 8005770:	08005ede 	.word	0x08005ede

08005774 <_printf_common>:
 8005774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005778:	4616      	mov	r6, r2
 800577a:	4698      	mov	r8, r3
 800577c:	688a      	ldr	r2, [r1, #8]
 800577e:	690b      	ldr	r3, [r1, #16]
 8005780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005784:	4293      	cmp	r3, r2
 8005786:	bfb8      	it	lt
 8005788:	4613      	movlt	r3, r2
 800578a:	6033      	str	r3, [r6, #0]
 800578c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005790:	4607      	mov	r7, r0
 8005792:	460c      	mov	r4, r1
 8005794:	b10a      	cbz	r2, 800579a <_printf_common+0x26>
 8005796:	3301      	adds	r3, #1
 8005798:	6033      	str	r3, [r6, #0]
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	0699      	lsls	r1, r3, #26
 800579e:	bf42      	ittt	mi
 80057a0:	6833      	ldrmi	r3, [r6, #0]
 80057a2:	3302      	addmi	r3, #2
 80057a4:	6033      	strmi	r3, [r6, #0]
 80057a6:	6825      	ldr	r5, [r4, #0]
 80057a8:	f015 0506 	ands.w	r5, r5, #6
 80057ac:	d106      	bne.n	80057bc <_printf_common+0x48>
 80057ae:	f104 0a19 	add.w	sl, r4, #25
 80057b2:	68e3      	ldr	r3, [r4, #12]
 80057b4:	6832      	ldr	r2, [r6, #0]
 80057b6:	1a9b      	subs	r3, r3, r2
 80057b8:	42ab      	cmp	r3, r5
 80057ba:	dc26      	bgt.n	800580a <_printf_common+0x96>
 80057bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	3b00      	subs	r3, #0
 80057c4:	bf18      	it	ne
 80057c6:	2301      	movne	r3, #1
 80057c8:	0692      	lsls	r2, r2, #26
 80057ca:	d42b      	bmi.n	8005824 <_printf_common+0xb0>
 80057cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057d0:	4641      	mov	r1, r8
 80057d2:	4638      	mov	r0, r7
 80057d4:	47c8      	blx	r9
 80057d6:	3001      	adds	r0, #1
 80057d8:	d01e      	beq.n	8005818 <_printf_common+0xa4>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	6922      	ldr	r2, [r4, #16]
 80057de:	f003 0306 	and.w	r3, r3, #6
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	bf02      	ittt	eq
 80057e6:	68e5      	ldreq	r5, [r4, #12]
 80057e8:	6833      	ldreq	r3, [r6, #0]
 80057ea:	1aed      	subeq	r5, r5, r3
 80057ec:	68a3      	ldr	r3, [r4, #8]
 80057ee:	bf0c      	ite	eq
 80057f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057f4:	2500      	movne	r5, #0
 80057f6:	4293      	cmp	r3, r2
 80057f8:	bfc4      	itt	gt
 80057fa:	1a9b      	subgt	r3, r3, r2
 80057fc:	18ed      	addgt	r5, r5, r3
 80057fe:	2600      	movs	r6, #0
 8005800:	341a      	adds	r4, #26
 8005802:	42b5      	cmp	r5, r6
 8005804:	d11a      	bne.n	800583c <_printf_common+0xc8>
 8005806:	2000      	movs	r0, #0
 8005808:	e008      	b.n	800581c <_printf_common+0xa8>
 800580a:	2301      	movs	r3, #1
 800580c:	4652      	mov	r2, sl
 800580e:	4641      	mov	r1, r8
 8005810:	4638      	mov	r0, r7
 8005812:	47c8      	blx	r9
 8005814:	3001      	adds	r0, #1
 8005816:	d103      	bne.n	8005820 <_printf_common+0xac>
 8005818:	f04f 30ff 	mov.w	r0, #4294967295
 800581c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005820:	3501      	adds	r5, #1
 8005822:	e7c6      	b.n	80057b2 <_printf_common+0x3e>
 8005824:	18e1      	adds	r1, r4, r3
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	2030      	movs	r0, #48	@ 0x30
 800582a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800582e:	4422      	add	r2, r4
 8005830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005838:	3302      	adds	r3, #2
 800583a:	e7c7      	b.n	80057cc <_printf_common+0x58>
 800583c:	2301      	movs	r3, #1
 800583e:	4622      	mov	r2, r4
 8005840:	4641      	mov	r1, r8
 8005842:	4638      	mov	r0, r7
 8005844:	47c8      	blx	r9
 8005846:	3001      	adds	r0, #1
 8005848:	d0e6      	beq.n	8005818 <_printf_common+0xa4>
 800584a:	3601      	adds	r6, #1
 800584c:	e7d9      	b.n	8005802 <_printf_common+0x8e>
	...

08005850 <_printf_i>:
 8005850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005854:	7e0f      	ldrb	r7, [r1, #24]
 8005856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005858:	2f78      	cmp	r7, #120	@ 0x78
 800585a:	4691      	mov	r9, r2
 800585c:	4680      	mov	r8, r0
 800585e:	460c      	mov	r4, r1
 8005860:	469a      	mov	sl, r3
 8005862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005866:	d807      	bhi.n	8005878 <_printf_i+0x28>
 8005868:	2f62      	cmp	r7, #98	@ 0x62
 800586a:	d80a      	bhi.n	8005882 <_printf_i+0x32>
 800586c:	2f00      	cmp	r7, #0
 800586e:	f000 80d2 	beq.w	8005a16 <_printf_i+0x1c6>
 8005872:	2f58      	cmp	r7, #88	@ 0x58
 8005874:	f000 80b9 	beq.w	80059ea <_printf_i+0x19a>
 8005878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800587c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005880:	e03a      	b.n	80058f8 <_printf_i+0xa8>
 8005882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005886:	2b15      	cmp	r3, #21
 8005888:	d8f6      	bhi.n	8005878 <_printf_i+0x28>
 800588a:	a101      	add	r1, pc, #4	@ (adr r1, 8005890 <_printf_i+0x40>)
 800588c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005890:	080058e9 	.word	0x080058e9
 8005894:	080058fd 	.word	0x080058fd
 8005898:	08005879 	.word	0x08005879
 800589c:	08005879 	.word	0x08005879
 80058a0:	08005879 	.word	0x08005879
 80058a4:	08005879 	.word	0x08005879
 80058a8:	080058fd 	.word	0x080058fd
 80058ac:	08005879 	.word	0x08005879
 80058b0:	08005879 	.word	0x08005879
 80058b4:	08005879 	.word	0x08005879
 80058b8:	08005879 	.word	0x08005879
 80058bc:	080059fd 	.word	0x080059fd
 80058c0:	08005927 	.word	0x08005927
 80058c4:	080059b7 	.word	0x080059b7
 80058c8:	08005879 	.word	0x08005879
 80058cc:	08005879 	.word	0x08005879
 80058d0:	08005a1f 	.word	0x08005a1f
 80058d4:	08005879 	.word	0x08005879
 80058d8:	08005927 	.word	0x08005927
 80058dc:	08005879 	.word	0x08005879
 80058e0:	08005879 	.word	0x08005879
 80058e4:	080059bf 	.word	0x080059bf
 80058e8:	6833      	ldr	r3, [r6, #0]
 80058ea:	1d1a      	adds	r2, r3, #4
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6032      	str	r2, [r6, #0]
 80058f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058f8:	2301      	movs	r3, #1
 80058fa:	e09d      	b.n	8005a38 <_printf_i+0x1e8>
 80058fc:	6833      	ldr	r3, [r6, #0]
 80058fe:	6820      	ldr	r0, [r4, #0]
 8005900:	1d19      	adds	r1, r3, #4
 8005902:	6031      	str	r1, [r6, #0]
 8005904:	0606      	lsls	r6, r0, #24
 8005906:	d501      	bpl.n	800590c <_printf_i+0xbc>
 8005908:	681d      	ldr	r5, [r3, #0]
 800590a:	e003      	b.n	8005914 <_printf_i+0xc4>
 800590c:	0645      	lsls	r5, r0, #25
 800590e:	d5fb      	bpl.n	8005908 <_printf_i+0xb8>
 8005910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005914:	2d00      	cmp	r5, #0
 8005916:	da03      	bge.n	8005920 <_printf_i+0xd0>
 8005918:	232d      	movs	r3, #45	@ 0x2d
 800591a:	426d      	negs	r5, r5
 800591c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005920:	4859      	ldr	r0, [pc, #356]	@ (8005a88 <_printf_i+0x238>)
 8005922:	230a      	movs	r3, #10
 8005924:	e011      	b.n	800594a <_printf_i+0xfa>
 8005926:	6821      	ldr	r1, [r4, #0]
 8005928:	6833      	ldr	r3, [r6, #0]
 800592a:	0608      	lsls	r0, r1, #24
 800592c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005930:	d402      	bmi.n	8005938 <_printf_i+0xe8>
 8005932:	0649      	lsls	r1, r1, #25
 8005934:	bf48      	it	mi
 8005936:	b2ad      	uxthmi	r5, r5
 8005938:	2f6f      	cmp	r7, #111	@ 0x6f
 800593a:	4853      	ldr	r0, [pc, #332]	@ (8005a88 <_printf_i+0x238>)
 800593c:	6033      	str	r3, [r6, #0]
 800593e:	bf14      	ite	ne
 8005940:	230a      	movne	r3, #10
 8005942:	2308      	moveq	r3, #8
 8005944:	2100      	movs	r1, #0
 8005946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800594a:	6866      	ldr	r6, [r4, #4]
 800594c:	60a6      	str	r6, [r4, #8]
 800594e:	2e00      	cmp	r6, #0
 8005950:	bfa2      	ittt	ge
 8005952:	6821      	ldrge	r1, [r4, #0]
 8005954:	f021 0104 	bicge.w	r1, r1, #4
 8005958:	6021      	strge	r1, [r4, #0]
 800595a:	b90d      	cbnz	r5, 8005960 <_printf_i+0x110>
 800595c:	2e00      	cmp	r6, #0
 800595e:	d04b      	beq.n	80059f8 <_printf_i+0x1a8>
 8005960:	4616      	mov	r6, r2
 8005962:	fbb5 f1f3 	udiv	r1, r5, r3
 8005966:	fb03 5711 	mls	r7, r3, r1, r5
 800596a:	5dc7      	ldrb	r7, [r0, r7]
 800596c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005970:	462f      	mov	r7, r5
 8005972:	42bb      	cmp	r3, r7
 8005974:	460d      	mov	r5, r1
 8005976:	d9f4      	bls.n	8005962 <_printf_i+0x112>
 8005978:	2b08      	cmp	r3, #8
 800597a:	d10b      	bne.n	8005994 <_printf_i+0x144>
 800597c:	6823      	ldr	r3, [r4, #0]
 800597e:	07df      	lsls	r7, r3, #31
 8005980:	d508      	bpl.n	8005994 <_printf_i+0x144>
 8005982:	6923      	ldr	r3, [r4, #16]
 8005984:	6861      	ldr	r1, [r4, #4]
 8005986:	4299      	cmp	r1, r3
 8005988:	bfde      	ittt	le
 800598a:	2330      	movle	r3, #48	@ 0x30
 800598c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005990:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005994:	1b92      	subs	r2, r2, r6
 8005996:	6122      	str	r2, [r4, #16]
 8005998:	f8cd a000 	str.w	sl, [sp]
 800599c:	464b      	mov	r3, r9
 800599e:	aa03      	add	r2, sp, #12
 80059a0:	4621      	mov	r1, r4
 80059a2:	4640      	mov	r0, r8
 80059a4:	f7ff fee6 	bl	8005774 <_printf_common>
 80059a8:	3001      	adds	r0, #1
 80059aa:	d14a      	bne.n	8005a42 <_printf_i+0x1f2>
 80059ac:	f04f 30ff 	mov.w	r0, #4294967295
 80059b0:	b004      	add	sp, #16
 80059b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	f043 0320 	orr.w	r3, r3, #32
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	4833      	ldr	r0, [pc, #204]	@ (8005a8c <_printf_i+0x23c>)
 80059c0:	2778      	movs	r7, #120	@ 0x78
 80059c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	6831      	ldr	r1, [r6, #0]
 80059ca:	061f      	lsls	r7, r3, #24
 80059cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80059d0:	d402      	bmi.n	80059d8 <_printf_i+0x188>
 80059d2:	065f      	lsls	r7, r3, #25
 80059d4:	bf48      	it	mi
 80059d6:	b2ad      	uxthmi	r5, r5
 80059d8:	6031      	str	r1, [r6, #0]
 80059da:	07d9      	lsls	r1, r3, #31
 80059dc:	bf44      	itt	mi
 80059de:	f043 0320 	orrmi.w	r3, r3, #32
 80059e2:	6023      	strmi	r3, [r4, #0]
 80059e4:	b11d      	cbz	r5, 80059ee <_printf_i+0x19e>
 80059e6:	2310      	movs	r3, #16
 80059e8:	e7ac      	b.n	8005944 <_printf_i+0xf4>
 80059ea:	4827      	ldr	r0, [pc, #156]	@ (8005a88 <_printf_i+0x238>)
 80059ec:	e7e9      	b.n	80059c2 <_printf_i+0x172>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	f023 0320 	bic.w	r3, r3, #32
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	e7f6      	b.n	80059e6 <_printf_i+0x196>
 80059f8:	4616      	mov	r6, r2
 80059fa:	e7bd      	b.n	8005978 <_printf_i+0x128>
 80059fc:	6833      	ldr	r3, [r6, #0]
 80059fe:	6825      	ldr	r5, [r4, #0]
 8005a00:	6961      	ldr	r1, [r4, #20]
 8005a02:	1d18      	adds	r0, r3, #4
 8005a04:	6030      	str	r0, [r6, #0]
 8005a06:	062e      	lsls	r6, r5, #24
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	d501      	bpl.n	8005a10 <_printf_i+0x1c0>
 8005a0c:	6019      	str	r1, [r3, #0]
 8005a0e:	e002      	b.n	8005a16 <_printf_i+0x1c6>
 8005a10:	0668      	lsls	r0, r5, #25
 8005a12:	d5fb      	bpl.n	8005a0c <_printf_i+0x1bc>
 8005a14:	8019      	strh	r1, [r3, #0]
 8005a16:	2300      	movs	r3, #0
 8005a18:	6123      	str	r3, [r4, #16]
 8005a1a:	4616      	mov	r6, r2
 8005a1c:	e7bc      	b.n	8005998 <_printf_i+0x148>
 8005a1e:	6833      	ldr	r3, [r6, #0]
 8005a20:	1d1a      	adds	r2, r3, #4
 8005a22:	6032      	str	r2, [r6, #0]
 8005a24:	681e      	ldr	r6, [r3, #0]
 8005a26:	6862      	ldr	r2, [r4, #4]
 8005a28:	2100      	movs	r1, #0
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f7fa fbd0 	bl	80001d0 <memchr>
 8005a30:	b108      	cbz	r0, 8005a36 <_printf_i+0x1e6>
 8005a32:	1b80      	subs	r0, r0, r6
 8005a34:	6060      	str	r0, [r4, #4]
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	6123      	str	r3, [r4, #16]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a40:	e7aa      	b.n	8005998 <_printf_i+0x148>
 8005a42:	6923      	ldr	r3, [r4, #16]
 8005a44:	4632      	mov	r2, r6
 8005a46:	4649      	mov	r1, r9
 8005a48:	4640      	mov	r0, r8
 8005a4a:	47d0      	blx	sl
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d0ad      	beq.n	80059ac <_printf_i+0x15c>
 8005a50:	6823      	ldr	r3, [r4, #0]
 8005a52:	079b      	lsls	r3, r3, #30
 8005a54:	d413      	bmi.n	8005a7e <_printf_i+0x22e>
 8005a56:	68e0      	ldr	r0, [r4, #12]
 8005a58:	9b03      	ldr	r3, [sp, #12]
 8005a5a:	4298      	cmp	r0, r3
 8005a5c:	bfb8      	it	lt
 8005a5e:	4618      	movlt	r0, r3
 8005a60:	e7a6      	b.n	80059b0 <_printf_i+0x160>
 8005a62:	2301      	movs	r3, #1
 8005a64:	4632      	mov	r2, r6
 8005a66:	4649      	mov	r1, r9
 8005a68:	4640      	mov	r0, r8
 8005a6a:	47d0      	blx	sl
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	d09d      	beq.n	80059ac <_printf_i+0x15c>
 8005a70:	3501      	adds	r5, #1
 8005a72:	68e3      	ldr	r3, [r4, #12]
 8005a74:	9903      	ldr	r1, [sp, #12]
 8005a76:	1a5b      	subs	r3, r3, r1
 8005a78:	42ab      	cmp	r3, r5
 8005a7a:	dcf2      	bgt.n	8005a62 <_printf_i+0x212>
 8005a7c:	e7eb      	b.n	8005a56 <_printf_i+0x206>
 8005a7e:	2500      	movs	r5, #0
 8005a80:	f104 0619 	add.w	r6, r4, #25
 8005a84:	e7f5      	b.n	8005a72 <_printf_i+0x222>
 8005a86:	bf00      	nop
 8005a88:	08005ee9 	.word	0x08005ee9
 8005a8c:	08005efa 	.word	0x08005efa

08005a90 <__sflush_r>:
 8005a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a98:	0716      	lsls	r6, r2, #28
 8005a9a:	4605      	mov	r5, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	d454      	bmi.n	8005b4a <__sflush_r+0xba>
 8005aa0:	684b      	ldr	r3, [r1, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	dc02      	bgt.n	8005aac <__sflush_r+0x1c>
 8005aa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	dd48      	ble.n	8005b3e <__sflush_r+0xae>
 8005aac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aae:	2e00      	cmp	r6, #0
 8005ab0:	d045      	beq.n	8005b3e <__sflush_r+0xae>
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005ab8:	682f      	ldr	r7, [r5, #0]
 8005aba:	6a21      	ldr	r1, [r4, #32]
 8005abc:	602b      	str	r3, [r5, #0]
 8005abe:	d030      	beq.n	8005b22 <__sflush_r+0x92>
 8005ac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ac2:	89a3      	ldrh	r3, [r4, #12]
 8005ac4:	0759      	lsls	r1, r3, #29
 8005ac6:	d505      	bpl.n	8005ad4 <__sflush_r+0x44>
 8005ac8:	6863      	ldr	r3, [r4, #4]
 8005aca:	1ad2      	subs	r2, r2, r3
 8005acc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005ace:	b10b      	cbz	r3, 8005ad4 <__sflush_r+0x44>
 8005ad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005ad2:	1ad2      	subs	r2, r2, r3
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ad8:	6a21      	ldr	r1, [r4, #32]
 8005ada:	4628      	mov	r0, r5
 8005adc:	47b0      	blx	r6
 8005ade:	1c43      	adds	r3, r0, #1
 8005ae0:	89a3      	ldrh	r3, [r4, #12]
 8005ae2:	d106      	bne.n	8005af2 <__sflush_r+0x62>
 8005ae4:	6829      	ldr	r1, [r5, #0]
 8005ae6:	291d      	cmp	r1, #29
 8005ae8:	d82b      	bhi.n	8005b42 <__sflush_r+0xb2>
 8005aea:	4a2a      	ldr	r2, [pc, #168]	@ (8005b94 <__sflush_r+0x104>)
 8005aec:	410a      	asrs	r2, r1
 8005aee:	07d6      	lsls	r6, r2, #31
 8005af0:	d427      	bmi.n	8005b42 <__sflush_r+0xb2>
 8005af2:	2200      	movs	r2, #0
 8005af4:	6062      	str	r2, [r4, #4]
 8005af6:	04d9      	lsls	r1, r3, #19
 8005af8:	6922      	ldr	r2, [r4, #16]
 8005afa:	6022      	str	r2, [r4, #0]
 8005afc:	d504      	bpl.n	8005b08 <__sflush_r+0x78>
 8005afe:	1c42      	adds	r2, r0, #1
 8005b00:	d101      	bne.n	8005b06 <__sflush_r+0x76>
 8005b02:	682b      	ldr	r3, [r5, #0]
 8005b04:	b903      	cbnz	r3, 8005b08 <__sflush_r+0x78>
 8005b06:	6560      	str	r0, [r4, #84]	@ 0x54
 8005b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b0a:	602f      	str	r7, [r5, #0]
 8005b0c:	b1b9      	cbz	r1, 8005b3e <__sflush_r+0xae>
 8005b0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b12:	4299      	cmp	r1, r3
 8005b14:	d002      	beq.n	8005b1c <__sflush_r+0x8c>
 8005b16:	4628      	mov	r0, r5
 8005b18:	f7ff fbea 	bl	80052f0 <_free_r>
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8005b20:	e00d      	b.n	8005b3e <__sflush_r+0xae>
 8005b22:	2301      	movs	r3, #1
 8005b24:	4628      	mov	r0, r5
 8005b26:	47b0      	blx	r6
 8005b28:	4602      	mov	r2, r0
 8005b2a:	1c50      	adds	r0, r2, #1
 8005b2c:	d1c9      	bne.n	8005ac2 <__sflush_r+0x32>
 8005b2e:	682b      	ldr	r3, [r5, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d0c6      	beq.n	8005ac2 <__sflush_r+0x32>
 8005b34:	2b1d      	cmp	r3, #29
 8005b36:	d001      	beq.n	8005b3c <__sflush_r+0xac>
 8005b38:	2b16      	cmp	r3, #22
 8005b3a:	d11e      	bne.n	8005b7a <__sflush_r+0xea>
 8005b3c:	602f      	str	r7, [r5, #0]
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e022      	b.n	8005b88 <__sflush_r+0xf8>
 8005b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b46:	b21b      	sxth	r3, r3
 8005b48:	e01b      	b.n	8005b82 <__sflush_r+0xf2>
 8005b4a:	690f      	ldr	r7, [r1, #16]
 8005b4c:	2f00      	cmp	r7, #0
 8005b4e:	d0f6      	beq.n	8005b3e <__sflush_r+0xae>
 8005b50:	0793      	lsls	r3, r2, #30
 8005b52:	680e      	ldr	r6, [r1, #0]
 8005b54:	bf08      	it	eq
 8005b56:	694b      	ldreq	r3, [r1, #20]
 8005b58:	600f      	str	r7, [r1, #0]
 8005b5a:	bf18      	it	ne
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	eba6 0807 	sub.w	r8, r6, r7
 8005b62:	608b      	str	r3, [r1, #8]
 8005b64:	f1b8 0f00 	cmp.w	r8, #0
 8005b68:	dde9      	ble.n	8005b3e <__sflush_r+0xae>
 8005b6a:	6a21      	ldr	r1, [r4, #32]
 8005b6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b6e:	4643      	mov	r3, r8
 8005b70:	463a      	mov	r2, r7
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b0      	blx	r6
 8005b76:	2800      	cmp	r0, #0
 8005b78:	dc08      	bgt.n	8005b8c <__sflush_r+0xfc>
 8005b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b82:	81a3      	strh	r3, [r4, #12]
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b8c:	4407      	add	r7, r0
 8005b8e:	eba8 0800 	sub.w	r8, r8, r0
 8005b92:	e7e7      	b.n	8005b64 <__sflush_r+0xd4>
 8005b94:	dfbffffe 	.word	0xdfbffffe

08005b98 <_fflush_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	690b      	ldr	r3, [r1, #16]
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	b913      	cbnz	r3, 8005ba8 <_fflush_r+0x10>
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	b118      	cbz	r0, 8005bb2 <_fflush_r+0x1a>
 8005baa:	6a03      	ldr	r3, [r0, #32]
 8005bac:	b90b      	cbnz	r3, 8005bb2 <_fflush_r+0x1a>
 8005bae:	f7ff f9db 	bl	8004f68 <__sinit>
 8005bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d0f3      	beq.n	8005ba2 <_fflush_r+0xa>
 8005bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005bbc:	07d0      	lsls	r0, r2, #31
 8005bbe:	d404      	bmi.n	8005bca <_fflush_r+0x32>
 8005bc0:	0599      	lsls	r1, r3, #22
 8005bc2:	d402      	bmi.n	8005bca <_fflush_r+0x32>
 8005bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bc6:	f7ff fb90 	bl	80052ea <__retarget_lock_acquire_recursive>
 8005bca:	4628      	mov	r0, r5
 8005bcc:	4621      	mov	r1, r4
 8005bce:	f7ff ff5f 	bl	8005a90 <__sflush_r>
 8005bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bd4:	07da      	lsls	r2, r3, #31
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	d4e4      	bmi.n	8005ba4 <_fflush_r+0xc>
 8005bda:	89a3      	ldrh	r3, [r4, #12]
 8005bdc:	059b      	lsls	r3, r3, #22
 8005bde:	d4e1      	bmi.n	8005ba4 <_fflush_r+0xc>
 8005be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005be2:	f7ff fb83 	bl	80052ec <__retarget_lock_release_recursive>
 8005be6:	e7dd      	b.n	8005ba4 <_fflush_r+0xc>

08005be8 <__swhatbuf_r>:
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	460c      	mov	r4, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	2900      	cmp	r1, #0
 8005bf2:	b096      	sub	sp, #88	@ 0x58
 8005bf4:	4615      	mov	r5, r2
 8005bf6:	461e      	mov	r6, r3
 8005bf8:	da0d      	bge.n	8005c16 <__swhatbuf_r+0x2e>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005c00:	f04f 0100 	mov.w	r1, #0
 8005c04:	bf14      	ite	ne
 8005c06:	2340      	movne	r3, #64	@ 0x40
 8005c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	6031      	str	r1, [r6, #0]
 8005c10:	602b      	str	r3, [r5, #0]
 8005c12:	b016      	add	sp, #88	@ 0x58
 8005c14:	bd70      	pop	{r4, r5, r6, pc}
 8005c16:	466a      	mov	r2, sp
 8005c18:	f000 f8dc 	bl	8005dd4 <_fstat_r>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	dbec      	blt.n	8005bfa <__swhatbuf_r+0x12>
 8005c20:	9901      	ldr	r1, [sp, #4]
 8005c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005c2a:	4259      	negs	r1, r3
 8005c2c:	4159      	adcs	r1, r3
 8005c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005c32:	e7eb      	b.n	8005c0c <__swhatbuf_r+0x24>

08005c34 <__smakebuf_r>:
 8005c34:	898b      	ldrh	r3, [r1, #12]
 8005c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c38:	079d      	lsls	r5, r3, #30
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	d507      	bpl.n	8005c50 <__smakebuf_r+0x1c>
 8005c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c44:	6023      	str	r3, [r4, #0]
 8005c46:	6123      	str	r3, [r4, #16]
 8005c48:	2301      	movs	r3, #1
 8005c4a:	6163      	str	r3, [r4, #20]
 8005c4c:	b003      	add	sp, #12
 8005c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c50:	ab01      	add	r3, sp, #4
 8005c52:	466a      	mov	r2, sp
 8005c54:	f7ff ffc8 	bl	8005be8 <__swhatbuf_r>
 8005c58:	9f00      	ldr	r7, [sp, #0]
 8005c5a:	4605      	mov	r5, r0
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	4630      	mov	r0, r6
 8005c60:	f7ff fbba 	bl	80053d8 <_malloc_r>
 8005c64:	b948      	cbnz	r0, 8005c7a <__smakebuf_r+0x46>
 8005c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c6a:	059a      	lsls	r2, r3, #22
 8005c6c:	d4ee      	bmi.n	8005c4c <__smakebuf_r+0x18>
 8005c6e:	f023 0303 	bic.w	r3, r3, #3
 8005c72:	f043 0302 	orr.w	r3, r3, #2
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	e7e2      	b.n	8005c40 <__smakebuf_r+0xc>
 8005c7a:	89a3      	ldrh	r3, [r4, #12]
 8005c7c:	6020      	str	r0, [r4, #0]
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c82:	81a3      	strh	r3, [r4, #12]
 8005c84:	9b01      	ldr	r3, [sp, #4]
 8005c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c8a:	b15b      	cbz	r3, 8005ca4 <__smakebuf_r+0x70>
 8005c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c90:	4630      	mov	r0, r6
 8005c92:	f000 f8b1 	bl	8005df8 <_isatty_r>
 8005c96:	b128      	cbz	r0, 8005ca4 <__smakebuf_r+0x70>
 8005c98:	89a3      	ldrh	r3, [r4, #12]
 8005c9a:	f023 0303 	bic.w	r3, r3, #3
 8005c9e:	f043 0301 	orr.w	r3, r3, #1
 8005ca2:	81a3      	strh	r3, [r4, #12]
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	431d      	orrs	r5, r3
 8005ca8:	81a5      	strh	r5, [r4, #12]
 8005caa:	e7cf      	b.n	8005c4c <__smakebuf_r+0x18>

08005cac <__swbuf_r>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	460e      	mov	r6, r1
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	4605      	mov	r5, r0
 8005cb4:	b118      	cbz	r0, 8005cbe <__swbuf_r+0x12>
 8005cb6:	6a03      	ldr	r3, [r0, #32]
 8005cb8:	b90b      	cbnz	r3, 8005cbe <__swbuf_r+0x12>
 8005cba:	f7ff f955 	bl	8004f68 <__sinit>
 8005cbe:	69a3      	ldr	r3, [r4, #24]
 8005cc0:	60a3      	str	r3, [r4, #8]
 8005cc2:	89a3      	ldrh	r3, [r4, #12]
 8005cc4:	071a      	lsls	r2, r3, #28
 8005cc6:	d501      	bpl.n	8005ccc <__swbuf_r+0x20>
 8005cc8:	6923      	ldr	r3, [r4, #16]
 8005cca:	b943      	cbnz	r3, 8005cde <__swbuf_r+0x32>
 8005ccc:	4621      	mov	r1, r4
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 f82a 	bl	8005d28 <__swsetup_r>
 8005cd4:	b118      	cbz	r0, 8005cde <__swbuf_r+0x32>
 8005cd6:	f04f 37ff 	mov.w	r7, #4294967295
 8005cda:	4638      	mov	r0, r7
 8005cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	6922      	ldr	r2, [r4, #16]
 8005ce2:	1a98      	subs	r0, r3, r2
 8005ce4:	6963      	ldr	r3, [r4, #20]
 8005ce6:	b2f6      	uxtb	r6, r6
 8005ce8:	4283      	cmp	r3, r0
 8005cea:	4637      	mov	r7, r6
 8005cec:	dc05      	bgt.n	8005cfa <__swbuf_r+0x4e>
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f7ff ff51 	bl	8005b98 <_fflush_r>
 8005cf6:	2800      	cmp	r0, #0
 8005cf8:	d1ed      	bne.n	8005cd6 <__swbuf_r+0x2a>
 8005cfa:	68a3      	ldr	r3, [r4, #8]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	60a3      	str	r3, [r4, #8]
 8005d00:	6823      	ldr	r3, [r4, #0]
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	6022      	str	r2, [r4, #0]
 8005d06:	701e      	strb	r6, [r3, #0]
 8005d08:	6962      	ldr	r2, [r4, #20]
 8005d0a:	1c43      	adds	r3, r0, #1
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d004      	beq.n	8005d1a <__swbuf_r+0x6e>
 8005d10:	89a3      	ldrh	r3, [r4, #12]
 8005d12:	07db      	lsls	r3, r3, #31
 8005d14:	d5e1      	bpl.n	8005cda <__swbuf_r+0x2e>
 8005d16:	2e0a      	cmp	r6, #10
 8005d18:	d1df      	bne.n	8005cda <__swbuf_r+0x2e>
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f7ff ff3b 	bl	8005b98 <_fflush_r>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	d0d9      	beq.n	8005cda <__swbuf_r+0x2e>
 8005d26:	e7d6      	b.n	8005cd6 <__swbuf_r+0x2a>

08005d28 <__swsetup_r>:
 8005d28:	b538      	push	{r3, r4, r5, lr}
 8005d2a:	4b29      	ldr	r3, [pc, #164]	@ (8005dd0 <__swsetup_r+0xa8>)
 8005d2c:	4605      	mov	r5, r0
 8005d2e:	6818      	ldr	r0, [r3, #0]
 8005d30:	460c      	mov	r4, r1
 8005d32:	b118      	cbz	r0, 8005d3c <__swsetup_r+0x14>
 8005d34:	6a03      	ldr	r3, [r0, #32]
 8005d36:	b90b      	cbnz	r3, 8005d3c <__swsetup_r+0x14>
 8005d38:	f7ff f916 	bl	8004f68 <__sinit>
 8005d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d40:	0719      	lsls	r1, r3, #28
 8005d42:	d422      	bmi.n	8005d8a <__swsetup_r+0x62>
 8005d44:	06da      	lsls	r2, r3, #27
 8005d46:	d407      	bmi.n	8005d58 <__swsetup_r+0x30>
 8005d48:	2209      	movs	r2, #9
 8005d4a:	602a      	str	r2, [r5, #0]
 8005d4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d50:	81a3      	strh	r3, [r4, #12]
 8005d52:	f04f 30ff 	mov.w	r0, #4294967295
 8005d56:	e033      	b.n	8005dc0 <__swsetup_r+0x98>
 8005d58:	0758      	lsls	r0, r3, #29
 8005d5a:	d512      	bpl.n	8005d82 <__swsetup_r+0x5a>
 8005d5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d5e:	b141      	cbz	r1, 8005d72 <__swsetup_r+0x4a>
 8005d60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d002      	beq.n	8005d6e <__swsetup_r+0x46>
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7ff fac1 	bl	80052f0 <_free_r>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d72:	89a3      	ldrh	r3, [r4, #12]
 8005d74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d78:	81a3      	strh	r3, [r4, #12]
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	6063      	str	r3, [r4, #4]
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	6023      	str	r3, [r4, #0]
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	f043 0308 	orr.w	r3, r3, #8
 8005d88:	81a3      	strh	r3, [r4, #12]
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	b94b      	cbnz	r3, 8005da2 <__swsetup_r+0x7a>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d98:	d003      	beq.n	8005da2 <__swsetup_r+0x7a>
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	f7ff ff49 	bl	8005c34 <__smakebuf_r>
 8005da2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005da6:	f013 0201 	ands.w	r2, r3, #1
 8005daa:	d00a      	beq.n	8005dc2 <__swsetup_r+0x9a>
 8005dac:	2200      	movs	r2, #0
 8005dae:	60a2      	str	r2, [r4, #8]
 8005db0:	6962      	ldr	r2, [r4, #20]
 8005db2:	4252      	negs	r2, r2
 8005db4:	61a2      	str	r2, [r4, #24]
 8005db6:	6922      	ldr	r2, [r4, #16]
 8005db8:	b942      	cbnz	r2, 8005dcc <__swsetup_r+0xa4>
 8005dba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dbe:	d1c5      	bne.n	8005d4c <__swsetup_r+0x24>
 8005dc0:	bd38      	pop	{r3, r4, r5, pc}
 8005dc2:	0799      	lsls	r1, r3, #30
 8005dc4:	bf58      	it	pl
 8005dc6:	6962      	ldrpl	r2, [r4, #20]
 8005dc8:	60a2      	str	r2, [r4, #8]
 8005dca:	e7f4      	b.n	8005db6 <__swsetup_r+0x8e>
 8005dcc:	2000      	movs	r0, #0
 8005dce:	e7f7      	b.n	8005dc0 <__swsetup_r+0x98>
 8005dd0:	20000018 	.word	0x20000018

08005dd4 <_fstat_r>:
 8005dd4:	b538      	push	{r3, r4, r5, lr}
 8005dd6:	4d07      	ldr	r5, [pc, #28]	@ (8005df4 <_fstat_r+0x20>)
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4604      	mov	r4, r0
 8005ddc:	4608      	mov	r0, r1
 8005dde:	4611      	mov	r1, r2
 8005de0:	602b      	str	r3, [r5, #0]
 8005de2:	f7fa ff22 	bl	8000c2a <_fstat>
 8005de6:	1c43      	adds	r3, r0, #1
 8005de8:	d102      	bne.n	8005df0 <_fstat_r+0x1c>
 8005dea:	682b      	ldr	r3, [r5, #0]
 8005dec:	b103      	cbz	r3, 8005df0 <_fstat_r+0x1c>
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	bd38      	pop	{r3, r4, r5, pc}
 8005df2:	bf00      	nop
 8005df4:	20000378 	.word	0x20000378

08005df8 <_isatty_r>:
 8005df8:	b538      	push	{r3, r4, r5, lr}
 8005dfa:	4d06      	ldr	r5, [pc, #24]	@ (8005e14 <_isatty_r+0x1c>)
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	4604      	mov	r4, r0
 8005e00:	4608      	mov	r0, r1
 8005e02:	602b      	str	r3, [r5, #0]
 8005e04:	f7fa ff21 	bl	8000c4a <_isatty>
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d102      	bne.n	8005e12 <_isatty_r+0x1a>
 8005e0c:	682b      	ldr	r3, [r5, #0]
 8005e0e:	b103      	cbz	r3, 8005e12 <_isatty_r+0x1a>
 8005e10:	6023      	str	r3, [r4, #0]
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	20000378 	.word	0x20000378

08005e18 <_sbrk_r>:
 8005e18:	b538      	push	{r3, r4, r5, lr}
 8005e1a:	4d06      	ldr	r5, [pc, #24]	@ (8005e34 <_sbrk_r+0x1c>)
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	4604      	mov	r4, r0
 8005e20:	4608      	mov	r0, r1
 8005e22:	602b      	str	r3, [r5, #0]
 8005e24:	f7fa ff2a 	bl	8000c7c <_sbrk>
 8005e28:	1c43      	adds	r3, r0, #1
 8005e2a:	d102      	bne.n	8005e32 <_sbrk_r+0x1a>
 8005e2c:	682b      	ldr	r3, [r5, #0]
 8005e2e:	b103      	cbz	r3, 8005e32 <_sbrk_r+0x1a>
 8005e30:	6023      	str	r3, [r4, #0]
 8005e32:	bd38      	pop	{r3, r4, r5, pc}
 8005e34:	20000378 	.word	0x20000378

08005e38 <_init>:
 8005e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e3a:	bf00      	nop
 8005e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e3e:	bc08      	pop	{r3}
 8005e40:	469e      	mov	lr, r3
 8005e42:	4770      	bx	lr

08005e44 <_fini>:
 8005e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e46:	bf00      	nop
 8005e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e4a:	bc08      	pop	{r3}
 8005e4c:	469e      	mov	lr, r3
 8005e4e:	4770      	bx	lr
