
F3_ADC_CanReaderWriter_1Mbps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08005e1c  08005e1c  00006e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed8  08005ed8  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed8  08005ed8  00006ed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ee0  08005ee0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ee0  08005ee0  00006ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ee4  08005ee4  00006ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005ee8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000320  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000388  20000388  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e2ff  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002069  00000000  00000000  00015397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00017400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087f  00000000  00000000  00017f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6f0  00000000  00000000  00018797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e4f3  00000000  00000000  00034e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a695b  00000000  00000000  0004337a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e9cd5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003564  00000000  00000000  000e9d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000097  00000000  00000000  000ed27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005e04 	.word	0x08005e04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005e04 	.word	0x08005e04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_CAN_RxFifo0MsgPendingCallback>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	@ 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,RxData)==HAL_OK){
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	f107 0214 	add.w	r2, r7, #20
 8000280:	2100      	movs	r1, #0
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f001 ffb0 	bl	80021e8 <HAL_CAN_GetRxMessage>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14e      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
		id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d101      	bne.n	8000298 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	e000      	b.n	800029a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	4a26      	ldr	r2, [pc, #152]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800029c:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC;// DLC
 800029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002a0:	4a25      	ldr	r2, [pc, #148]	@ (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80002a2:	6013      	str	r3, [r2, #0]
		CanId[0]=(id&0xF00)>>8;
 80002a4:	4b23      	ldr	r3, [pc, #140]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b22      	ldr	r3, [pc, #136]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002b4:	701a      	strb	r2, [r3, #0]
		CanId[1]=(id&0x0F0)>>4;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	091b      	lsrs	r3, r3, #4
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b1d      	ldr	r3, [pc, #116]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002c6:	705a      	strb	r2, [r3, #1]
		CanId[2]=(id&0x00F);
 80002c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002d6:	709a      	strb	r2, [r3, #2]
		if((myId[0]==CanId[0])&&(myId[1]==CanId[1])&&(myId[2]==CanId[2])){
 80002d8:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4b17      	ldr	r3, [pc, #92]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d123      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 80002e4:	4b16      	ldr	r3, [pc, #88]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80002e6:	785a      	ldrb	r2, [r3, #1]
 80002e8:	4b14      	ldr	r3, [pc, #80]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002ea:	785b      	ldrb	r3, [r3, #1]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d11d      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 80002f0:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80002f2:	789a      	ldrb	r2, [r3, #2]
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002f6:	789b      	ldrb	r3, [r3, #2]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d117      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			data[0] = RxData[0];                                                    // Data
 80002fc:	7b3a      	ldrb	r2, [r7, #12]
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000300:	701a      	strb	r2, [r3, #0]
			data[1] = RxData[1];
 8000302:	7b7a      	ldrb	r2, [r7, #13]
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000306:	705a      	strb	r2, [r3, #1]
			data[2] = RxData[2];
 8000308:	7bba      	ldrb	r2, [r7, #14]
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800030c:	709a      	strb	r2, [r3, #2]
			data[3] = RxData[3];
 800030e:	7bfa      	ldrb	r2, [r7, #15]
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000312:	70da      	strb	r2, [r3, #3]
			data[4] = RxData[4];
 8000314:	7c3a      	ldrb	r2, [r7, #16]
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000318:	711a      	strb	r2, [r3, #4]
			data[5] = RxData[5];
 800031a:	7c7a      	ldrb	r2, [r7, #17]
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800031e:	715a      	strb	r2, [r3, #5]
			data[6] = RxData[6];
 8000320:	7cba      	ldrb	r2, [r7, #18]
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000324:	719a      	strb	r2, [r3, #6]
			data[7] = RxData[7];
 8000326:	7cfa      	ldrb	r2, [r7, #19]
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800032a:	71da      	strb	r2, [r3, #7]
		}
	}
}
 800032c:	bf00      	nop
 800032e:	3730      	adds	r7, #48	@ 0x30
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000214 	.word	0x20000214
 8000338:	20000218 	.word	0x20000218
 800033c:	20000230 	.word	0x20000230
 8000340:	2000022c 	.word	0x2000022c
 8000344:	2000021c 	.word	0x2000021c

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800034c:	b08c      	sub	sp, #48	@ 0x30
 800034e:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */
    setbuf(stdout, NULL);
 8000350:	4b94      	ldr	r3, [pc, #592]	@ (80005a4 <main+0x25c>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f004 fe33 	bl	8004fc4 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 fce5 	bl	8000d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f937 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f000 fa7d 	bl	8000864 <MX_GPIO_Init>
  MX_DMA_Init();
 800036a:	f000 fa5d 	bl	8000828 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800036e:	f000 fa2b 	bl	80007c8 <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000372:	f000 f9f3 	bl	800075c <MX_CAN_Init>
  MX_ADC2_Init();
 8000376:	f000 f969 	bl	800064c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.StdId = 0x401;
 800037a:	4b8b      	ldr	r3, [pc, #556]	@ (80005a8 <main+0x260>)
 800037c:	f240 4201 	movw	r2, #1025	@ 0x401
 8000380:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;
 8000382:	4b89      	ldr	r3, [pc, #548]	@ (80005a8 <main+0x260>)
 8000384:	2200      	movs	r2, #0
 8000386:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 8000388:	4b87      	ldr	r3, [pc, #540]	@ (80005a8 <main+0x260>)
 800038a:	2200      	movs	r2, #0
 800038c:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 800038e:	4b86      	ldr	r3, [pc, #536]	@ (80005a8 <main+0x260>)
 8000390:	2208      	movs	r2, #8
 8000392:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000394:	4b84      	ldr	r3, [pc, #528]	@ (80005a8 <main+0x260>)
 8000396:	2200      	movs	r2, #0
 8000398:	751a      	strb	r2, [r3, #20]

  filter.FilterIdHigh = 0;
 800039a:	4b84      	ldr	r3, [pc, #528]	@ (80005ac <main+0x264>)
 800039c:	2200      	movs	r2, #0
 800039e:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow = 0;
 80003a0:	4b82      	ldr	r3, [pc, #520]	@ (80005ac <main+0x264>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = 0;
 80003a6:	4b81      	ldr	r3, [pc, #516]	@ (80005ac <main+0x264>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0;
 80003ac:	4b7f      	ldr	r3, [pc, #508]	@ (80005ac <main+0x264>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	60da      	str	r2, [r3, #12]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80003b2:	4b7e      	ldr	r3, [pc, #504]	@ (80005ac <main+0x264>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003b8:	4b7c      	ldr	r3, [pc, #496]	@ (80005ac <main+0x264>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  filter.FilterBank = 0;
 80003be:	4b7b      	ldr	r3, [pc, #492]	@ (80005ac <main+0x264>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80003c4:	4b79      	ldr	r3, [pc, #484]	@ (80005ac <main+0x264>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  filter.SlaveStartFilterBank = 14;
 80003ca:	4b78      	ldr	r3, [pc, #480]	@ (80005ac <main+0x264>)
 80003cc:	220e      	movs	r2, #14
 80003ce:	625a      	str	r2, [r3, #36]	@ 0x24
  filter.FilterActivation = ENABLE;
 80003d0:	4b76      	ldr	r3, [pc, #472]	@ (80005ac <main+0x264>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan,&filter);
 80003d6:	4975      	ldr	r1, [pc, #468]	@ (80005ac <main+0x264>)
 80003d8:	4875      	ldr	r0, [pc, #468]	@ (80005b0 <main+0x268>)
 80003da:	f001 fcf2 	bl	8001dc2 <HAL_CAN_ConfigFilter>

  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80003de:	2102      	movs	r1, #2
 80003e0:	4873      	ldr	r0, [pc, #460]	@ (80005b0 <main+0x268>)
 80003e2:	f002 f823 	bl	800242c <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan);
 80003e6:	4872      	ldr	r0, [pc, #456]	@ (80005b0 <main+0x268>)
 80003e8:	f001 fdb5 	bl	8001f56 <HAL_CAN_Start>

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 80003ec:	2100      	movs	r1, #0
 80003ee:	4871      	ldr	r0, [pc, #452]	@ (80005b4 <main+0x26c>)
 80003f0:	f000 ff8c 	bl	800130c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&result, 4);
 80003f4:	2204      	movs	r2, #4
 80003f6:	4970      	ldr	r1, [pc, #448]	@ (80005b8 <main+0x270>)
 80003f8:	486e      	ldr	r0, [pc, #440]	@ (80005b4 <main+0x26c>)
 80003fa:	f000 fead 	bl	8001158 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(result[3]>2000){
 80003fe:	4b6e      	ldr	r3, [pc, #440]	@ (80005b8 <main+0x270>)
 8000400:	88db      	ldrh	r3, [r3, #6]
 8000402:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000406:	d95b      	bls.n	80004c0 <main+0x178>
		  for(uint8_t i = 0 ; i<3 ; i++){
 8000408:	2300      	movs	r3, #0
 800040a:	73fb      	strb	r3, [r7, #15]
 800040c:	e00c      	b.n	8000428 <main+0xe0>
			  myId[i]=result[i]/256;//0~4095 -> 0~15
 800040e:	7bfb      	ldrb	r3, [r7, #15]
 8000410:	4a69      	ldr	r2, [pc, #420]	@ (80005b8 <main+0x270>)
 8000412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000416:	0a1b      	lsrs	r3, r3, #8
 8000418:	b29a      	uxth	r2, r3
 800041a:	7bfb      	ldrb	r3, [r7, #15]
 800041c:	b2d1      	uxtb	r1, r2
 800041e:	4a67      	ldr	r2, [pc, #412]	@ (80005bc <main+0x274>)
 8000420:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t i = 0 ; i<3 ; i++){
 8000422:	7bfb      	ldrb	r3, [r7, #15]
 8000424:	3301      	adds	r3, #1
 8000426:	73fb      	strb	r3, [r7, #15]
 8000428:	7bfb      	ldrb	r3, [r7, #15]
 800042a:	2b02      	cmp	r3, #2
 800042c:	d9ef      	bls.n	800040e <main+0xc6>
		  }
		  if((myId[0]==0) && (myId[1]==0) && (myId[2]==0)){
 800042e:	4b63      	ldr	r3, [pc, #396]	@ (80005bc <main+0x274>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b00      	cmp	r3, #0
 8000434:	d114      	bne.n	8000460 <main+0x118>
 8000436:	4b61      	ldr	r3, [pc, #388]	@ (80005bc <main+0x274>)
 8000438:	785b      	ldrb	r3, [r3, #1]
 800043a:	2b00      	cmp	r3, #0
 800043c:	d110      	bne.n	8000460 <main+0x118>
 800043e:	4b5f      	ldr	r3, [pc, #380]	@ (80005bc <main+0x274>)
 8000440:	789b      	ldrb	r3, [r3, #2]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d10c      	bne.n	8000460 <main+0x118>
			  for(uint8_t j = 0 ; j<8; j++){
 8000446:	2300      	movs	r3, #0
 8000448:	73bb      	strb	r3, [r7, #14]
 800044a:	e006      	b.n	800045a <main+0x112>
				  data[j]=0;
 800044c:	7bbb      	ldrb	r3, [r7, #14]
 800044e:	4a5c      	ldr	r2, [pc, #368]	@ (80005c0 <main+0x278>)
 8000450:	2100      	movs	r1, #0
 8000452:	54d1      	strb	r1, [r2, r3]
			  for(uint8_t j = 0 ; j<8; j++){
 8000454:	7bbb      	ldrb	r3, [r7, #14]
 8000456:	3301      	adds	r3, #1
 8000458:	73bb      	strb	r3, [r7, #14]
 800045a:	7bbb      	ldrb	r3, [r7, #14]
 800045c:	2b07      	cmp	r3, #7
 800045e:	d9f5      	bls.n	800044c <main+0x104>
			  }
		  }
		  printf("-->[%d%d%d]  %d,%d,%d,%d,%d,%d,%d,%d\r\n",myId[0],myId[1],myId[2],data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
 8000460:	4b56      	ldr	r3, [pc, #344]	@ (80005bc <main+0x274>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	469c      	mov	ip, r3
 8000466:	4b55      	ldr	r3, [pc, #340]	@ (80005bc <main+0x274>)
 8000468:	785b      	ldrb	r3, [r3, #1]
 800046a:	469e      	mov	lr, r3
 800046c:	4b53      	ldr	r3, [pc, #332]	@ (80005bc <main+0x274>)
 800046e:	789b      	ldrb	r3, [r3, #2]
 8000470:	4698      	mov	r8, r3
 8000472:	4b53      	ldr	r3, [pc, #332]	@ (80005c0 <main+0x278>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	461a      	mov	r2, r3
 8000478:	4b51      	ldr	r3, [pc, #324]	@ (80005c0 <main+0x278>)
 800047a:	785b      	ldrb	r3, [r3, #1]
 800047c:	4619      	mov	r1, r3
 800047e:	4b50      	ldr	r3, [pc, #320]	@ (80005c0 <main+0x278>)
 8000480:	789b      	ldrb	r3, [r3, #2]
 8000482:	4618      	mov	r0, r3
 8000484:	4b4e      	ldr	r3, [pc, #312]	@ (80005c0 <main+0x278>)
 8000486:	78db      	ldrb	r3, [r3, #3]
 8000488:	461c      	mov	r4, r3
 800048a:	4b4d      	ldr	r3, [pc, #308]	@ (80005c0 <main+0x278>)
 800048c:	791b      	ldrb	r3, [r3, #4]
 800048e:	461d      	mov	r5, r3
 8000490:	4b4b      	ldr	r3, [pc, #300]	@ (80005c0 <main+0x278>)
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	461e      	mov	r6, r3
 8000496:	4b4a      	ldr	r3, [pc, #296]	@ (80005c0 <main+0x278>)
 8000498:	799b      	ldrb	r3, [r3, #6]
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	4b48      	ldr	r3, [pc, #288]	@ (80005c0 <main+0x278>)
 800049e:	79db      	ldrb	r3, [r3, #7]
 80004a0:	9307      	str	r3, [sp, #28]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	9306      	str	r3, [sp, #24]
 80004a6:	9605      	str	r6, [sp, #20]
 80004a8:	9504      	str	r5, [sp, #16]
 80004aa:	9403      	str	r4, [sp, #12]
 80004ac:	9002      	str	r0, [sp, #8]
 80004ae:	9101      	str	r1, [sp, #4]
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	4643      	mov	r3, r8
 80004b4:	4672      	mov	r2, lr
 80004b6:	4661      	mov	r1, ip
 80004b8:	4842      	ldr	r0, [pc, #264]	@ (80005c4 <main+0x27c>)
 80004ba:	f004 fd71 	bl	8004fa0 <iprintf>
 80004be:	e79e      	b.n	80003fe <main+0xb6>
	  }else{
		  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80004c0:	483b      	ldr	r0, [pc, #236]	@ (80005b0 <main+0x268>)
 80004c2:	f001 fe5c 	bl	800217e <HAL_CAN_GetTxMailboxesFreeLevel>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d03a      	beq.n	8000542 <main+0x1fa>
			  TxHeader.StdId = (myId[0]<<8)|(myId[1]<<4)|(myId[2]);
 80004cc:	4b3b      	ldr	r3, [pc, #236]	@ (80005bc <main+0x274>)
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	021a      	lsls	r2, r3, #8
 80004d2:	4b3a      	ldr	r3, [pc, #232]	@ (80005bc <main+0x274>)
 80004d4:	785b      	ldrb	r3, [r3, #1]
 80004d6:	011b      	lsls	r3, r3, #4
 80004d8:	4313      	orrs	r3, r2
 80004da:	4a38      	ldr	r2, [pc, #224]	@ (80005bc <main+0x274>)
 80004dc:	7892      	ldrb	r2, [r2, #2]
 80004de:	4313      	orrs	r3, r2
 80004e0:	461a      	mov	r2, r3
 80004e2:	4b31      	ldr	r3, [pc, #196]	@ (80005a8 <main+0x260>)
 80004e4:	601a      	str	r2, [r3, #0]
			  TxData[0] = result[0]/16;
 80004e6:	4b34      	ldr	r3, [pc, #208]	@ (80005b8 <main+0x270>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	091b      	lsrs	r3, r3, #4
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b35      	ldr	r3, [pc, #212]	@ (80005c8 <main+0x280>)
 80004f2:	701a      	strb	r2, [r3, #0]
			  TxData[1] = result[1]/16;
 80004f4:	4b30      	ldr	r3, [pc, #192]	@ (80005b8 <main+0x270>)
 80004f6:	885b      	ldrh	r3, [r3, #2]
 80004f8:	091b      	lsrs	r3, r3, #4
 80004fa:	b29b      	uxth	r3, r3
 80004fc:	b2da      	uxtb	r2, r3
 80004fe:	4b32      	ldr	r3, [pc, #200]	@ (80005c8 <main+0x280>)
 8000500:	705a      	strb	r2, [r3, #1]
			  TxData[2] = result[2]/16;
 8000502:	4b2d      	ldr	r3, [pc, #180]	@ (80005b8 <main+0x270>)
 8000504:	889b      	ldrh	r3, [r3, #4]
 8000506:	091b      	lsrs	r3, r3, #4
 8000508:	b29b      	uxth	r3, r3
 800050a:	b2da      	uxtb	r2, r3
 800050c:	4b2e      	ldr	r3, [pc, #184]	@ (80005c8 <main+0x280>)
 800050e:	709a      	strb	r2, [r3, #2]
			  TxData[3] = result[3]/16;
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <main+0x270>)
 8000512:	88db      	ldrh	r3, [r3, #6]
 8000514:	091b      	lsrs	r3, r3, #4
 8000516:	b29b      	uxth	r3, r3
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <main+0x280>)
 800051c:	70da      	strb	r2, [r3, #3]
			  TxData[4] = 0;
 800051e:	4b2a      	ldr	r3, [pc, #168]	@ (80005c8 <main+0x280>)
 8000520:	2200      	movs	r2, #0
 8000522:	711a      	strb	r2, [r3, #4]
			  TxData[5] = 0;
 8000524:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <main+0x280>)
 8000526:	2200      	movs	r2, #0
 8000528:	715a      	strb	r2, [r3, #5]
			  TxData[6] = 0;
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <main+0x280>)
 800052c:	2200      	movs	r2, #0
 800052e:	719a      	strb	r2, [r3, #6]
			  TxData[7] = 0;
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <main+0x280>)
 8000532:	2200      	movs	r2, #0
 8000534:	71da      	strb	r2, [r3, #7]
			  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8000536:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <main+0x284>)
 8000538:	4a23      	ldr	r2, [pc, #140]	@ (80005c8 <main+0x280>)
 800053a:	491b      	ldr	r1, [pc, #108]	@ (80005a8 <main+0x260>)
 800053c:	481c      	ldr	r0, [pc, #112]	@ (80005b0 <main+0x268>)
 800053e:	f001 fd4e 	bl	8001fde <HAL_CAN_AddTxMessage>
		  }
		  printf("<--[%d%d%d]  %d,%d,%d,%d,%d,%d,%d,%d\r\n",myId[0],myId[1],myId[2],TxData[0],TxData[1],TxData[2],TxData[3],TxData[4],TxData[5],TxData[6],TxData[7]);
 8000542:	4b1e      	ldr	r3, [pc, #120]	@ (80005bc <main+0x274>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	469c      	mov	ip, r3
 8000548:	4b1c      	ldr	r3, [pc, #112]	@ (80005bc <main+0x274>)
 800054a:	785b      	ldrb	r3, [r3, #1]
 800054c:	469e      	mov	lr, r3
 800054e:	4b1b      	ldr	r3, [pc, #108]	@ (80005bc <main+0x274>)
 8000550:	789b      	ldrb	r3, [r3, #2]
 8000552:	4698      	mov	r8, r3
 8000554:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <main+0x280>)
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <main+0x280>)
 800055c:	785b      	ldrb	r3, [r3, #1]
 800055e:	4619      	mov	r1, r3
 8000560:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <main+0x280>)
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	4618      	mov	r0, r3
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <main+0x280>)
 8000568:	78db      	ldrb	r3, [r3, #3]
 800056a:	461c      	mov	r4, r3
 800056c:	4b16      	ldr	r3, [pc, #88]	@ (80005c8 <main+0x280>)
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	461d      	mov	r5, r3
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <main+0x280>)
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	461e      	mov	r6, r3
 8000578:	4b13      	ldr	r3, [pc, #76]	@ (80005c8 <main+0x280>)
 800057a:	799b      	ldrb	r3, [r3, #6]
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <main+0x280>)
 8000580:	79db      	ldrb	r3, [r3, #7]
 8000582:	9307      	str	r3, [sp, #28]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	9306      	str	r3, [sp, #24]
 8000588:	9605      	str	r6, [sp, #20]
 800058a:	9504      	str	r5, [sp, #16]
 800058c:	9403      	str	r4, [sp, #12]
 800058e:	9002      	str	r0, [sp, #8]
 8000590:	9101      	str	r1, [sp, #4]
 8000592:	9200      	str	r2, [sp, #0]
 8000594:	4643      	mov	r3, r8
 8000596:	4672      	mov	r2, lr
 8000598:	4661      	mov	r1, ip
 800059a:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <main+0x288>)
 800059c:	f004 fd00 	bl	8004fa0 <iprintf>
	  if(result[3]>2000){
 80005a0:	e72d      	b.n	80003fe <main+0xb6>
 80005a2:	bf00      	nop
 80005a4:	20000018 	.word	0x20000018
 80005a8:	200001c8 	.word	0x200001c8
 80005ac:	200001ec 	.word	0x200001ec
 80005b0:	20000118 	.word	0x20000118
 80005b4:	20000084 	.word	0x20000084
 80005b8:	20000224 	.word	0x20000224
 80005bc:	2000022c 	.word	0x2000022c
 80005c0:	2000021c 	.word	0x2000021c
 80005c4:	08005e1c 	.word	0x08005e1c
 80005c8:	200001e4 	.word	0x200001e4
 80005cc:	200001e0 	.word	0x200001e0
 80005d0:	08005e44 	.word	0x08005e44

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b090      	sub	sp, #64	@ 0x40
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	2228      	movs	r2, #40	@ 0x28
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fded 	bl	80051c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f6:	2302      	movs	r3, #2
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005fa:	2301      	movs	r3, #1
 80005fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fe:	2310      	movs	r3, #16
 8000600:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000602:	2300      	movs	r3, #0
 8000604:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f107 0318 	add.w	r3, r7, #24
 800060a:	4618      	mov	r0, r3
 800060c:	f002 fd7e 	bl	800310c <HAL_RCC_OscConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000616:	f000 f95d 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061a:	230f      	movs	r3, #15
 800061c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061e:	2300      	movs	r3, #0
 8000620:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fda8 	bl	8004188 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800063e:	f000 f949 	bl	80008d4 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3740      	adds	r7, #64	@ 0x40
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b086      	sub	sp, #24
 8000650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]
 8000660:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000662:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000664:	4a3c      	ldr	r2, [pc, #240]	@ (8000758 <MX_ADC2_Init+0x10c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000668:	4b3a      	ldr	r3, [pc, #232]	@ (8000754 <MX_ADC2_Init+0x108>)
 800066a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800066e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b38      	ldr	r3, [pc, #224]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000676:	4b37      	ldr	r3, [pc, #220]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000678:	2201      	movs	r2, #1
 800067a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800067c:	4b35      	ldr	r3, [pc, #212]	@ (8000754 <MX_ADC2_Init+0x108>)
 800067e:	2201      	movs	r2, #1
 8000680:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b34      	ldr	r3, [pc, #208]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <MX_ADC2_Init+0x108>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000690:	4b30      	ldr	r3, [pc, #192]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000692:	2201      	movs	r2, #1
 8000694:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800069c:	4b2d      	ldr	r3, [pc, #180]	@ (8000754 <MX_ADC2_Init+0x108>)
 800069e:	2204      	movs	r2, #4
 80006a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80006a2:	4b2c      	ldr	r3, [pc, #176]	@ (8000754 <MX_ADC2_Init+0x108>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <MX_ADC2_Init+0x108>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006b0:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <MX_ADC2_Init+0x108>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <MX_ADC2_Init+0x108>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006bc:	4825      	ldr	r0, [pc, #148]	@ (8000754 <MX_ADC2_Init+0x108>)
 80006be:	f000 fbb9 	bl	8000e34 <HAL_ADC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80006c8:	f000 f904 	bl	80008d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006cc:	2304      	movs	r3, #4
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d0:	2301      	movs	r3, #1
 80006d2:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80006d8:	2305      	movs	r3, #5
 80006da:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4619      	mov	r1, r3
 80006e8:	481a      	ldr	r0, [pc, #104]	@ (8000754 <MX_ADC2_Init+0x108>)
 80006ea:	f000 fe81 	bl	80013f0 <HAL_ADC_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80006f4:	f000 f8ee 	bl	80008d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006f8:	2303      	movs	r3, #3
 80006fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	4619      	mov	r1, r3
 8000704:	4813      	ldr	r0, [pc, #76]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000706:	f000 fe73 	bl	80013f0 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000710:	f000 f8e0 	bl	80008d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000714:	2302      	movs	r3, #2
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000718:	2303      	movs	r3, #3
 800071a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800071c:	463b      	mov	r3, r7
 800071e:	4619      	mov	r1, r3
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <MX_ADC2_Init+0x108>)
 8000722:	f000 fe65 	bl	80013f0 <HAL_ADC_ConfigChannel>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800072c:	f000 f8d2 	bl	80008d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000730:	2301      	movs	r3, #1
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000734:	2304      	movs	r3, #4
 8000736:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_ADC2_Init+0x108>)
 800073e:	f000 fe57 	bl	80013f0 <HAL_ADC_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8000748:	f000 f8c4 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000084 	.word	0x20000084
 8000758:	50000100 	.word	0x50000100

0800075c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_CAN_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_CAN_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_CAN_Init+0x64>)
 8000768:	2201      	movs	r2, #1
 800076a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800076c:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_CAN_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000772:	4b13      	ldr	r3, [pc, #76]	@ (80007c0 <MX_CAN_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000778:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_CAN_Init+0x64>)
 800077a:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 800077e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_CAN_Init+0x64>)
 8000782:	2200      	movs	r2, #0
 8000784:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_CAN_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_CAN_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <MX_CAN_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_CAN_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	@ (80007c0 <MX_CAN_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_CAN_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <MX_CAN_Init+0x64>)
 80007ac:	f001 fa0e 	bl	8001bcc <HAL_CAN_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f000 f88d 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000118 	.word	0x20000118
 80007c4:	40006400 	.word	0x40006400

080007c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007cc:	4b14      	ldr	r3, [pc, #80]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	@ (8000824 <MX_USART2_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	@ (8000820 <MX_USART2_UART_Init+0x58>)
 800080c:	f003 fedc 	bl	80045c8 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f85d 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000140 	.word	0x20000140
 8000824:	40004400 	.word	0x40004400

08000828 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800082e:	4b0c      	ldr	r3, [pc, #48]	@ (8000860 <MX_DMA_Init+0x38>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	4a0b      	ldr	r2, [pc, #44]	@ (8000860 <MX_DMA_Init+0x38>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6153      	str	r3, [r2, #20]
 800083a:	4b09      	ldr	r3, [pc, #36]	@ (8000860 <MX_DMA_Init+0x38>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000846:	2200      	movs	r2, #0
 8000848:	2100      	movs	r1, #0
 800084a:	200c      	movs	r0, #12
 800084c:	f002 f91f 	bl	8002a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000850:	200c      	movs	r0, #12
 8000852:	f002 f938 	bl	8002ac6 <HAL_NVIC_EnableIRQ>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b480      	push	{r7}
 8000866:	b083      	sub	sp, #12
 8000868:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_GPIO_Init+0x44>)
 800086c:	695b      	ldr	r3, [r3, #20]
 800086e:	4a0e      	ldr	r2, [pc, #56]	@ (80008a8 <MX_GPIO_Init+0x44>)
 8000870:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000874:	6153      	str	r3, [r2, #20]
 8000876:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_GPIO_Init+0x44>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_GPIO_Init+0x44>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <MX_GPIO_Init+0x44>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_GPIO_Init+0x44>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000

080008ac <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	60b9      	str	r1, [r7, #8]
 80008b6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	230a      	movs	r3, #10
 80008be:	68b9      	ldr	r1, [r7, #8]
 80008c0:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <_write+0x24>)
 80008c2:	f003 fecf 	bl	8004664 <HAL_UART_Transmit>
  return len;
 80008c6:	687b      	ldr	r3, [r7, #4]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000140 	.word	0x20000140

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	699b      	ldr	r3, [r3, #24]
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6193      	str	r3, [r2, #24]
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a29      	ldr	r2, [pc, #164]	@ (80009ec <HAL_ADC_MspInit+0xc4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d14c      	bne.n	80009e4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800094a:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <HAL_ADC_MspInit+0xc8>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a28      	ldr	r2, [pc, #160]	@ (80009f0 <HAL_ADC_MspInit+0xc8>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <HAL_ADC_MspInit+0xc8>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	613b      	str	r3, [r7, #16]
 8000960:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <HAL_ADC_MspInit+0xc8>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a22      	ldr	r2, [pc, #136]	@ (80009f0 <HAL_ADC_MspInit+0xc8>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <HAL_ADC_MspInit+0xc8>)
 8000970:	695b      	ldr	r3, [r3, #20]
 8000972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800097a:	23f0      	movs	r3, #240	@ 0xf0
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800097e:	2303      	movs	r3, #3
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000990:	f002 fa4a 	bl	8002e28 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8000994:	4b17      	ldr	r3, [pc, #92]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 8000996:	4a18      	ldr	r2, [pc, #96]	@ (80009f8 <HAL_ADC_MspInit+0xd0>)
 8000998:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800099a:	4b16      	ldr	r3, [pc, #88]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b14      	ldr	r3, [pc, #80]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b13      	ldr	r3, [pc, #76]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009ac:	4b11      	ldr	r3, [pc, #68]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80009bc:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009be:	2220      	movs	r2, #32
 80009c0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80009c8:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009ca:	f002 f896 	bl	8002afa <HAL_DMA_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80009d4:	f7ff ff7e 	bl	80008d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a06      	ldr	r2, [pc, #24]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80009de:	4a05      	ldr	r2, [pc, #20]	@ (80009f4 <HAL_ADC_MspInit+0xcc>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80009e4:	bf00      	nop
 80009e6:	3728      	adds	r7, #40	@ 0x28
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	50000100 	.word	0x50000100
 80009f0:	40021000 	.word	0x40021000
 80009f4:	200000d4 	.word	0x200000d4
 80009f8:	4002001c 	.word	0x4002001c

080009fc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	@ 0x28
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a1c      	ldr	r2, [pc, #112]	@ (8000a8c <HAL_CAN_MspInit+0x90>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d131      	bne.n	8000a82 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a90 <HAL_CAN_MspInit+0x94>)
 8000a20:	69db      	ldr	r3, [r3, #28]
 8000a22:	4a1b      	ldr	r2, [pc, #108]	@ (8000a90 <HAL_CAN_MspInit+0x94>)
 8000a24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a28:	61d3      	str	r3, [r2, #28]
 8000a2a:	4b19      	ldr	r3, [pc, #100]	@ (8000a90 <HAL_CAN_MspInit+0x94>)
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_CAN_MspInit+0x94>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <HAL_CAN_MspInit+0x94>)
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a40:	6153      	str	r3, [r2, #20]
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_CAN_MspInit+0x94>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a4e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000a60:	2309      	movs	r3, #9
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a6e:	f002 f9db 	bl	8002e28 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2014      	movs	r0, #20
 8000a78:	f002 f809 	bl	8002a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000a7c:	2014      	movs	r0, #20
 8000a7e:	f002 f822 	bl	8002ac6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40006400 	.word	0x40006400
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b08a      	sub	sp, #40	@ 0x28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a18      	ldr	r2, [pc, #96]	@ (8000b14 <HAL_UART_MspInit+0x80>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d129      	bne.n	8000b0a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a17      	ldr	r2, [pc, #92]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000abc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	4a11      	ldr	r2, [pc, #68]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	6153      	str	r3, [r2, #20]
 8000ada:	4b0f      	ldr	r3, [pc, #60]	@ (8000b18 <HAL_UART_MspInit+0x84>)
 8000adc:	695b      	ldr	r3, [r3, #20]
 8000ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000ae6:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af4:	2303      	movs	r3, #3
 8000af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af8:	2307      	movs	r3, #7
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b06:	f002 f98f 	bl	8002e28 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b0a:	bf00      	nop
 8000b0c:	3728      	adds	r7, #40	@ 0x28
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40004400 	.word	0x40004400
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b72:	f000 f921 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <DMA1_Channel2_IRQHandler+0x10>)
 8000b82:	f002 f860 	bl	8002c46 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000d4 	.word	0x200000d4

08000b90 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <CAN_RX0_IRQHandler+0x10>)
 8000b96:	f001 fc6f 	bl	8002478 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000118 	.word	0x20000118

08000ba4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	e00a      	b.n	8000bcc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bb6:	f3af 8000 	nop.w
 8000bba:	4601      	mov	r1, r0
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	60ba      	str	r2, [r7, #8]
 8000bc2:	b2ca      	uxtb	r2, r1
 8000bc4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3301      	adds	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbf0      	blt.n	8000bb6 <_read+0x12>
  }

  return len;
 8000bd4:	687b      	ldr	r3, [r7, #4]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr

08000bf6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	b083      	sub	sp, #12
 8000bfa:	af00      	add	r7, sp, #0
 8000bfc:	6078      	str	r0, [r7, #4]
 8000bfe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c06:	605a      	str	r2, [r3, #4]
  return 0;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <_isatty>:

int _isatty(int file)
{
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c1e:	2301      	movs	r3, #1
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3714      	adds	r7, #20
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
	...

08000c48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c50:	4a14      	ldr	r2, [pc, #80]	@ (8000ca4 <_sbrk+0x5c>)
 8000c52:	4b15      	ldr	r3, [pc, #84]	@ (8000ca8 <_sbrk+0x60>)
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c5c:	4b13      	ldr	r3, [pc, #76]	@ (8000cac <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d102      	bne.n	8000c6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c64:	4b11      	ldr	r3, [pc, #68]	@ (8000cac <_sbrk+0x64>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	@ (8000cb0 <_sbrk+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d207      	bcs.n	8000c88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c78:	f004 faf2 	bl	8005260 <__errno>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	220c      	movs	r2, #12
 8000c80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c82:	f04f 33ff 	mov.w	r3, #4294967295
 8000c86:	e009      	b.n	8000c9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c8e:	4b07      	ldr	r3, [pc, #28]	@ (8000cac <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	4a05      	ldr	r2, [pc, #20]	@ (8000cac <_sbrk+0x64>)
 8000c98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20003000 	.word	0x20003000
 8000ca8:	00000400 	.word	0x00000400
 8000cac:	20000234 	.word	0x20000234
 8000cb0:	20000388 	.word	0x20000388

08000cb4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	@ (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d10 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cdc:	f7ff ffea 	bl	8000cb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce0:	480c      	ldr	r0, [pc, #48]	@ (8000d14 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce2:	490d      	ldr	r1, [pc, #52]	@ (8000d18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d1c <LoopForever+0xe>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d24 <LoopForever+0x16>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d06:	f004 fab1 	bl	800526c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0a:	f7ff fb1d 	bl	8000348 <main>

08000d0e <LoopForever>:

LoopForever:
    b LoopForever
 8000d0e:	e7fe      	b.n	8000d0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d10:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d1c:	08005ee8 	.word	0x08005ee8
  ldr r2, =_sbss
 8000d20:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d24:	20000388 	.word	0x20000388

08000d28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC1_2_IRQHandler>
	...

08000d2c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x28>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x28>)
 8000d36:	f043 0310 	orr.w	r3, r3, #16
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f001 fe9b 	bl	8002a78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff fdca 	bl	80008e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40022000 	.word	0x40022000

08000d58 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f001 feb3 	bl	8002ae2 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f001 fe7b 	bl	8002a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	20000238 	.word	0x20000238

08000de0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000238 	.word	0x20000238

08000df8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b09a      	sub	sp, #104	@ 0x68
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d101      	bne.n	8000e54 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e172      	b.n	800113a <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	691b      	ldr	r3, [r3, #16]
 8000e58:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5e:	f003 0310 	and.w	r3, r3, #16
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d176      	bne.n	8000f54 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d152      	bne.n	8000f14 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2200      	movs	r2, #0
 8000e72:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f7ff fd4d 	bl	8000928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d13b      	bne.n	8000f14 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fe2f 	bl	8001b00 <ADC_Disable>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d12f      	bne.n	8000f14 <HAL_ADC_Init+0xe0>
 8000eb4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d12b      	bne.n	8000f14 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ec4:	f023 0302 	bic.w	r3, r3, #2
 8000ec8:	f043 0202 	orr.w	r2, r3, #2
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ede:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	689a      	ldr	r2, [r3, #8]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000eee:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ef0:	4b94      	ldr	r3, [pc, #592]	@ (8001144 <HAL_ADC_Init+0x310>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a94      	ldr	r2, [pc, #592]	@ (8001148 <HAL_ADC_Init+0x314>)
 8000ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8000efa:	0c9a      	lsrs	r2, r3, #18
 8000efc:	4613      	mov	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f06:	e002      	b.n	8000f0e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1f9      	bne.n	8000f08 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d007      	beq.n	8000f32 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f30:	d110      	bne.n	8000f54 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f023 0312 	bic.w	r3, r3, #18
 8000f3a:	f043 0210 	orr.w	r2, r3, #16
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	f043 0201 	orr.w	r2, r3, #1
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 0310 	and.w	r3, r3, #16
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f040 80df 	bne.w	8001120 <HAL_ADC_Init+0x2ec>
 8000f62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 80da 	bne.w	8001120 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 80d2 	bne.w	8001120 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000f84:	f043 0202 	orr.w	r2, r3, #2
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f8c:	4b6f      	ldr	r3, [pc, #444]	@ (800114c <HAL_ADC_Init+0x318>)
 8000f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f98:	d102      	bne.n	8000fa0 <HAL_ADC_Init+0x16c>
 8000f9a:	4b6d      	ldr	r3, [pc, #436]	@ (8001150 <HAL_ADC_Init+0x31c>)
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	e002      	b.n	8000fa6 <HAL_ADC_Init+0x172>
 8000fa0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000fa4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f003 0303 	and.w	r3, r3, #3
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d108      	bne.n	8000fc6 <HAL_ADC_Init+0x192>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Init+0x192>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <HAL_ADC_Init+0x194>
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d11c      	bne.n	8001006 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d010      	beq.n	8000ff4 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d107      	bne.n	8000fee <HAL_ADC_Init+0x1ba>
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x1ba>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_ADC_Init+0x1bc>
 8000fee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d108      	bne.n	8001006 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ff4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	431a      	orrs	r2, r3
 8001002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001004:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7e5b      	ldrb	r3, [r3, #25]
 800100a:	035b      	lsls	r3, r3, #13
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001010:	2a01      	cmp	r2, #1
 8001012:	d002      	beq.n	800101a <HAL_ADC_Init+0x1e6>
 8001014:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001018:	e000      	b.n	800101c <HAL_ADC_Init+0x1e8>
 800101a:	2200      	movs	r2, #0
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	4313      	orrs	r3, r2
 800102a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800102c:	4313      	orrs	r3, r2
 800102e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d11b      	bne.n	8001072 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7e5b      	ldrb	r3, [r3, #25]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	3b01      	subs	r3, #1
 8001048:	045a      	lsls	r2, r3, #17
 800104a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800104c:	4313      	orrs	r3, r2
 800104e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001052:	663b      	str	r3, [r7, #96]	@ 0x60
 8001054:	e00d      	b.n	8001072 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800105a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800105e:	f043 0220 	orr.w	r2, r3, #32
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	f043 0201 	orr.w	r2, r3, #1
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001076:	2b01      	cmp	r3, #1
 8001078:	d007      	beq.n	800108a <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001082:	4313      	orrs	r3, r2
 8001084:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001086:	4313      	orrs	r3, r2
 8001088:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 030c 	and.w	r3, r3, #12
 8001094:	2b00      	cmp	r3, #0
 8001096:	d114      	bne.n	80010c2 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	6812      	ldr	r2, [r2, #0]
 80010a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010a6:	f023 0302 	bic.w	r3, r3, #2
 80010aa:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	7e1b      	ldrb	r3, [r3, #24]
 80010b0:	039a      	lsls	r2, r3, #14
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4313      	orrs	r3, r2
 80010bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010be:	4313      	orrs	r3, r2
 80010c0:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	4b22      	ldr	r3, [pc, #136]	@ (8001154 <HAL_ADC_Init+0x320>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80010d2:	430b      	orrs	r3, r1
 80010d4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10c      	bne.n	80010f8 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e4:	f023 010f 	bic.w	r1, r3, #15
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69db      	ldr	r3, [r3, #28]
 80010ec:	1e5a      	subs	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f6:	e007      	b.n	8001108 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 020f 	bic.w	r2, r2, #15
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	@ 0x40
 800111e:	e00a      	b.n	8001136 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f023 0312 	bic.w	r3, r3, #18
 8001128:	f043 0210 	orr.w	r2, r3, #16
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001130:	2301      	movs	r3, #1
 8001132:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001136:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800113a:	4618      	mov	r0, r3
 800113c:	3768      	adds	r7, #104	@ 0x68
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000000 	.word	0x20000000
 8001148:	431bde83 	.word	0x431bde83
 800114c:	50000300 	.word	0x50000300
 8001150:	50000100 	.word	0x50000100
 8001154:	fff0c007 	.word	0xfff0c007

08001158 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 80b9 	bne.w	80012ea <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Start_DMA+0x2e>
 8001182:	2302      	movs	r3, #2
 8001184:	e0b4      	b.n	80012f0 <HAL_ADC_Start_DMA+0x198>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800118e:	4b5a      	ldr	r3, [pc, #360]	@ (80012f8 <HAL_ADC_Start_DMA+0x1a0>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 031f 	and.w	r3, r3, #31
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 80a0 	bne.w	80012dc <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f000 fc4b 	bl	8001a38 <ADC_Enable>
 80011a2:	4603      	mov	r3, r0
 80011a4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011a6:	7dfb      	ldrb	r3, [r7, #23]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f040 8092 	bne.w	80012d2 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011c2:	4b4d      	ldr	r3, [pc, #308]	@ (80012f8 <HAL_ADC_Start_DMA+0x1a0>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_ADC_Start_DMA+0x80>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011d6:	d115      	bne.n	8001204 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d027      	beq.n	8001242 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80011fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001202:	e01e      	b.n	8001242 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001208:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001218:	d004      	beq.n	8001224 <HAL_ADC_Start_DMA+0xcc>
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a37      	ldr	r2, [pc, #220]	@ (80012fc <HAL_ADC_Start_DMA+0x1a4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d10e      	bne.n	8001242 <HAL_ADC_Start_DMA+0xea>
 8001224:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001228:	68db      	ldr	r3, [r3, #12]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800123a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800124a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800124e:	d106      	bne.n	800125e <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001254:	f023 0206 	bic.w	r2, r3, #6
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	645a      	str	r2, [r3, #68]	@ 0x44
 800125c:	e002      	b.n	8001264 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2200      	movs	r2, #0
 8001262:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001270:	4a23      	ldr	r2, [pc, #140]	@ (8001300 <HAL_ADC_Start_DMA+0x1a8>)
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001278:	4a22      	ldr	r2, [pc, #136]	@ (8001304 <HAL_ADC_Start_DMA+0x1ac>)
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <HAL_ADC_Start_DMA+0x1b0>)
 8001282:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	221c      	movs	r2, #28
 800128a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0210 	orr.w	r2, r2, #16
 800129a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	68da      	ldr	r2, [r3, #12]
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3340      	adds	r3, #64	@ 0x40
 80012b6:	4619      	mov	r1, r3
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f001 fc64 	bl	8002b88 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	689a      	ldr	r2, [r3, #8]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f042 0204 	orr.w	r2, r2, #4
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	e00d      	b.n	80012ee <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80012da:	e008      	b.n	80012ee <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80012e8:	e001      	b.n	80012ee <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012ea:	2302      	movs	r3, #2
 80012ec:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	50000300 	.word	0x50000300
 80012fc:	50000100 	.word	0x50000100
 8001300:	0800196d 	.word	0x0800196d
 8001304:	080019e7 	.word	0x080019e7
 8001308:	08001a03 	.word	0x08001a03

0800130c <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_ADCEx_Calibration_Start+0x1c>
 8001324:	2302      	movs	r3, #2
 8001326:	e05f      	b.n	80013e8 <HAL_ADCEx_Calibration_Start+0xdc>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 fbe5 	bl	8001b00 <ADC_Disable>
 8001336:	4603      	mov	r3, r0
 8001338:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d14e      	bne.n	80013de <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8001354:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d107      	bne.n	800136c <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800136a:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800137a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800137c:	f7ff fd30 	bl	8000de0 <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001382:	e01c      	b.n	80013be <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001384:	f7ff fd2c 	bl	8000de0 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b0a      	cmp	r3, #10
 8001390:	d915      	bls.n	80013be <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800139c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013a0:	d10d      	bne.n	80013be <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f023 0312 	bic.w	r3, r3, #18
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e014      	b.n	80013e8 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80013c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80013cc:	d0da      	beq.n	8001384 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f023 0303 	bic.w	r3, r3, #3
 80013d6:	f043 0201 	orr.w	r2, r3, #1
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b09b      	sub	sp, #108	@ 0x6c
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800140a:	2b01      	cmp	r3, #1
 800140c:	d101      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x22>
 800140e:	2302      	movs	r3, #2
 8001410:	e2a1      	b.n	8001956 <HAL_ADC_ConfigChannel+0x566>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	f040 8285 	bne.w	8001934 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	2b04      	cmp	r3, #4
 8001430:	d81c      	bhi.n	800146c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	4613      	mov	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4413      	add	r3, r2
 8001442:	005b      	lsls	r3, r3, #1
 8001444:	461a      	mov	r2, r3
 8001446:	231f      	movs	r3, #31
 8001448:	4093      	lsls	r3, r2
 800144a:	43db      	mvns	r3, r3
 800144c:	4019      	ands	r1, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	6818      	ldr	r0, [r3, #0]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685a      	ldr	r2, [r3, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	fa00 f203 	lsl.w	r2, r0, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	631a      	str	r2, [r3, #48]	@ 0x30
 800146a:	e063      	b.n	8001534 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b09      	cmp	r3, #9
 8001472:	d81e      	bhi.n	80014b2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	3b1e      	subs	r3, #30
 8001488:	221f      	movs	r2, #31
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	4019      	ands	r1, r3
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	6818      	ldr	r0, [r3, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	4613      	mov	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	3b1e      	subs	r3, #30
 80014a4:	fa00 f203 	lsl.w	r2, r0, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80014b0:	e040      	b.n	8001534 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b0e      	cmp	r3, #14
 80014b8:	d81e      	bhi.n	80014f8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	3b3c      	subs	r3, #60	@ 0x3c
 80014ce:	221f      	movs	r2, #31
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	4019      	ands	r1, r3
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	3b3c      	subs	r3, #60	@ 0x3c
 80014ea:	fa00 f203 	lsl.w	r2, r0, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	430a      	orrs	r2, r1
 80014f4:	639a      	str	r2, [r3, #56]	@ 0x38
 80014f6:	e01d      	b.n	8001534 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	3b5a      	subs	r3, #90	@ 0x5a
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	4019      	ands	r1, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	4413      	add	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	3b5a      	subs	r3, #90	@ 0x5a
 8001528:	fa00 f203 	lsl.w	r2, r0, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	430a      	orrs	r2, r1
 8001532:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f003 030c 	and.w	r3, r3, #12
 800153e:	2b00      	cmp	r3, #0
 8001540:	f040 80e5 	bne.w	800170e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b09      	cmp	r3, #9
 800154a:	d91c      	bls.n	8001586 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6999      	ldr	r1, [r3, #24]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	3b1e      	subs	r3, #30
 800155e:	2207      	movs	r2, #7
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	43db      	mvns	r3, r3
 8001566:	4019      	ands	r1, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	6898      	ldr	r0, [r3, #8]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	4413      	add	r3, r2
 8001576:	3b1e      	subs	r3, #30
 8001578:	fa00 f203 	lsl.w	r2, r0, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	430a      	orrs	r2, r1
 8001582:	619a      	str	r2, [r3, #24]
 8001584:	e019      	b.n	80015ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	6959      	ldr	r1, [r3, #20]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	2207      	movs	r2, #7
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4019      	ands	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6898      	ldr	r0, [r3, #8]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	fa00 f203 	lsl.w	r2, r0, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	430a      	orrs	r2, r1
 80015b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	695a      	ldr	r2, [r3, #20]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	08db      	lsrs	r3, r3, #3
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d84f      	bhi.n	800167c <HAL_ADC_ConfigChannel+0x28c>
 80015dc:	a201      	add	r2, pc, #4	@ (adr r2, 80015e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80015de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e2:	bf00      	nop
 80015e4:	080015f5 	.word	0x080015f5
 80015e8:	08001617 	.word	0x08001617
 80015ec:	08001639 	.word	0x08001639
 80015f0:	0800165b 	.word	0x0800165b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015fa:	4b9c      	ldr	r3, [pc, #624]	@ (800186c <HAL_ADC_ConfigChannel+0x47c>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	6812      	ldr	r2, [r2, #0]
 8001602:	0691      	lsls	r1, r2, #26
 8001604:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001606:	430a      	orrs	r2, r1
 8001608:	431a      	orrs	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001612:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001614:	e07b      	b.n	800170e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800161c:	4b93      	ldr	r3, [pc, #588]	@ (800186c <HAL_ADC_ConfigChannel+0x47c>)
 800161e:	4013      	ands	r3, r2
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	0691      	lsls	r1, r2, #26
 8001626:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001628:	430a      	orrs	r2, r1
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001634:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001636:	e06a      	b.n	800170e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800163e:	4b8b      	ldr	r3, [pc, #556]	@ (800186c <HAL_ADC_ConfigChannel+0x47c>)
 8001640:	4013      	ands	r3, r2
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	6812      	ldr	r2, [r2, #0]
 8001646:	0691      	lsls	r1, r2, #26
 8001648:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800164a:	430a      	orrs	r2, r1
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001656:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001658:	e059      	b.n	800170e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001660:	4b82      	ldr	r3, [pc, #520]	@ (800186c <HAL_ADC_ConfigChannel+0x47c>)
 8001662:	4013      	ands	r3, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	6812      	ldr	r2, [r2, #0]
 8001668:	0691      	lsls	r1, r2, #26
 800166a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800166c:	430a      	orrs	r2, r1
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001678:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800167a:	e048      	b.n	800170e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001682:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	069b      	lsls	r3, r3, #26
 800168c:	429a      	cmp	r2, r3
 800168e:	d107      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800169e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	069b      	lsls	r3, r3, #26
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d107      	bne.n	80016c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016c2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	069b      	lsls	r3, r3, #26
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d107      	bne.n	80016e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016e6:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	069b      	lsls	r3, r3, #26
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d107      	bne.n	800170c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800170a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800170c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f003 0303 	and.w	r3, r3, #3
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <HAL_ADC_ConfigChannel+0x33e>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_ADC_ConfigChannel+0x33e>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_ADC_ConfigChannel+0x340>
 800172e:	2300      	movs	r3, #0
 8001730:	2b00      	cmp	r3, #0
 8001732:	f040 810a 	bne.w	800194a <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d00f      	beq.n	800175e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2201      	movs	r2, #1
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800175c:	e049      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	409a      	lsls	r2, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b09      	cmp	r3, #9
 800177e:	d91c      	bls.n	80017ba <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6999      	ldr	r1, [r3, #24]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	3b1b      	subs	r3, #27
 8001792:	2207      	movs	r2, #7
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	4019      	ands	r1, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	6898      	ldr	r0, [r3, #8]
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	3b1b      	subs	r3, #27
 80017ac:	fa00 f203 	lsl.w	r2, r0, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	619a      	str	r2, [r3, #24]
 80017b8:	e01b      	b.n	80017f2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6959      	ldr	r1, [r3, #20]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	4613      	mov	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	4413      	add	r3, r2
 80017cc:	2207      	movs	r2, #7
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	4019      	ands	r1, r3
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	6898      	ldr	r0, [r3, #8]
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	fa00 f203 	lsl.w	r2, r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	430a      	orrs	r2, r1
 80017f0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001870 <HAL_ADC_ConfigChannel+0x480>)
 80017f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b10      	cmp	r3, #16
 80017fc:	d105      	bne.n	800180a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001806:	2b00      	cmp	r3, #0
 8001808:	d015      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800180e:	2b11      	cmp	r3, #17
 8001810:	d105      	bne.n	800181e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00b      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001822:	2b12      	cmp	r3, #18
 8001824:	f040 8091 	bne.w	800194a <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001830:	2b00      	cmp	r3, #0
 8001832:	f040 808a 	bne.w	800194a <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800183e:	d102      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x456>
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_ADC_ConfigChannel+0x484>)
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e002      	b.n	800184c <HAL_ADC_ConfigChannel+0x45c>
 8001846:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800184a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b01      	cmp	r3, #1
 8001858:	d10e      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x488>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d107      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x488>
 8001868:	2301      	movs	r3, #1
 800186a:	e006      	b.n	800187a <HAL_ADC_ConfigChannel+0x48a>
 800186c:	83fff000 	.word	0x83fff000
 8001870:	50000300 	.word	0x50000300
 8001874:	50000100 	.word	0x50000100
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d150      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800187e:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001880:	2b00      	cmp	r3, #0
 8001882:	d010      	beq.n	80018a6 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d107      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x4b0>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x4b0>
 800189c:	2301      	movs	r3, #1
 800189e:	e000      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x4b2>
 80018a0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d13c      	bne.n	8001920 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b10      	cmp	r3, #16
 80018ac:	d11d      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x4fa>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018b6:	d118      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018c2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018c4:	4b27      	ldr	r3, [pc, #156]	@ (8001964 <HAL_ADC_ConfigChannel+0x574>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a27      	ldr	r2, [pc, #156]	@ (8001968 <HAL_ADC_ConfigChannel+0x578>)
 80018ca:	fba2 2303 	umull	r2, r3, r2, r3
 80018ce:	0c9a      	lsrs	r2, r3, #18
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018da:	e002      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	3b01      	subs	r3, #1
 80018e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1f9      	bne.n	80018dc <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018e8:	e02e      	b.n	8001948 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b11      	cmp	r3, #17
 80018f0:	d10b      	bne.n	800190a <HAL_ADC_ConfigChannel+0x51a>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018fa:	d106      	bne.n	800190a <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001904:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001906:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001908:	e01e      	b.n	8001948 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2b12      	cmp	r3, #18
 8001910:	d11a      	bne.n	8001948 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800191a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800191c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800191e:	e013      	b.n	8001948 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f043 0220 	orr.w	r2, r3, #32
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001932:	e00a      	b.n	800194a <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001938:	f043 0220 	orr.w	r2, r3, #32
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001946:	e000      	b.n	800194a <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001948:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001952:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001956:	4618      	mov	r0, r3
 8001958:	376c      	adds	r7, #108	@ 0x6c
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	20000000 	.word	0x20000000
 8001968:	431bde83 	.word	0x431bde83

0800196c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001978:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001982:	2b00      	cmp	r3, #0
 8001984:	d126      	bne.n	80019d4 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800199c:	2b00      	cmp	r3, #0
 800199e:	d115      	bne.n	80019cc <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d111      	bne.n	80019cc <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d105      	bne.n	80019cc <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	f043 0201 	orr.w	r2, r3, #1
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80019cc:	68f8      	ldr	r0, [r7, #12]
 80019ce:	f7ff fa13 	bl	8000df8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80019d2:	e004      	b.n	80019de <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4798      	blx	r3
}
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b084      	sub	sp, #16
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7ff fa09 	bl	8000e0c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80019fa:	bf00      	nop
 80019fc:	3710      	adds	r7, #16
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a20:	f043 0204 	orr.w	r2, r3, #4
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	f7ff f9f9 	bl	8000e20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <ADC_Enable+0x2c>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <ADC_Enable+0x2c>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <ADC_Enable+0x2e>
 8001a64:	2300      	movs	r3, #0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d143      	bne.n	8001af2 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	4b22      	ldr	r3, [pc, #136]	@ (8001afc <ADC_Enable+0xc4>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00d      	beq.n	8001a94 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7c:	f043 0210 	orr.w	r2, r3, #16
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a88:	f043 0201 	orr.w	r2, r3, #1
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e02f      	b.n	8001af4 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001aa4:	f7ff f99c 	bl	8000de0 <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aaa:	e01b      	b.n	8001ae4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001aac:	f7ff f998 	bl	8000de0 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d914      	bls.n	8001ae4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0301 	and.w	r3, r3, #1
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d00d      	beq.n	8001ae4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001acc:	f043 0210 	orr.w	r2, r3, #16
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad8:	f043 0201 	orr.w	r2, r3, #1
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e007      	b.n	8001af4 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d1dc      	bne.n	8001aac <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3710      	adds	r7, #16
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	8000003f 	.word	0x8000003f

08001b00 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 0303 	and.w	r3, r3, #3
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d108      	bne.n	8001b2c <ADC_Disable+0x2c>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <ADC_Disable+0x2c>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <ADC_Disable+0x2e>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d047      	beq.n	8001bc2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030d 	and.w	r3, r3, #13
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d10f      	bne.n	8001b60 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0202 	orr.w	r2, r2, #2
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2203      	movs	r2, #3
 8001b56:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001b58:	f7ff f942 	bl	8000de0 <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b5e:	e029      	b.n	8001bb4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f043 0210 	orr.w	r2, r3, #16
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b70:	f043 0201 	orr.w	r2, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e023      	b.n	8001bc4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b7c:	f7ff f930 	bl	8000de0 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d914      	bls.n	8001bb4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d10d      	bne.n	8001bb4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f043 0210 	orr.w	r2, r3, #16
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba8:	f043 0201 	orr.w	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e007      	b.n	8001bc4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d0dc      	beq.n	8001b7c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0ed      	b.n	8001dba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7fe ff06 	bl	80009fc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c00:	f7ff f8ee 	bl	8000de0 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c06:	e012      	b.n	8001c2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c08:	f7ff f8ea 	bl	8000de0 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b0a      	cmp	r3, #10
 8001c14:	d90b      	bls.n	8001c2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2205      	movs	r2, #5
 8001c26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e0c5      	b.n	8001dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0e5      	beq.n	8001c08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0202 	bic.w	r2, r2, #2
 8001c4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c4c:	f7ff f8c8 	bl	8000de0 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c52:	e012      	b.n	8001c7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c54:	f7ff f8c4 	bl	8000de0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b0a      	cmp	r3, #10
 8001c60:	d90b      	bls.n	8001c7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2205      	movs	r2, #5
 8001c72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e09f      	b.n	8001dba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e5      	bne.n	8001c54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	7e1b      	ldrb	r3, [r3, #24]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d108      	bne.n	8001ca2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e007      	b.n	8001cb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	7e5b      	ldrb	r3, [r3, #25]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d108      	bne.n	8001ccc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	e007      	b.n	8001cdc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	681a      	ldr	r2, [r3, #0]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001cda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	7e9b      	ldrb	r3, [r3, #26]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d108      	bne.n	8001cf6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0220 	orr.w	r2, r2, #32
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	e007      	b.n	8001d06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f022 0220 	bic.w	r2, r2, #32
 8001d04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	7edb      	ldrb	r3, [r3, #27]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d108      	bne.n	8001d20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0210 	bic.w	r2, r2, #16
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	e007      	b.n	8001d30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0210 	orr.w	r2, r2, #16
 8001d2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	7f1b      	ldrb	r3, [r3, #28]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d108      	bne.n	8001d4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0208 	orr.w	r2, r2, #8
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	e007      	b.n	8001d5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 0208 	bic.w	r2, r2, #8
 8001d58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7f5b      	ldrb	r3, [r3, #29]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d108      	bne.n	8001d74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f042 0204 	orr.w	r2, r2, #4
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e007      	b.n	8001d84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0204 	bic.w	r2, r2, #4
 8001d82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	ea42 0103 	orr.w	r1, r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	1e5a      	subs	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b087      	sub	sp, #28
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001dda:	7cfb      	ldrb	r3, [r7, #19]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d003      	beq.n	8001de8 <HAL_CAN_ConfigFilter+0x26>
 8001de0:	7cfb      	ldrb	r3, [r7, #19]
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	f040 80aa 	bne.w	8001f3c <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	2201      	movs	r2, #1
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	401a      	ands	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d123      	bne.n	8001e6a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	401a      	ands	r2, r3
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e44:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3248      	adds	r2, #72	@ 0x48
 8001e4a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e5e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001e60:	6979      	ldr	r1, [r7, #20]
 8001e62:	3348      	adds	r3, #72	@ 0x48
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	440b      	add	r3, r1
 8001e68:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d122      	bne.n	8001eb8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001e92:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3248      	adds	r2, #72	@ 0x48
 8001e98:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001eac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eae:	6979      	ldr	r1, [r7, #20]
 8001eb0:	3348      	adds	r3, #72	@ 0x48
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	440b      	add	r3, r1
 8001eb6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d109      	bne.n	8001ed4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001ed2:	e007      	b.n	8001ee4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001efe:	e007      	b.n	8001f10 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d107      	bne.n	8001f28 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001f2e:	f023 0201 	bic.w	r2, r3, #1
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e006      	b.n	8001f4a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	371c      	adds	r7, #28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d12e      	bne.n	8001fc8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 0201 	bic.w	r2, r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001f82:	f7fe ff2d 	bl	8000de0 <HAL_GetTick>
 8001f86:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001f88:	e012      	b.n	8001fb0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001f8a:	f7fe ff29 	bl	8000de0 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b0a      	cmp	r3, #10
 8001f96:	d90b      	bls.n	8001fb0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e012      	b.n	8001fd6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1e5      	bne.n	8001f8a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e006      	b.n	8001fd6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
  }
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b089      	sub	sp, #36	@ 0x24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	60f8      	str	r0, [r7, #12]
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ffc:	7ffb      	ldrb	r3, [r7, #31]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d003      	beq.n	800200a <HAL_CAN_AddTxMessage+0x2c>
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b02      	cmp	r3, #2
 8002006:	f040 80ad 	bne.w	8002164 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10a      	bne.n	800202a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800201a:	2b00      	cmp	r3, #0
 800201c:	d105      	bne.n	800202a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 8095 	beq.w	8002154 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	0e1b      	lsrs	r3, r3, #24
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002034:	2201      	movs	r2, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	409a      	lsls	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	6809      	ldr	r1, [r1, #0]
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3318      	adds	r3, #24
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	440b      	add	r3, r1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e00f      	b.n	8002082 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800206c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002076:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3318      	adds	r3, #24
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	440b      	add	r3, r1
 8002080:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3318      	adds	r3, #24
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	440b      	add	r3, r1
 8002092:	3304      	adds	r3, #4
 8002094:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	7d1b      	ldrb	r3, [r3, #20]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d111      	bne.n	80020c2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3318      	adds	r3, #24
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6811      	ldr	r1, [r2, #0]
 80020b2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3318      	adds	r3, #24
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	440b      	add	r3, r1
 80020be:	3304      	adds	r3, #4
 80020c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3307      	adds	r3, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	061a      	lsls	r2, r3, #24
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3306      	adds	r3, #6
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3305      	adds	r3, #5
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4313      	orrs	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	3204      	adds	r2, #4
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	4610      	mov	r0, r2
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	6811      	ldr	r1, [r2, #0]
 80020ea:	ea43 0200 	orr.w	r2, r3, r0
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80020f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3303      	adds	r3, #3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	061a      	lsls	r2, r3, #24
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3302      	adds	r3, #2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3301      	adds	r3, #1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4313      	orrs	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	4610      	mov	r0, r2
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	6811      	ldr	r1, [r2, #0]
 8002120:	ea43 0200 	orr.w	r2, r3, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	440b      	add	r3, r1
 800212a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800212e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3318      	adds	r3, #24
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	6811      	ldr	r1, [r2, #0]
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3318      	adds	r3, #24
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	440b      	add	r3, r1
 800214e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e00e      	b.n	8002172 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002158:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e006      	b.n	8002172 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d002      	beq.n	800219e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d11d      	bne.n	80021da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3301      	adds	r3, #1
 80021b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	3301      	adds	r3, #1
 80021c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	3301      	adds	r3, #1
 80021d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80021e8:	b480      	push	{r7}
 80021ea:	b087      	sub	sp, #28
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
 80021f4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021fc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80021fe:	7dfb      	ldrb	r3, [r7, #23]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d003      	beq.n	800220c <HAL_CAN_GetRxMessage+0x24>
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b02      	cmp	r3, #2
 8002208:	f040 8103 	bne.w	8002412 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10e      	bne.n	8002230 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d116      	bne.n	800224e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002224:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0f7      	b.n	8002420 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d107      	bne.n	800224e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002242:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e0e8      	b.n	8002420 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	331b      	adds	r3, #27
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	4413      	add	r3, r2
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0204 	and.w	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10c      	bne.n	8002286 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	331b      	adds	r3, #27
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	0d5b      	lsrs	r3, r3, #21
 800227c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	e00b      	b.n	800229e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	331b      	adds	r3, #27
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4413      	add	r3, r2
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	331b      	adds	r3, #27
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	4413      	add	r3, r2
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0202 	and.w	r2, r3, #2
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	331b      	adds	r3, #27
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	4413      	add	r3, r2
 80022c0:	3304      	adds	r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2208      	movs	r2, #8
 80022d0:	611a      	str	r2, [r3, #16]
 80022d2:	e00b      	b.n	80022ec <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	331b      	adds	r3, #27
 80022dc:	011b      	lsls	r3, r3, #4
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 020f 	and.w	r2, r3, #15
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	331b      	adds	r3, #27
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	3304      	adds	r3, #4
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	331b      	adds	r3, #27
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	4413      	add	r3, r2
 8002310:	3304      	adds	r3, #4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	b29a      	uxth	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	4413      	add	r3, r2
 8002326:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	4413      	add	r3, r2
 800233c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	0a1a      	lsrs	r2, r3, #8
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	3301      	adds	r3, #1
 8002348:	b2d2      	uxtb	r2, r2
 800234a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	4413      	add	r3, r2
 8002356:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	0c1a      	lsrs	r2, r3, #16
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	3302      	adds	r3, #2
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	4413      	add	r3, r2
 8002370:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	0e1a      	lsrs	r2, r3, #24
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	3303      	adds	r3, #3
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3304      	adds	r3, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0a1a      	lsrs	r2, r3, #8
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	3305      	adds	r3, #5
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0c1a      	lsrs	r2, r3, #16
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3306      	adds	r3, #6
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0e1a      	lsrs	r2, r3, #24
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3307      	adds	r3, #7
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d108      	bne.n	80023fe <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0220 	orr.w	r2, r2, #32
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	e007      	b.n	800240e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f042 0220 	orr.w	r2, r2, #32
 800240c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e006      	b.n	8002420 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
  }
}
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800243c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d002      	beq.n	800244a <HAL_CAN_ActivateNotification+0x1e>
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d109      	bne.n	800245e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6959      	ldr	r1, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800245a:	2300      	movs	r3, #0
 800245c:	e006      	b.n	800246c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002462:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
  }
}
 800246c:	4618      	mov	r0, r3
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d07c      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d023      	beq.n	8002510 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f983 	bl	80027e6 <HAL_CAN_TxMailbox0CompleteCallback>
 80024e0:	e016      	b.n	8002510 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f4:	e00c      	b.n	8002510 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
 8002508:	e002      	b.n	8002510 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f000 f989 	bl	8002822 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d024      	beq.n	8002564 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002522:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f963 	bl	80027fa <HAL_CAN_TxMailbox1CompleteCallback>
 8002534:	e016      	b.n	8002564 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
 8002548:	e00c      	b.n	8002564 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002550:	2b00      	cmp	r3, #0
 8002552:	d004      	beq.n	800255e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
 800255c:	e002      	b.n	8002564 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f969 	bl	8002836 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d024      	beq.n	80025b8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002576:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f943 	bl	800280e <HAL_CAN_TxMailbox2CompleteCallback>
 8002588:	e016      	b.n	80025b8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d004      	beq.n	800259e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
 800259c:	e00c      	b.n	80025b8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d004      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b0:	e002      	b.n	80025b8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f949 	bl	800284a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00c      	beq.n	80025dc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0310 	and.w	r3, r3, #16
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d007      	beq.n	80025dc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025d2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2210      	movs	r2, #16
 80025da:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 0308 	and.w	r3, r3, #8
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2208      	movs	r2, #8
 80025f6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f930 	bl	800285e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f7fd fe2a 	bl	8000270 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	f003 0310 	and.w	r3, r3, #16
 800262c:	2b00      	cmp	r3, #0
 800262e:	d007      	beq.n	8002640 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002636:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2210      	movs	r2, #16
 800263e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	2b00      	cmp	r3, #0
 8002652:	d006      	beq.n	8002662 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2208      	movs	r2, #8
 800265a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f912 	bl	8002886 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002662:	6a3b      	ldr	r3, [r7, #32]
 8002664:	f003 0310 	and.w	r3, r3, #16
 8002668:	2b00      	cmp	r3, #0
 800266a:	d009      	beq.n	8002680 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f8f9 	bl	8002872 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	f003 0310 	and.w	r3, r3, #16
 8002690:	2b00      	cmp	r3, #0
 8002692:	d006      	beq.n	80026a2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2210      	movs	r2, #16
 800269a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f8fc 	bl	800289a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00b      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d006      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2208      	movs	r2, #8
 80026bc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f8f5 	bl	80028ae <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d07b      	beq.n	80027c6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d072      	beq.n	80027be <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	f043 0302 	orr.w	r3, r3, #2
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002716:	2b00      	cmp	r3, #0
 8002718:	d008      	beq.n	800272c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002726:	f043 0304 	orr.w	r3, r3, #4
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800272c:	6a3b      	ldr	r3, [r7, #32]
 800272e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002732:	2b00      	cmp	r3, #0
 8002734:	d043      	beq.n	80027be <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800273c:	2b00      	cmp	r3, #0
 800273e:	d03e      	beq.n	80027be <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002746:	2b60      	cmp	r3, #96	@ 0x60
 8002748:	d02b      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x32a>
 800274a:	2b60      	cmp	r3, #96	@ 0x60
 800274c:	d82e      	bhi.n	80027ac <HAL_CAN_IRQHandler+0x334>
 800274e:	2b50      	cmp	r3, #80	@ 0x50
 8002750:	d022      	beq.n	8002798 <HAL_CAN_IRQHandler+0x320>
 8002752:	2b50      	cmp	r3, #80	@ 0x50
 8002754:	d82a      	bhi.n	80027ac <HAL_CAN_IRQHandler+0x334>
 8002756:	2b40      	cmp	r3, #64	@ 0x40
 8002758:	d019      	beq.n	800278e <HAL_CAN_IRQHandler+0x316>
 800275a:	2b40      	cmp	r3, #64	@ 0x40
 800275c:	d826      	bhi.n	80027ac <HAL_CAN_IRQHandler+0x334>
 800275e:	2b30      	cmp	r3, #48	@ 0x30
 8002760:	d010      	beq.n	8002784 <HAL_CAN_IRQHandler+0x30c>
 8002762:	2b30      	cmp	r3, #48	@ 0x30
 8002764:	d822      	bhi.n	80027ac <HAL_CAN_IRQHandler+0x334>
 8002766:	2b10      	cmp	r3, #16
 8002768:	d002      	beq.n	8002770 <HAL_CAN_IRQHandler+0x2f8>
 800276a:	2b20      	cmp	r3, #32
 800276c:	d005      	beq.n	800277a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800276e:	e01d      	b.n	80027ac <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	f043 0308 	orr.w	r3, r3, #8
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002778:	e019      	b.n	80027ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	f043 0310 	orr.w	r3, r3, #16
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002782:	e014      	b.n	80027ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	f043 0320 	orr.w	r3, r3, #32
 800278a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800278c:	e00f      	b.n	80027ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002796:	e00a      	b.n	80027ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027a0:	e005      	b.n	80027ae <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027aa:	e000      	b.n	80027ae <HAL_CAN_IRQHandler+0x336>
            break;
 80027ac:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699a      	ldr	r2, [r3, #24]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80027bc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2204      	movs	r2, #4
 80027c4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 f872 	bl	80028c2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027de:	bf00      	nop
 80027e0:	3728      	adds	r7, #40	@ 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002816:	bf00      	nop
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800282a:	bf00      	nop
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002886:	b480      	push	{r7}
 8002888:	b083      	sub	sp, #12
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr

0800289a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	@ (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	@ (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	@ (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a44:	d301      	bcc.n	8002a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00f      	b.n	8002a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a74 <SysTick_Config+0x40>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a52:	210f      	movs	r1, #15
 8002a54:	f04f 30ff 	mov.w	r0, #4294967295
 8002a58:	f7ff ff8e 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a5c:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <SysTick_Config+0x40>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a62:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <SysTick_Config+0x40>)
 8002a64:	2207      	movs	r2, #7
 8002a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	e000e010 	.word	0xe000e010

08002a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff ff29 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b086      	sub	sp, #24
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	4603      	mov	r3, r0
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002aa0:	f7ff ff3e 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	68b9      	ldr	r1, [r7, #8]
 8002aaa:	6978      	ldr	r0, [r7, #20]
 8002aac:	f7ff ff8e 	bl	80029cc <NVIC_EncodePriority>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab6:	4611      	mov	r1, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff5d 	bl	8002978 <__NVIC_SetPriority>
}
 8002abe:	bf00      	nop
 8002ac0:	3718      	adds	r7, #24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	4603      	mov	r3, r0
 8002ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff31 	bl	800293c <__NVIC_EnableIRQ>
}
 8002ada:	bf00      	nop
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff ffa2 	bl	8002a34 <SysTick_Config>
 8002af0:	4603      	mov	r3, r0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b084      	sub	sp, #16
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e037      	b.n	8002b80 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002b26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002b2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f940 	bl	8002de8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
 8002b94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d101      	bne.n	8002ba8 <HAL_DMA_Start_IT+0x20>
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	e04a      	b.n	8002c3e <HAL_DMA_Start_IT+0xb6>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d13a      	bne.n	8002c30 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0201 	bic.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68b9      	ldr	r1, [r7, #8]
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f8d4 	bl	8002d8c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 020e 	orr.w	r2, r2, #14
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e00f      	b.n	8002c1e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 020a 	orr.w	r2, r2, #10
 8002c0c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0204 	bic.w	r2, r2, #4
 8002c1c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	e005      	b.n	8002c3c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b084      	sub	sp, #16
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	2204      	movs	r2, #4
 8002c64:	409a      	lsls	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d024      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x72>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d01f      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0320 	and.w	r3, r3, #32
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d107      	bne.n	8002c96 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0204 	bic.w	r2, r2, #4
 8002c94:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d06a      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002cb6:	e065      	b.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d02c      	beq.n	8002d22 <HAL_DMA_IRQHandler+0xdc>
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d027      	beq.n	8002d22 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10b      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 020a 	bic.w	r2, r2, #10
 8002cee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	2102      	movs	r1, #2
 8002d02:	fa01 f202 	lsl.w	r2, r1, r2
 8002d06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d035      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d20:	e030      	b.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d26:	2208      	movs	r2, #8
 8002d28:	409a      	lsls	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d028      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d023      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 020e 	bic.w	r2, r2, #14
 8002d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d54:	2101      	movs	r1, #1
 8002d56:	fa01 f202 	lsl.w	r2, r1, r2
 8002d5a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d004      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	4798      	blx	r3
    }
  }
}
 8002d82:	e7ff      	b.n	8002d84 <HAL_DMA_IRQHandler+0x13e>
 8002d84:	bf00      	nop
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]
 8002d98:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da2:	2101      	movs	r1, #1
 8002da4:	fa01 f202 	lsl.w	r2, r1, r2
 8002da8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	683a      	ldr	r2, [r7, #0]
 8002db0:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b10      	cmp	r3, #16
 8002db8:	d108      	bne.n	8002dcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dca:	e007      	b.n	8002ddc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68ba      	ldr	r2, [r7, #8]
 8002dd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	60da      	str	r2, [r3, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b09      	ldr	r3, [pc, #36]	@ (8002e1c <DMA_CalcBaseAndBitshift+0x34>)
 8002df8:	4413      	add	r3, r2
 8002dfa:	4a09      	ldr	r2, [pc, #36]	@ (8002e20 <DMA_CalcBaseAndBitshift+0x38>)
 8002dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002e00:	091b      	lsrs	r3, r3, #4
 8002e02:	009a      	lsls	r2, r3, #2
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a06      	ldr	r2, [pc, #24]	@ (8002e24 <DMA_CalcBaseAndBitshift+0x3c>)
 8002e0c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	bffdfff8 	.word	0xbffdfff8
 8002e20:	cccccccd 	.word	0xcccccccd
 8002e24:	40020000 	.word	0x40020000

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b087      	sub	sp, #28
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e32:	2300      	movs	r3, #0
 8002e34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e36:	e14e      	b.n	80030d6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	fa01 f303 	lsl.w	r3, r1, r3
 8002e44:	4013      	ands	r3, r2
 8002e46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 8140 	beq.w	80030d0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f003 0303 	and.w	r3, r3, #3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d005      	beq.n	8002e68 <HAL_GPIO_Init+0x40>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d130      	bne.n	8002eca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	005b      	lsls	r3, r3, #1
 8002e72:	2203      	movs	r2, #3
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	68da      	ldr	r2, [r3, #12]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	091b      	lsrs	r3, r3, #4
 8002eb4:	f003 0201 	and.w	r2, r3, #1
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d017      	beq.n	8002f06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4013      	ands	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	689a      	ldr	r2, [r3, #8]
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d123      	bne.n	8002f5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	08da      	lsrs	r2, r3, #3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3208      	adds	r2, #8
 8002f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	08da      	lsrs	r2, r3, #3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3208      	adds	r2, #8
 8002f54:	6939      	ldr	r1, [r7, #16]
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	2203      	movs	r2, #3
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0203 	and.w	r2, r3, #3
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 809a 	beq.w	80030d0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9c:	4b55      	ldr	r3, [pc, #340]	@ (80030f4 <HAL_GPIO_Init+0x2cc>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	4a54      	ldr	r2, [pc, #336]	@ (80030f4 <HAL_GPIO_Init+0x2cc>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6193      	str	r3, [r2, #24]
 8002fa8:	4b52      	ldr	r3, [pc, #328]	@ (80030f4 <HAL_GPIO_Init+0x2cc>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fb4:	4a50      	ldr	r2, [pc, #320]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	220f      	movs	r2, #15
 8002fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd0:	43db      	mvns	r3, r3
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002fde:	d013      	beq.n	8003008 <HAL_GPIO_Init+0x1e0>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a46      	ldr	r2, [pc, #280]	@ (80030fc <HAL_GPIO_Init+0x2d4>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d00d      	beq.n	8003004 <HAL_GPIO_Init+0x1dc>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a45      	ldr	r2, [pc, #276]	@ (8003100 <HAL_GPIO_Init+0x2d8>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d007      	beq.n	8003000 <HAL_GPIO_Init+0x1d8>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a44      	ldr	r2, [pc, #272]	@ (8003104 <HAL_GPIO_Init+0x2dc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d101      	bne.n	8002ffc <HAL_GPIO_Init+0x1d4>
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e006      	b.n	800300a <HAL_GPIO_Init+0x1e2>
 8002ffc:	2305      	movs	r3, #5
 8002ffe:	e004      	b.n	800300a <HAL_GPIO_Init+0x1e2>
 8003000:	2302      	movs	r3, #2
 8003002:	e002      	b.n	800300a <HAL_GPIO_Init+0x1e2>
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_GPIO_Init+0x1e2>
 8003008:	2300      	movs	r3, #0
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	f002 0203 	and.w	r2, r2, #3
 8003010:	0092      	lsls	r2, r2, #2
 8003012:	4093      	lsls	r3, r2
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800301a:	4937      	ldr	r1, [pc, #220]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	089b      	lsrs	r3, r3, #2
 8003020:	3302      	adds	r3, #2
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003028:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800304c:	4a2e      	ldr	r2, [pc, #184]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003052:	4b2d      	ldr	r3, [pc, #180]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43db      	mvns	r3, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4013      	ands	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003076:	4a24      	ldr	r2, [pc, #144]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800307c:	4b22      	ldr	r3, [pc, #136]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030a0:	4a19      	ldr	r2, [pc, #100]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a6:	4b18      	ldr	r3, [pc, #96]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030ca:	4a0f      	ldr	r2, [pc, #60]	@ (8003108 <HAL_GPIO_Init+0x2e0>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	3301      	adds	r3, #1
 80030d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	fa22 f303 	lsr.w	r3, r2, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f47f aea9 	bne.w	8002e38 <HAL_GPIO_Init+0x10>
  }
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40010000 	.word	0x40010000
 80030fc:	48000400 	.word	0x48000400
 8003100:	48000800 	.word	0x48000800
 8003104:	48000c00 	.word	0x48000c00
 8003108:	40010400 	.word	0x40010400

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8003112:	af00      	add	r7, sp, #0
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800311c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800311e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003122:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d102      	bne.n	8003132 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f001 b823 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003132:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003136:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 817d 	beq.w	8003442 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003148:	4bbc      	ldr	r3, [pc, #752]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f003 030c 	and.w	r3, r3, #12
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00c      	beq.n	800316e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003154:	4bb9      	ldr	r3, [pc, #740]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 030c 	and.w	r3, r3, #12
 800315c:	2b08      	cmp	r3, #8
 800315e:	d15c      	bne.n	800321a <HAL_RCC_OscConfig+0x10e>
 8003160:	4bb6      	ldr	r3, [pc, #728]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316c:	d155      	bne.n	800321a <HAL_RCC_OscConfig+0x10e>
 800316e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003172:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003182:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_OscConfig+0x94>
 800319a:	4ba8      	ldr	r3, [pc, #672]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e015      	b.n	80031cc <HAL_RCC_OscConfig+0xc0>
 80031a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031a4:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80031b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031b8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80031bc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80031c0:	fa93 f3a3 	rbit	r3, r3
 80031c4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80031c8:	4b9c      	ldr	r3, [pc, #624]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031d0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80031d4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80031d8:	fa92 f2a2 	rbit	r2, r2
 80031dc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80031e0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80031e4:	fab2 f282 	clz	r2, r2
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	f042 0220 	orr.w	r2, r2, #32
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	f002 021f 	and.w	r2, r2, #31
 80031f4:	2101      	movs	r1, #1
 80031f6:	fa01 f202 	lsl.w	r2, r1, r2
 80031fa:	4013      	ands	r3, r2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 811f 	beq.w	8003440 <HAL_RCC_OscConfig+0x334>
 8003202:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003206:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 8116 	bne.w	8003440 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	f000 bfaf 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800322a:	d106      	bne.n	800323a <HAL_RCC_OscConfig+0x12e>
 800322c:	4b83      	ldr	r3, [pc, #524]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a82      	ldr	r2, [pc, #520]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003232:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003236:	6013      	str	r3, [r2, #0]
 8003238:	e036      	b.n	80032a8 <HAL_RCC_OscConfig+0x19c>
 800323a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10c      	bne.n	8003264 <HAL_RCC_OscConfig+0x158>
 800324a:	4b7c      	ldr	r3, [pc, #496]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a7b      	ldr	r2, [pc, #492]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	4b79      	ldr	r3, [pc, #484]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a78      	ldr	r2, [pc, #480]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800325c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003260:	6013      	str	r3, [r2, #0]
 8003262:	e021      	b.n	80032a8 <HAL_RCC_OscConfig+0x19c>
 8003264:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003268:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x184>
 8003276:	4b71      	ldr	r3, [pc, #452]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a70      	ldr	r2, [pc, #448]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800327c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b6e      	ldr	r3, [pc, #440]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6d      	ldr	r2, [pc, #436]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0x19c>
 8003290:	4b6a      	ldr	r3, [pc, #424]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a69      	ldr	r2, [pc, #420]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800329a:	6013      	str	r3, [r2, #0]
 800329c:	4b67      	ldr	r3, [pc, #412]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a66      	ldr	r2, [pc, #408]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 80032a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a6:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032a8:	4b64      	ldr	r3, [pc, #400]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 80032aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ac:	f023 020f 	bic.w	r2, r3, #15
 80032b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	495f      	ldr	r1, [pc, #380]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d059      	beq.n	8003386 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd fd85 	bl	8000de0 <HAL_GetTick>
 80032d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fd fd80 	bl	8000de0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	@ 0x64
 80032ea:	d902      	bls.n	80032f2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	f000 bf43 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
 80032f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80032f6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8003306:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800330a:	fab3 f383 	clz	r3, r3
 800330e:	b2db      	uxtb	r3, r3
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f043 0301 	orr.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d102      	bne.n	8003324 <HAL_RCC_OscConfig+0x218>
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	e015      	b.n	8003350 <HAL_RCC_OscConfig+0x244>
 8003324:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003328:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8003330:	fa93 f3a3 	rbit	r3, r3
 8003334:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003338:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800333c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003340:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800334c:	4b3b      	ldr	r3, [pc, #236]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003354:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003358:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800335c:	fa92 f2a2 	rbit	r2, r2
 8003360:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003364:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003368:	fab2 f282 	clz	r2, r2
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	f042 0220 	orr.w	r2, r2, #32
 8003372:	b2d2      	uxtb	r2, r2
 8003374:	f002 021f 	and.w	r2, r2, #31
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f202 	lsl.w	r2, r1, r2
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ab      	beq.n	80032dc <HAL_RCC_OscConfig+0x1d0>
 8003384:	e05d      	b.n	8003442 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003386:	f7fd fd2b 	bl	8000de0 <HAL_GetTick>
 800338a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003390:	f7fd fd26 	bl	8000de0 <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b64      	cmp	r3, #100	@ 0x64
 800339e:	d902      	bls.n	80033a6 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	f000 bee9 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
 80033a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033aa:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ae:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80033ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	095b      	lsrs	r3, r3, #5
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f043 0301 	orr.w	r3, r3, #1
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d102      	bne.n	80033d8 <HAL_RCC_OscConfig+0x2cc>
 80033d2:	4b1a      	ldr	r3, [pc, #104]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	e015      	b.n	8003404 <HAL_RCC_OscConfig+0x2f8>
 80033d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033dc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80033e4:	fa93 f3a3 	rbit	r3, r3
 80033e8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80033ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033f0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80033f4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8003400:	4b0e      	ldr	r3, [pc, #56]	@ (800343c <HAL_RCC_OscConfig+0x330>)
 8003402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003404:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003408:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800340c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003410:	fa92 f2a2 	rbit	r2, r2
 8003414:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003418:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800341c:	fab2 f282 	clz	r2, r2
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	b2d2      	uxtb	r2, r2
 8003428:	f002 021f 	and.w	r2, r2, #31
 800342c:	2101      	movs	r1, #1
 800342e:	fa01 f202 	lsl.w	r2, r1, r2
 8003432:	4013      	ands	r3, r2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1ab      	bne.n	8003390 <HAL_RCC_OscConfig+0x284>
 8003438:	e003      	b.n	8003442 <HAL_RCC_OscConfig+0x336>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003440:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003442:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003446:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 817d 	beq.w	8003752 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003458:	4ba6      	ldr	r3, [pc, #664]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00b      	beq.n	800347c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003464:	4ba3      	ldr	r3, [pc, #652]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d172      	bne.n	8003556 <HAL_RCC_OscConfig+0x44a>
 8003470:	4ba0      	ldr	r3, [pc, #640]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d16c      	bne.n	8003556 <HAL_RCC_OscConfig+0x44a>
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003486:	fa93 f3a3 	rbit	r3, r3
 800348a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800348e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d102      	bne.n	80034ac <HAL_RCC_OscConfig+0x3a0>
 80034a6:	4b93      	ldr	r3, [pc, #588]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	e013      	b.n	80034d4 <HAL_RCC_OscConfig+0x3c8>
 80034ac:	2302      	movs	r3, #2
 80034ae:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80034be:	2302      	movs	r3, #2
 80034c0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80034c4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80034d0:	4b88      	ldr	r3, [pc, #544]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	2202      	movs	r2, #2
 80034d6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80034da:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80034de:	fa92 f2a2 	rbit	r2, r2
 80034e2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80034e6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80034ea:	fab2 f282 	clz	r2, r2
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	f042 0220 	orr.w	r2, r2, #32
 80034f4:	b2d2      	uxtb	r2, r2
 80034f6:	f002 021f 	and.w	r2, r2, #31
 80034fa:	2101      	movs	r1, #1
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCC_OscConfig+0x410>
 8003506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f000 be2e 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b75      	ldr	r3, [pc, #468]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003524:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003528:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	21f8      	movs	r1, #248	@ 0xf8
 8003532:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800353a:	fa91 f1a1 	rbit	r1, r1
 800353e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003542:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003546:	fab1 f181 	clz	r1, r1
 800354a:	b2c9      	uxtb	r1, r1
 800354c:	408b      	lsls	r3, r1
 800354e:	4969      	ldr	r1, [pc, #420]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 8003550:	4313      	orrs	r3, r2
 8003552:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003554:	e0fd      	b.n	8003752 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800355a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 8088 	beq.w	8003678 <HAL_RCC_OscConfig+0x56c>
 8003568:	2301      	movs	r3, #1
 800356a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003572:	fa93 f3a3 	rbit	r3, r3
 8003576:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800357a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003588:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	2301      	movs	r3, #1
 8003592:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fd fc24 	bl	8000de0 <HAL_GetTick>
 8003598:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800359e:	f7fd fc1f 	bl	8000de0 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d902      	bls.n	80035b4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	f000 bde2 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
 80035b4:	2302      	movs	r3, #2
 80035b6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80035be:	fa93 f3a3 	rbit	r3, r3
 80035c2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80035c6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ca:	fab3 f383 	clz	r3, r3
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	f043 0301 	orr.w	r3, r3, #1
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d102      	bne.n	80035e4 <HAL_RCC_OscConfig+0x4d8>
 80035de:	4b45      	ldr	r3, [pc, #276]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	e013      	b.n	800360c <HAL_RCC_OscConfig+0x500>
 80035e4:	2302      	movs	r3, #2
 80035e6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80035f6:	2302      	movs	r3, #2
 80035f8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80035fc:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8003608:	4b3a      	ldr	r3, [pc, #232]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 800360a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360c:	2202      	movs	r2, #2
 800360e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003612:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003616:	fa92 f2a2 	rbit	r2, r2
 800361a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800361e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003622:	fab2 f282 	clz	r2, r2
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f042 0220 	orr.w	r2, r2, #32
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	f002 021f 	and.w	r2, r2, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0af      	beq.n	800359e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b2d      	ldr	r3, [pc, #180]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800364a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	21f8      	movs	r1, #248	@ 0xf8
 8003654:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003658:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800365c:	fa91 f1a1 	rbit	r1, r1
 8003660:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003664:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003668:	fab1 f181 	clz	r1, r1
 800366c:	b2c9      	uxtb	r1, r1
 800366e:	408b      	lsls	r3, r1
 8003670:	4920      	ldr	r1, [pc, #128]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 8003672:	4313      	orrs	r3, r2
 8003674:	600b      	str	r3, [r1, #0]
 8003676:	e06c      	b.n	8003752 <HAL_RCC_OscConfig+0x646>
 8003678:	2301      	movs	r3, #1
 800367a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800368a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800368e:	fab3 f383 	clz	r3, r3
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003698:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	461a      	mov	r2, r3
 80036a0:	2300      	movs	r3, #0
 80036a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fd fb9c 	bl	8000de0 <HAL_GetTick>
 80036a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ae:	f7fd fb97 	bl	8000de0 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d902      	bls.n	80036c4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	f000 bd5a 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80036ce:	fa93 f3a3 	rbit	r3, r3
 80036d2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80036d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036da:	fab3 f383 	clz	r3, r3
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	f043 0301 	orr.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d104      	bne.n	80036f8 <HAL_RCC_OscConfig+0x5ec>
 80036ee:	4b01      	ldr	r3, [pc, #4]	@ (80036f4 <HAL_RCC_OscConfig+0x5e8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	e015      	b.n	8003720 <HAL_RCC_OscConfig+0x614>
 80036f4:	40021000 	.word	0x40021000
 80036f8:	2302      	movs	r3, #2
 80036fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003702:	fa93 f3a3 	rbit	r3, r3
 8003706:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800370a:	2302      	movs	r3, #2
 800370c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003710:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800371c:	4bc8      	ldr	r3, [pc, #800]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	2202      	movs	r2, #2
 8003722:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003726:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800372a:	fa92 f2a2 	rbit	r2, r2
 800372e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003732:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003736:	fab2 f282 	clz	r2, r2
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	f042 0220 	orr.w	r2, r2, #32
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	f002 021f 	and.w	r2, r2, #31
 8003746:	2101      	movs	r1, #1
 8003748:	fa01 f202 	lsl.w	r2, r1, r2
 800374c:	4013      	ands	r3, r2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ad      	bne.n	80036ae <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003752:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003756:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0308 	and.w	r3, r3, #8
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8110 	beq.w	8003988 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	699b      	ldr	r3, [r3, #24]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d079      	beq.n	800386c <HAL_RCC_OscConfig+0x760>
 8003778:	2301      	movs	r3, #1
 800377a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003782:	fa93 f3a3 	rbit	r3, r3
 8003786:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800378a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800378e:	fab3 f383 	clz	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	4bab      	ldr	r3, [pc, #684]	@ (8003a44 <HAL_RCC_OscConfig+0x938>)
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	2301      	movs	r3, #1
 80037a0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037a2:	f7fd fb1d 	bl	8000de0 <HAL_GetTick>
 80037a6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037aa:	e00a      	b.n	80037c2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ac:	f7fd fb18 	bl	8000de0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d902      	bls.n	80037c2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	f000 bcdb 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
 80037c2:	2302      	movs	r3, #2
 80037c4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037dc:	2202      	movs	r2, #2
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	fa93 f2a3 	rbit	r2, r3
 80037ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003800:	2202      	movs	r2, #2
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	fa93 f2a3 	rbit	r2, r3
 8003812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003816:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800381a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800381c:	4b88      	ldr	r3, [pc, #544]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 800381e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003828:	2102      	movs	r1, #2
 800382a:	6019      	str	r1, [r3, #0]
 800382c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003830:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	fa93 f1a3 	rbit	r1, r3
 800383a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800383e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003842:	6019      	str	r1, [r3, #0]
  return result;
 8003844:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003848:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	2101      	movs	r1, #1
 8003860:	fa01 f303 	lsl.w	r3, r1, r3
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0a0      	beq.n	80037ac <HAL_RCC_OscConfig+0x6a0>
 800386a:	e08d      	b.n	8003988 <HAL_RCC_OscConfig+0x87c>
 800386c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003870:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003874:	2201      	movs	r2, #1
 8003876:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003878:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800387c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	fa93 f2a3 	rbit	r2, r3
 8003886:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800388e:	601a      	str	r2, [r3, #0]
  return result;
 8003890:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003894:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003898:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389a:	fab3 f383 	clz	r3, r3
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	461a      	mov	r2, r3
 80038a2:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <HAL_RCC_OscConfig+0x938>)
 80038a4:	4413      	add	r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	461a      	mov	r2, r3
 80038aa:	2300      	movs	r3, #0
 80038ac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ae:	f7fd fa97 	bl	8000de0 <HAL_GetTick>
 80038b2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fd fa92 	bl	8000de0 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d902      	bls.n	80038ce <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	f000 bc55 	b.w	8004178 <HAL_RCC_OscConfig+0x106c>
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038d6:	2202      	movs	r2, #2
 80038d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ec:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80038fa:	2202      	movs	r2, #2
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003902:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	fa93 f2a3 	rbit	r2, r3
 800390c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003910:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800391e:	2202      	movs	r2, #2
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003926:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003938:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393a:	4b41      	ldr	r3, [pc, #260]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 800393c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800393e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003942:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003946:	2102      	movs	r1, #2
 8003948:	6019      	str	r1, [r3, #0]
 800394a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800394e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	fa93 f1a3 	rbit	r1, r3
 8003958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800395c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003960:	6019      	str	r1, [r3, #0]
  return result;
 8003962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003966:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	fab3 f383 	clz	r3, r3
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003976:	b2db      	uxtb	r3, r3
 8003978:	f003 031f 	and.w	r3, r3, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f303 	lsl.w	r3, r1, r3
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d197      	bne.n	80038b8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 81a1 	beq.w	8003ce0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800399e:	2300      	movs	r3, #0
 80039a0:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a4:	4b26      	ldr	r3, [pc, #152]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b0:	4b23      	ldr	r3, [pc, #140]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	4a22      	ldr	r2, [pc, #136]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039ba:	61d3      	str	r3, [r2, #28]
 80039bc:	4b20      	ldr	r3, [pc, #128]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80039c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80039d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80039d8:	2301      	movs	r3, #1
 80039da:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039de:	4b1a      	ldr	r3, [pc, #104]	@ (8003a48 <HAL_RCC_OscConfig+0x93c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d11a      	bne.n	8003a20 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ea:	4b17      	ldr	r3, [pc, #92]	@ (8003a48 <HAL_RCC_OscConfig+0x93c>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a16      	ldr	r2, [pc, #88]	@ (8003a48 <HAL_RCC_OscConfig+0x93c>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039f6:	f7fd f9f3 	bl	8000de0 <HAL_GetTick>
 80039fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039fe:	e009      	b.n	8003a14 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a00:	f7fd f9ee 	bl	8000de0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	@ 0x64
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e3b1      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <HAL_RCC_OscConfig+0x93c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ef      	beq.n	8003a00 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10d      	bne.n	8003a4c <HAL_RCC_OscConfig+0x940>
 8003a30:	4b03      	ldr	r3, [pc, #12]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4a02      	ldr	r2, [pc, #8]	@ (8003a40 <HAL_RCC_OscConfig+0x934>)
 8003a36:	f043 0301 	orr.w	r3, r3, #1
 8003a3a:	6213      	str	r3, [r2, #32]
 8003a3c:	e03c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x9ac>
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	10908120 	.word	0x10908120
 8003a48:	40007000 	.word	0x40007000
 8003a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10c      	bne.n	8003a76 <HAL_RCC_OscConfig+0x96a>
 8003a5c:	4bc1      	ldr	r3, [pc, #772]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4ac0      	ldr	r2, [pc, #768]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a62:	f023 0301 	bic.w	r3, r3, #1
 8003a66:	6213      	str	r3, [r2, #32]
 8003a68:	4bbe      	ldr	r3, [pc, #760]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a6a:	6a1b      	ldr	r3, [r3, #32]
 8003a6c:	4abd      	ldr	r2, [pc, #756]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a6e:	f023 0304 	bic.w	r3, r3, #4
 8003a72:	6213      	str	r3, [r2, #32]
 8003a74:	e020      	b.n	8003ab8 <HAL_RCC_OscConfig+0x9ac>
 8003a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	2b05      	cmp	r3, #5
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x994>
 8003a86:	4bb7      	ldr	r3, [pc, #732]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	4ab6      	ldr	r2, [pc, #728]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a8c:	f043 0304 	orr.w	r3, r3, #4
 8003a90:	6213      	str	r3, [r2, #32]
 8003a92:	4bb4      	ldr	r3, [pc, #720]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	4ab3      	ldr	r2, [pc, #716]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6213      	str	r3, [r2, #32]
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0x9ac>
 8003aa0:	4bb0      	ldr	r3, [pc, #704]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	4aaf      	ldr	r2, [pc, #700]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003aa6:	f023 0301 	bic.w	r3, r3, #1
 8003aaa:	6213      	str	r3, [r2, #32]
 8003aac:	4bad      	ldr	r3, [pc, #692]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4aac      	ldr	r2, [pc, #688]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003ab2:	f023 0304 	bic.w	r3, r3, #4
 8003ab6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 8081 	beq.w	8003bcc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aca:	f7fd f989 	bl	8000de0 <HAL_GetTick>
 8003ace:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad4:	f7fd f984 	bl	8000de0 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e345      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
 8003aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003af4:	2202      	movs	r2, #2
 8003af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	fa93 f2a3 	rbit	r2, r3
 8003b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b0a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b14:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b18:	2202      	movs	r2, #2
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b20:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	fa93 f2a3 	rbit	r2, r3
 8003b2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b32:	601a      	str	r2, [r3, #0]
  return result;
 8003b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b38:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b3c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	095b      	lsrs	r3, r3, #5
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	f043 0302 	orr.w	r3, r3, #2
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d102      	bne.n	8003b58 <HAL_RCC_OscConfig+0xa4c>
 8003b52:	4b84      	ldr	r3, [pc, #528]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	e013      	b.n	8003b80 <HAL_RCC_OscConfig+0xa74>
 8003b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b60:	2202      	movs	r2, #2
 8003b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b68:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	fa93 f2a3 	rbit	r2, r3
 8003b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b76:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	4b79      	ldr	r3, [pc, #484]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b84:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b88:	2102      	movs	r1, #2
 8003b8a:	6011      	str	r1, [r2, #0]
 8003b8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b90:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003b94:	6812      	ldr	r2, [r2, #0]
 8003b96:	fa92 f1a2 	rbit	r1, r2
 8003b9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b9e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003ba2:	6011      	str	r1, [r2, #0]
  return result;
 8003ba4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ba8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	fab2 f282 	clz	r2, r2
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003bb8:	b2d2      	uxtb	r2, r2
 8003bba:	f002 021f 	and.w	r2, r2, #31
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d084      	beq.n	8003ad4 <HAL_RCC_OscConfig+0x9c8>
 8003bca:	e07f      	b.n	8003ccc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bcc:	f7fd f908 	bl	8000de0 <HAL_GetTick>
 8003bd0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bd4:	e00b      	b.n	8003bee <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bd6:	f7fd f903 	bl	8000de0 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e2c4      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
 8003bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bfe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	fa93 f2a3 	rbit	r2, r3
 8003c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c0c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c16:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c22:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c30:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c34:	601a      	str	r2, [r3, #0]
  return result;
 8003c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c3e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c40:	fab3 f383 	clz	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f043 0302 	orr.w	r3, r3, #2
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_OscConfig+0xb4e>
 8003c54:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	e013      	b.n	8003c82 <HAL_RCC_OscConfig+0xb76>
 8003c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c5e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c62:	2202      	movs	r2, #2
 8003c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c6a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	fa93 f2a3 	rbit	r2, r3
 8003c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c78:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	4b39      	ldr	r3, [pc, #228]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c86:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c8a:	2102      	movs	r1, #2
 8003c8c:	6011      	str	r1, [r2, #0]
 8003c8e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c92:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	fa92 f1a2 	rbit	r1, r2
 8003c9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ca0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ca4:	6011      	str	r1, [r2, #0]
  return result;
 8003ca6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003caa:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003cae:	6812      	ldr	r2, [r2, #0]
 8003cb0:	fab2 f282 	clz	r2, r2
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cba:	b2d2      	uxtb	r2, r2
 8003cbc:	f002 021f 	and.w	r2, r2, #31
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	fa01 f202 	lsl.w	r2, r1, r2
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d184      	bne.n	8003bd6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ccc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d105      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cd4:	4b23      	ldr	r3, [pc, #140]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003cd6:	69db      	ldr	r3, [r3, #28]
 8003cd8:	4a22      	ldr	r2, [pc, #136]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003cda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cde:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ce4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69db      	ldr	r3, [r3, #28]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8242 	beq.w	8004176 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8003d64 <HAL_RCC_OscConfig+0xc58>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	f000 8213 	beq.w	8004126 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	f040 8162 	bne.w	8003fd6 <HAL_RCC_OscConfig+0xeca>
 8003d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d16:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d24:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	fa93 f2a3 	rbit	r2, r3
 8003d2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d32:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d36:	601a      	str	r2, [r3, #0]
  return result;
 8003d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d40:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d4c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	461a      	mov	r2, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d58:	f7fd f842 	bl	8000de0 <HAL_GetTick>
 8003d5c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d60:	e00c      	b.n	8003d7c <HAL_RCC_OscConfig+0xc70>
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d68:	f7fd f83a 	bl	8000de0 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e1fd      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
 8003d7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d80:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	fa93 f2a3 	rbit	r2, r3
 8003d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003da0:	601a      	str	r2, [r3, #0]
  return result;
 8003da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003da6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003daa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dac:	fab3 f383 	clz	r3, r3
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	095b      	lsrs	r3, r3, #5
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	f043 0301 	orr.w	r3, r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d102      	bne.n	8003dc6 <HAL_RCC_OscConfig+0xcba>
 8003dc0:	4bb0      	ldr	r3, [pc, #704]	@ (8004084 <HAL_RCC_OscConfig+0xf78>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	e027      	b.n	8003e16 <HAL_RCC_OscConfig+0xd0a>
 8003dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dca:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003dce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	fa93 f2a3 	rbit	r2, r3
 8003de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003df4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	fa93 f2a3 	rbit	r2, r3
 8003e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	4b9c      	ldr	r3, [pc, #624]	@ (8004084 <HAL_RCC_OscConfig+0xf78>)
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e1a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e1e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e22:	6011      	str	r1, [r2, #0]
 8003e24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e28:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	fa92 f1a2 	rbit	r1, r2
 8003e32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e36:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e3a:	6011      	str	r1, [r2, #0]
  return result;
 8003e3c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e40:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e44:	6812      	ldr	r2, [r2, #0]
 8003e46:	fab2 f282 	clz	r2, r2
 8003e4a:	b2d2      	uxtb	r2, r2
 8003e4c:	f042 0220 	orr.w	r2, r2, #32
 8003e50:	b2d2      	uxtb	r2, r2
 8003e52:	f002 021f 	and.w	r2, r2, #31
 8003e56:	2101      	movs	r1, #1
 8003e58:	fa01 f202 	lsl.w	r2, r1, r2
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d182      	bne.n	8003d68 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e62:	4b88      	ldr	r3, [pc, #544]	@ (8004084 <HAL_RCC_OscConfig+0xf78>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003e76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	430b      	orrs	r3, r1
 8003e84:	497f      	ldr	r1, [pc, #508]	@ (8004084 <HAL_RCC_OscConfig+0xf78>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
 8003e8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e8e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003e92:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	fa93 f2a3 	rbit	r2, r3
 8003ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eaa:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003eae:	601a      	str	r2, [r3, #0]
  return result;
 8003eb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eb4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003eb8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eba:	fab3 f383 	clz	r3, r3
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ec4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2301      	movs	r3, #1
 8003ece:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed0:	f7fc ff86 	bl	8000de0 <HAL_GetTick>
 8003ed4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed8:	e009      	b.n	8003eee <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eda:	f7fc ff81 	bl	8000de0 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e144      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
 8003eee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ef6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003efa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	fa93 f2a3 	rbit	r2, r3
 8003f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f0e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f12:	601a      	str	r2, [r3, #0]
  return result;
 8003f14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f18:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f1c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f1e:	fab3 f383 	clz	r3, r3
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	095b      	lsrs	r3, r3, #5
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_RCC_OscConfig+0xe2c>
 8003f32:	4b54      	ldr	r3, [pc, #336]	@ (8004084 <HAL_RCC_OscConfig+0xf78>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	e027      	b.n	8003f88 <HAL_RCC_OscConfig+0xe7c>
 8003f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f3c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	fa93 f2a3 	rbit	r2, r3
 8003f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f58:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f62:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f66:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f70:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	fa93 f2a3 	rbit	r2, r3
 8003f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f7e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003f82:	601a      	str	r2, [r3, #0]
 8003f84:	4b3f      	ldr	r3, [pc, #252]	@ (8004084 <HAL_RCC_OscConfig+0xf78>)
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f8c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f90:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f9a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003f9e:	6812      	ldr	r2, [r2, #0]
 8003fa0:	fa92 f1a2 	rbit	r1, r2
 8003fa4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fa8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fac:	6011      	str	r1, [r2, #0]
  return result;
 8003fae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003fb2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	fab2 f282 	clz	r2, r2
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	f042 0220 	orr.w	r2, r2, #32
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	f002 021f 	and.w	r2, r2, #31
 8003fc8:	2101      	movs	r1, #1
 8003fca:	fa01 f202 	lsl.w	r2, r1, r2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d082      	beq.n	8003eda <HAL_RCC_OscConfig+0xdce>
 8003fd4:	e0cf      	b.n	8004176 <HAL_RCC_OscConfig+0x106a>
 8003fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fda:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003fde:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fe2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fe8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	fa93 f2a3 	rbit	r2, r3
 8003ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ff6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ffa:	601a      	str	r2, [r3, #0]
  return result;
 8003ffc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004000:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004004:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004006:	fab3 f383 	clz	r3, r3
 800400a:	b2db      	uxtb	r3, r3
 800400c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004010:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	461a      	mov	r2, r3
 8004018:	2300      	movs	r3, #0
 800401a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401c:	f7fc fee0 	bl	8000de0 <HAL_GetTick>
 8004020:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004024:	e009      	b.n	800403a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fc fedb 	bl	8000de0 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e09e      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
 800403a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800403e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004042:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004046:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800404c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	fa93 f2a3 	rbit	r2, r3
 8004056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800405a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800405e:	601a      	str	r2, [r3, #0]
  return result;
 8004060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004064:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8004068:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800406a:	fab3 f383 	clz	r3, r3
 800406e:	b2db      	uxtb	r3, r3
 8004070:	095b      	lsrs	r3, r3, #5
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b01      	cmp	r3, #1
 800407c:	d104      	bne.n	8004088 <HAL_RCC_OscConfig+0xf7c>
 800407e:	4b01      	ldr	r3, [pc, #4]	@ (8004084 <HAL_RCC_OscConfig+0xf78>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	e029      	b.n	80040d8 <HAL_RCC_OscConfig+0xfcc>
 8004084:	40021000 	.word	0x40021000
 8004088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800408c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004090:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800409a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	fa93 f2a3 	rbit	r2, r3
 80040a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040a8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80040ac:	601a      	str	r2, [r3, #0]
 80040ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040b2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040b6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040c0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	fa93 f2a3 	rbit	r2, r3
 80040ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80040ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004184 <HAL_RCC_OscConfig+0x1078>)
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040dc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80040e4:	6011      	str	r1, [r2, #0]
 80040e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040ea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80040ee:	6812      	ldr	r2, [r2, #0]
 80040f0:	fa92 f1a2 	rbit	r1, r2
 80040f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80040f8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80040fc:	6011      	str	r1, [r2, #0]
  return result;
 80040fe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004102:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	fab2 f282 	clz	r2, r2
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	f042 0220 	orr.w	r2, r2, #32
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	f002 021f 	and.w	r2, r2, #31
 8004118:	2101      	movs	r1, #1
 800411a:	fa01 f202 	lsl.w	r2, r1, r2
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d180      	bne.n	8004026 <HAL_RCC_OscConfig+0xf1a>
 8004124:	e027      	b.n	8004176 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800412a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e01e      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800413a:	4b12      	ldr	r3, [pc, #72]	@ (8004184 <HAL_RCC_OscConfig+0x1078>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004142:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8004146:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800414a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800414e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	429a      	cmp	r2, r3
 8004158:	d10b      	bne.n	8004172 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800415a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800415e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004166:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000

08004188 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b09e      	sub	sp, #120	@ 0x78
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004192:	2300      	movs	r3, #0
 8004194:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e162      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b90      	ldr	r3, [pc, #576]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d910      	bls.n	80041d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b8d      	ldr	r3, [pc, #564]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 0207 	bic.w	r2, r3, #7
 80041b6:	498b      	ldr	r1, [pc, #556]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041be:	4b89      	ldr	r3, [pc, #548]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d001      	beq.n	80041d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e14a      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0302 	and.w	r3, r3, #2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d008      	beq.n	80041ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041dc:	4b82      	ldr	r3, [pc, #520]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	497f      	ldr	r1, [pc, #508]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80dc 	beq.w	80043b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b01      	cmp	r3, #1
 8004202:	d13c      	bne.n	800427e <HAL_RCC_ClockConfig+0xf6>
 8004204:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004208:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800420c:	fa93 f3a3 	rbit	r3, r3
 8004210:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8004212:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004214:	fab3 f383 	clz	r3, r3
 8004218:	b2db      	uxtb	r3, r3
 800421a:	095b      	lsrs	r3, r3, #5
 800421c:	b2db      	uxtb	r3, r3
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	d102      	bne.n	800422e <HAL_RCC_ClockConfig+0xa6>
 8004228:	4b6f      	ldr	r3, [pc, #444]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	e00f      	b.n	800424e <HAL_RCC_ClockConfig+0xc6>
 800422e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004232:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004236:	fa93 f3a3 	rbit	r3, r3
 800423a:	667b      	str	r3, [r7, #100]	@ 0x64
 800423c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004240:	663b      	str	r3, [r7, #96]	@ 0x60
 8004242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004244:	fa93 f3a3 	rbit	r3, r3
 8004248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800424a:	4b67      	ldr	r3, [pc, #412]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 800424c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004252:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004254:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004256:	fa92 f2a2 	rbit	r2, r2
 800425a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800425c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800425e:	fab2 f282 	clz	r2, r2
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	f042 0220 	orr.w	r2, r2, #32
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	f002 021f 	and.w	r2, r2, #31
 800426e:	2101      	movs	r1, #1
 8004270:	fa01 f202 	lsl.w	r2, r1, r2
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d17b      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e0f3      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d13c      	bne.n	8004300 <HAL_RCC_ClockConfig+0x178>
 8004286:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800428a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004294:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004296:	fab3 f383 	clz	r3, r3
 800429a:	b2db      	uxtb	r3, r3
 800429c:	095b      	lsrs	r3, r3, #5
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f043 0301 	orr.w	r3, r3, #1
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d102      	bne.n	80042b0 <HAL_RCC_ClockConfig+0x128>
 80042aa:	4b4f      	ldr	r3, [pc, #316]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	e00f      	b.n	80042d0 <HAL_RCC_ClockConfig+0x148>
 80042b0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042b8:	fa93 f3a3 	rbit	r3, r3
 80042bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80042be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80042c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042c6:	fa93 f3a3 	rbit	r3, r3
 80042ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042cc:	4b46      	ldr	r3, [pc, #280]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80042ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042d4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80042d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80042d8:	fa92 f2a2 	rbit	r2, r2
 80042dc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80042de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042e0:	fab2 f282 	clz	r2, r2
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	f042 0220 	orr.w	r2, r2, #32
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	f002 021f 	and.w	r2, r2, #31
 80042f0:	2101      	movs	r1, #1
 80042f2:	fa01 f202 	lsl.w	r2, r1, r2
 80042f6:	4013      	ands	r3, r2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d13a      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b2      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
 8004300:	2302      	movs	r3, #2
 8004302:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	fa93 f3a3 	rbit	r3, r3
 800430a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800430c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b01      	cmp	r3, #1
 8004320:	d102      	bne.n	8004328 <HAL_RCC_ClockConfig+0x1a0>
 8004322:	4b31      	ldr	r3, [pc, #196]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	e00d      	b.n	8004344 <HAL_RCC_ClockConfig+0x1bc>
 8004328:	2302      	movs	r3, #2
 800432a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
 8004334:	2302      	movs	r3, #2
 8004336:	623b      	str	r3, [r7, #32]
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	61fb      	str	r3, [r7, #28]
 8004340:	4b29      	ldr	r3, [pc, #164]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004344:	2202      	movs	r2, #2
 8004346:	61ba      	str	r2, [r7, #24]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	fa92 f2a2 	rbit	r2, r2
 800434e:	617a      	str	r2, [r7, #20]
  return result;
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	fab2 f282 	clz	r2, r2
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	f042 0220 	orr.w	r2, r2, #32
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	f002 021f 	and.w	r2, r2, #31
 8004362:	2101      	movs	r1, #1
 8004364:	fa01 f202 	lsl.w	r2, r1, r2
 8004368:	4013      	ands	r3, r2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e079      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004372:	4b1d      	ldr	r3, [pc, #116]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f023 0203 	bic.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	491a      	ldr	r1, [pc, #104]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 8004380:	4313      	orrs	r3, r2
 8004382:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004384:	f7fc fd2c 	bl	8000de0 <HAL_GetTick>
 8004388:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800438a:	e00a      	b.n	80043a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800438c:	f7fc fd28 	bl	8000de0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800439a:	4293      	cmp	r3, r2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e061      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a2:	4b11      	ldr	r3, [pc, #68]	@ (80043e8 <HAL_RCC_ClockConfig+0x260>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f003 020c 	and.w	r2, r3, #12
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d1eb      	bne.n	800438c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b4:	4b0b      	ldr	r3, [pc, #44]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0307 	and.w	r3, r3, #7
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d214      	bcs.n	80043ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043c2:	4b08      	ldr	r3, [pc, #32]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 0207 	bic.w	r2, r3, #7
 80043ca:	4906      	ldr	r1, [pc, #24]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043d2:	4b04      	ldr	r3, [pc, #16]	@ (80043e4 <HAL_RCC_ClockConfig+0x25c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0307 	and.w	r3, r3, #7
 80043da:	683a      	ldr	r2, [r7, #0]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d005      	beq.n	80043ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e040      	b.n	8004466 <HAL_RCC_ClockConfig+0x2de>
 80043e4:	40022000 	.word	0x40022000
 80043e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d008      	beq.n	800440a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043f8:	4b1d      	ldr	r3, [pc, #116]	@ (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	491a      	ldr	r1, [pc, #104]	@ (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004406:	4313      	orrs	r3, r2
 8004408:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	2b00      	cmp	r3, #0
 8004414:	d009      	beq.n	800442a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004416:	4b16      	ldr	r3, [pc, #88]	@ (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4912      	ldr	r1, [pc, #72]	@ (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004426:	4313      	orrs	r3, r2
 8004428:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800442a:	f000 f829 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 800442e:	4601      	mov	r1, r0
 8004430:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <HAL_RCC_ClockConfig+0x2e8>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004438:	22f0      	movs	r2, #240	@ 0xf0
 800443a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	fa92 f2a2 	rbit	r2, r2
 8004442:	60fa      	str	r2, [r7, #12]
  return result;
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	fab2 f282 	clz	r2, r2
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	40d3      	lsrs	r3, r2
 800444e:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <HAL_RCC_ClockConfig+0x2ec>)
 8004450:	5cd3      	ldrb	r3, [r2, r3]
 8004452:	fa21 f303 	lsr.w	r3, r1, r3
 8004456:	4a08      	ldr	r2, [pc, #32]	@ (8004478 <HAL_RCC_ClockConfig+0x2f0>)
 8004458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800445a:	4b08      	ldr	r3, [pc, #32]	@ (800447c <HAL_RCC_ClockConfig+0x2f4>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4618      	mov	r0, r3
 8004460:	f7fc fc7a 	bl	8000d58 <HAL_InitTick>
  
  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3778      	adds	r7, #120	@ 0x78
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	40021000 	.word	0x40021000
 8004474:	08005e6c 	.word	0x08005e6c
 8004478:	20000000 	.word	0x20000000
 800447c:	20000004 	.word	0x20000004

08004480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	2300      	movs	r3, #0
 800448c:	60bb      	str	r3, [r7, #8]
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
 8004492:	2300      	movs	r3, #0
 8004494:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800449a:	4b1e      	ldr	r3, [pc, #120]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x94>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x30>
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x36>
 80044ae:	e026      	b.n	80044fe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044b0:	4b19      	ldr	r3, [pc, #100]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x98>)
 80044b2:	613b      	str	r3, [r7, #16]
      break;
 80044b4:	e026      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	0c9b      	lsrs	r3, r3, #18
 80044ba:	f003 030f 	and.w	r3, r3, #15
 80044be:	4a17      	ldr	r2, [pc, #92]	@ (800451c <HAL_RCC_GetSysClockFreq+0x9c>)
 80044c0:	5cd3      	ldrb	r3, [r2, r3]
 80044c2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80044c4:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <HAL_RCC_GetSysClockFreq+0x94>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	4a14      	ldr	r2, [pc, #80]	@ (8004520 <HAL_RCC_GetSysClockFreq+0xa0>)
 80044ce:	5cd3      	ldrb	r3, [r2, r3]
 80044d0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d008      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044dc:	4a0e      	ldr	r2, [pc, #56]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x98>)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e004      	b.n	80044f8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a0c      	ldr	r2, [pc, #48]	@ (8004524 <HAL_RCC_GetSysClockFreq+0xa4>)
 80044f2:	fb02 f303 	mul.w	r3, r2, r3
 80044f6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	613b      	str	r3, [r7, #16]
      break;
 80044fc:	e002      	b.n	8004504 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044fe:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <HAL_RCC_GetSysClockFreq+0x98>)
 8004500:	613b      	str	r3, [r7, #16]
      break;
 8004502:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004504:	693b      	ldr	r3, [r7, #16]
}
 8004506:	4618      	mov	r0, r3
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40021000 	.word	0x40021000
 8004518:	007a1200 	.word	0x007a1200
 800451c:	08005e84 	.word	0x08005e84
 8004520:	08005e94 	.word	0x08005e94
 8004524:	003d0900 	.word	0x003d0900

08004528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800452c:	4b03      	ldr	r3, [pc, #12]	@ (800453c <HAL_RCC_GetHCLKFreq+0x14>)
 800452e:	681b      	ldr	r3, [r3, #0]
}
 8004530:	4618      	mov	r0, r3
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000000 	.word	0x20000000

08004540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004546:	f7ff ffef 	bl	8004528 <HAL_RCC_GetHCLKFreq>
 800454a:	4601      	mov	r1, r0
 800454c:	4b0b      	ldr	r3, [pc, #44]	@ (800457c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004554:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004558:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	fa92 f2a2 	rbit	r2, r2
 8004560:	603a      	str	r2, [r7, #0]
  return result;
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	fab2 f282 	clz	r2, r2
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	40d3      	lsrs	r3, r2
 800456c:	4a04      	ldr	r2, [pc, #16]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x40>)
 800456e:	5cd3      	ldrb	r3, [r2, r3]
 8004570:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004574:	4618      	mov	r0, r3
 8004576:	3708      	adds	r7, #8
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40021000 	.word	0x40021000
 8004580:	08005e7c 	.word	0x08005e7c

08004584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800458a:	f7ff ffcd 	bl	8004528 <HAL_RCC_GetHCLKFreq>
 800458e:	4601      	mov	r1, r0
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004598:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800459c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	fa92 f2a2 	rbit	r2, r2
 80045a4:	603a      	str	r2, [r7, #0]
  return result;
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	fab2 f282 	clz	r2, r2
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	40d3      	lsrs	r3, r2
 80045b0:	4a04      	ldr	r2, [pc, #16]	@ (80045c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045b8:	4618      	mov	r0, r3
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40021000 	.word	0x40021000
 80045c4:	08005e7c 	.word	0x08005e7c

080045c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e040      	b.n	800465c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d106      	bne.n	80045f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7fc fa52 	bl	8000a94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2224      	movs	r2, #36	@ 0x24
 80045f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f9e8 	bl	80049e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f8af 	bl	8004778 <UART_SetConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e01b      	b.n	800465c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fa67 	bl	8004b28 <UART_CheckIdleState>
 800465a:	4603      	mov	r3, r0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b08a      	sub	sp, #40	@ 0x28
 8004668:	af02      	add	r7, sp, #8
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	603b      	str	r3, [r7, #0]
 8004670:	4613      	mov	r3, r2
 8004672:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004678:	2b20      	cmp	r3, #32
 800467a:	d177      	bne.n	800476c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <HAL_UART_Transmit+0x24>
 8004682:	88fb      	ldrh	r3, [r7, #6]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e070      	b.n	800476e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2221      	movs	r2, #33	@ 0x21
 8004698:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800469a:	f7fc fba1 	bl	8000de0 <HAL_GetTick>
 800469e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	88fa      	ldrh	r2, [r7, #6]
 80046a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	88fa      	ldrh	r2, [r7, #6]
 80046ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b8:	d108      	bne.n	80046cc <HAL_UART_Transmit+0x68>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
 80046ca:	e003      	b.n	80046d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046d0:	2300      	movs	r3, #0
 80046d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046d4:	e02f      	b.n	8004736 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	2180      	movs	r1, #128	@ 0x80
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 fac9 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d004      	beq.n	80046f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2220      	movs	r2, #32
 80046f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e03b      	b.n	800476e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	881a      	ldrh	r2, [r3, #0]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004708:	b292      	uxth	r2, r2
 800470a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	3302      	adds	r3, #2
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e007      	b.n	8004724 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	781a      	ldrb	r2, [r3, #0]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	3301      	adds	r3, #1
 8004722:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800473c:	b29b      	uxth	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1c9      	bne.n	80046d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	2140      	movs	r1, #64	@ 0x40
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fa93 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004752:	4603      	mov	r3, r0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d004      	beq.n	8004762 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2220      	movs	r2, #32
 800475c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e005      	b.n	800476e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3720      	adds	r7, #32
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	431a      	orrs	r2, r3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	4b8a      	ldr	r3, [pc, #552]	@ (80049cc <UART_SetConfig+0x254>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	6979      	ldr	r1, [r7, #20]
 80047ac:	430b      	orrs	r3, r1
 80047ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	697a      	ldr	r2, [r7, #20]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a78      	ldr	r2, [pc, #480]	@ (80049d0 <UART_SetConfig+0x258>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d120      	bne.n	8004836 <UART_SetConfig+0xbe>
 80047f4:	4b77      	ldr	r3, [pc, #476]	@ (80049d4 <UART_SetConfig+0x25c>)
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b03      	cmp	r3, #3
 80047fe:	d817      	bhi.n	8004830 <UART_SetConfig+0xb8>
 8004800:	a201      	add	r2, pc, #4	@ (adr r2, 8004808 <UART_SetConfig+0x90>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	08004819 	.word	0x08004819
 800480c:	08004825 	.word	0x08004825
 8004810:	0800482b 	.word	0x0800482b
 8004814:	0800481f 	.word	0x0800481f
 8004818:	2300      	movs	r3, #0
 800481a:	77fb      	strb	r3, [r7, #31]
 800481c:	e01d      	b.n	800485a <UART_SetConfig+0xe2>
 800481e:	2302      	movs	r3, #2
 8004820:	77fb      	strb	r3, [r7, #31]
 8004822:	e01a      	b.n	800485a <UART_SetConfig+0xe2>
 8004824:	2304      	movs	r3, #4
 8004826:	77fb      	strb	r3, [r7, #31]
 8004828:	e017      	b.n	800485a <UART_SetConfig+0xe2>
 800482a:	2308      	movs	r3, #8
 800482c:	77fb      	strb	r3, [r7, #31]
 800482e:	e014      	b.n	800485a <UART_SetConfig+0xe2>
 8004830:	2310      	movs	r3, #16
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	e011      	b.n	800485a <UART_SetConfig+0xe2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a67      	ldr	r2, [pc, #412]	@ (80049d8 <UART_SetConfig+0x260>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d102      	bne.n	8004846 <UART_SetConfig+0xce>
 8004840:	2300      	movs	r3, #0
 8004842:	77fb      	strb	r3, [r7, #31]
 8004844:	e009      	b.n	800485a <UART_SetConfig+0xe2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a64      	ldr	r2, [pc, #400]	@ (80049dc <UART_SetConfig+0x264>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d102      	bne.n	8004856 <UART_SetConfig+0xde>
 8004850:	2300      	movs	r3, #0
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e001      	b.n	800485a <UART_SetConfig+0xe2>
 8004856:	2310      	movs	r3, #16
 8004858:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004862:	d15a      	bne.n	800491a <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004864:	7ffb      	ldrb	r3, [r7, #31]
 8004866:	2b08      	cmp	r3, #8
 8004868:	d827      	bhi.n	80048ba <UART_SetConfig+0x142>
 800486a:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <UART_SetConfig+0xf8>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004895 	.word	0x08004895
 8004874:	0800489d 	.word	0x0800489d
 8004878:	080048a5 	.word	0x080048a5
 800487c:	080048bb 	.word	0x080048bb
 8004880:	080048ab 	.word	0x080048ab
 8004884:	080048bb 	.word	0x080048bb
 8004888:	080048bb 	.word	0x080048bb
 800488c:	080048bb 	.word	0x080048bb
 8004890:	080048b3 	.word	0x080048b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004894:	f7ff fe54 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8004898:	61b8      	str	r0, [r7, #24]
        break;
 800489a:	e013      	b.n	80048c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7ff fe72 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 80048a0:	61b8      	str	r0, [r7, #24]
        break;
 80048a2:	e00f      	b.n	80048c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048a4:	4b4e      	ldr	r3, [pc, #312]	@ (80049e0 <UART_SetConfig+0x268>)
 80048a6:	61bb      	str	r3, [r7, #24]
        break;
 80048a8:	e00c      	b.n	80048c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048aa:	f7ff fde9 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 80048ae:	61b8      	str	r0, [r7, #24]
        break;
 80048b0:	e008      	b.n	80048c4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048b6:	61bb      	str	r3, [r7, #24]
        break;
 80048b8:	e004      	b.n	80048c4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	77bb      	strb	r3, [r7, #30]
        break;
 80048c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d074      	beq.n	80049b4 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048ca:	69bb      	ldr	r3, [r7, #24]
 80048cc:	005a      	lsls	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	085b      	lsrs	r3, r3, #1
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b0f      	cmp	r3, #15
 80048e4:	d916      	bls.n	8004914 <UART_SetConfig+0x19c>
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048ec:	d212      	bcs.n	8004914 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	f023 030f 	bic.w	r3, r3, #15
 80048f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	085b      	lsrs	r3, r3, #1
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f003 0307 	and.w	r3, r3, #7
 8004902:	b29a      	uxth	r2, r3
 8004904:	89fb      	ldrh	r3, [r7, #14]
 8004906:	4313      	orrs	r3, r2
 8004908:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	89fa      	ldrh	r2, [r7, #14]
 8004910:	60da      	str	r2, [r3, #12]
 8004912:	e04f      	b.n	80049b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	77bb      	strb	r3, [r7, #30]
 8004918:	e04c      	b.n	80049b4 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800491a:	7ffb      	ldrb	r3, [r7, #31]
 800491c:	2b08      	cmp	r3, #8
 800491e:	d828      	bhi.n	8004972 <UART_SetConfig+0x1fa>
 8004920:	a201      	add	r2, pc, #4	@ (adr r2, 8004928 <UART_SetConfig+0x1b0>)
 8004922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004926:	bf00      	nop
 8004928:	0800494d 	.word	0x0800494d
 800492c:	08004955 	.word	0x08004955
 8004930:	0800495d 	.word	0x0800495d
 8004934:	08004973 	.word	0x08004973
 8004938:	08004963 	.word	0x08004963
 800493c:	08004973 	.word	0x08004973
 8004940:	08004973 	.word	0x08004973
 8004944:	08004973 	.word	0x08004973
 8004948:	0800496b 	.word	0x0800496b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800494c:	f7ff fdf8 	bl	8004540 <HAL_RCC_GetPCLK1Freq>
 8004950:	61b8      	str	r0, [r7, #24]
        break;
 8004952:	e013      	b.n	800497c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004954:	f7ff fe16 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 8004958:	61b8      	str	r0, [r7, #24]
        break;
 800495a:	e00f      	b.n	800497c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800495c:	4b20      	ldr	r3, [pc, #128]	@ (80049e0 <UART_SetConfig+0x268>)
 800495e:	61bb      	str	r3, [r7, #24]
        break;
 8004960:	e00c      	b.n	800497c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004962:	f7ff fd8d 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 8004966:	61b8      	str	r0, [r7, #24]
        break;
 8004968:	e008      	b.n	800497c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800496a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800496e:	61bb      	str	r3, [r7, #24]
        break;
 8004970:	e004      	b.n	800497c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	77bb      	strb	r3, [r7, #30]
        break;
 800497a:	bf00      	nop
    }

    if (pclk != 0U)
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d018      	beq.n	80049b4 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	085a      	lsrs	r2, r3, #1
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	441a      	add	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	2b0f      	cmp	r3, #15
 800499a:	d909      	bls.n	80049b0 <UART_SetConfig+0x238>
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049a2:	d205      	bcs.n	80049b0 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	b29a      	uxth	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60da      	str	r2, [r3, #12]
 80049ae:	e001      	b.n	80049b4 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	efff69f3 	.word	0xefff69f3
 80049d0:	40013800 	.word	0x40013800
 80049d4:	40021000 	.word	0x40021000
 80049d8:	40004400 	.word	0x40004400
 80049dc:	40004800 	.word	0x40004800
 80049e0:	007a1200 	.word	0x007a1200

080049e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f0:	f003 0308 	and.w	r3, r3, #8
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	f003 0320 	and.w	r3, r3, #32
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01a      	beq.n	8004afa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	430a      	orrs	r2, r1
 8004ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ade:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ae2:	d10a      	bne.n	8004afa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b098      	sub	sp, #96	@ 0x60
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b38:	f7fc f952 	bl	8000de0 <HAL_GetTick>
 8004b3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d12e      	bne.n	8004baa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b50:	9300      	str	r3, [sp, #0]
 8004b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b54:	2200      	movs	r2, #0
 8004b56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f88c 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d021      	beq.n	8004baa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b86:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e6      	bne.n	8004b66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e062      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0304 	and.w	r3, r3, #4
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d149      	bne.n	8004c4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bb8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f856 	bl	8004c78 <UART_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d03c      	beq.n	8004c4c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	e853 3f00 	ldrex	r3, [r3]
 8004bde:	623b      	str	r3, [r7, #32]
   return(result);
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004be6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	461a      	mov	r2, r3
 8004bee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e6      	bne.n	8004bd2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3308      	adds	r3, #8
 8004c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	e853 3f00 	ldrex	r3, [r3]
 8004c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c24:	61fa      	str	r2, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c28:	69b9      	ldr	r1, [r7, #24]
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	e841 2300 	strex	r3, r2, [r1]
 8004c30:	617b      	str	r3, [r7, #20]
   return(result);
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1e5      	bne.n	8004c04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e011      	b.n	8004c70 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3758      	adds	r7, #88	@ 0x58
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	4613      	mov	r3, r2
 8004c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c88:	e04f      	b.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d04b      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c92:	f7fc f8a5 	bl	8000de0 <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d302      	bcc.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e04e      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d037      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d034      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b40      	cmp	r3, #64	@ 0x40
 8004cc4:	d031      	beq.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	69db      	ldr	r3, [r3, #28]
 8004ccc:	f003 0308 	and.w	r3, r3, #8
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d110      	bne.n	8004cf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2208      	movs	r2, #8
 8004cda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f838 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e029      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d04:	d111      	bne.n	8004d2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d10:	68f8      	ldr	r0, [r7, #12]
 8004d12:	f000 f81e 	bl	8004d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e00f      	b.n	8004d4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	4013      	ands	r3, r2
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	bf0c      	ite	eq
 8004d3a:	2301      	moveq	r3, #1
 8004d3c:	2300      	movne	r3, #0
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	79fb      	ldrb	r3, [r7, #7]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d0a0      	beq.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d48:	2300      	movs	r3, #0
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b095      	sub	sp, #84	@ 0x54
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d7a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e6      	bne.n	8004d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3308      	adds	r3, #8
 8004d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a3b      	ldr	r3, [r7, #32]
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f023 0301 	bic.w	r3, r3, #1
 8004da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d118      	bne.n	8004dfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	e853 3f00 	ldrex	r3, [r3]
 8004dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f023 0310 	bic.w	r3, r3, #16
 8004ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	69ba      	ldr	r2, [r7, #24]
 8004dee:	e841 2300 	strex	r3, r2, [r1]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1e6      	bne.n	8004dc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e0e:	bf00      	nop
 8004e10:	3754      	adds	r7, #84	@ 0x54
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
	...

08004e1c <std>:
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	b510      	push	{r4, lr}
 8004e20:	4604      	mov	r4, r0
 8004e22:	e9c0 3300 	strd	r3, r3, [r0]
 8004e26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e2a:	6083      	str	r3, [r0, #8]
 8004e2c:	8181      	strh	r1, [r0, #12]
 8004e2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e30:	81c2      	strh	r2, [r0, #14]
 8004e32:	6183      	str	r3, [r0, #24]
 8004e34:	4619      	mov	r1, r3
 8004e36:	2208      	movs	r2, #8
 8004e38:	305c      	adds	r0, #92	@ 0x5c
 8004e3a:	f000 f9c2 	bl	80051c2 <memset>
 8004e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e74 <std+0x58>)
 8004e40:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e42:	4b0d      	ldr	r3, [pc, #52]	@ (8004e78 <std+0x5c>)
 8004e44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <std+0x60>)
 8004e48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e80 <std+0x64>)
 8004e4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e84 <std+0x68>)
 8004e50:	6224      	str	r4, [r4, #32]
 8004e52:	429c      	cmp	r4, r3
 8004e54:	d006      	beq.n	8004e64 <std+0x48>
 8004e56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e5a:	4294      	cmp	r4, r2
 8004e5c:	d002      	beq.n	8004e64 <std+0x48>
 8004e5e:	33d0      	adds	r3, #208	@ 0xd0
 8004e60:	429c      	cmp	r4, r3
 8004e62:	d105      	bne.n	8004e70 <std+0x54>
 8004e64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e6c:	f000 ba22 	b.w	80052b4 <__retarget_lock_init_recursive>
 8004e70:	bd10      	pop	{r4, pc}
 8004e72:	bf00      	nop
 8004e74:	0800513d 	.word	0x0800513d
 8004e78:	0800515f 	.word	0x0800515f
 8004e7c:	08005197 	.word	0x08005197
 8004e80:	080051bb 	.word	0x080051bb
 8004e84:	2000023c 	.word	0x2000023c

08004e88 <stdio_exit_handler>:
 8004e88:	4a02      	ldr	r2, [pc, #8]	@ (8004e94 <stdio_exit_handler+0xc>)
 8004e8a:	4903      	ldr	r1, [pc, #12]	@ (8004e98 <stdio_exit_handler+0x10>)
 8004e8c:	4803      	ldr	r0, [pc, #12]	@ (8004e9c <stdio_exit_handler+0x14>)
 8004e8e:	f000 b869 	b.w	8004f64 <_fwalk_sglue>
 8004e92:	bf00      	nop
 8004e94:	2000000c 	.word	0x2000000c
 8004e98:	08005b65 	.word	0x08005b65
 8004e9c:	2000001c 	.word	0x2000001c

08004ea0 <cleanup_stdio>:
 8004ea0:	6841      	ldr	r1, [r0, #4]
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed4 <cleanup_stdio+0x34>)
 8004ea4:	4299      	cmp	r1, r3
 8004ea6:	b510      	push	{r4, lr}
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	d001      	beq.n	8004eb0 <cleanup_stdio+0x10>
 8004eac:	f000 fe5a 	bl	8005b64 <_fflush_r>
 8004eb0:	68a1      	ldr	r1, [r4, #8]
 8004eb2:	4b09      	ldr	r3, [pc, #36]	@ (8004ed8 <cleanup_stdio+0x38>)
 8004eb4:	4299      	cmp	r1, r3
 8004eb6:	d002      	beq.n	8004ebe <cleanup_stdio+0x1e>
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f000 fe53 	bl	8005b64 <_fflush_r>
 8004ebe:	68e1      	ldr	r1, [r4, #12]
 8004ec0:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <cleanup_stdio+0x3c>)
 8004ec2:	4299      	cmp	r1, r3
 8004ec4:	d004      	beq.n	8004ed0 <cleanup_stdio+0x30>
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ecc:	f000 be4a 	b.w	8005b64 <_fflush_r>
 8004ed0:	bd10      	pop	{r4, pc}
 8004ed2:	bf00      	nop
 8004ed4:	2000023c 	.word	0x2000023c
 8004ed8:	200002a4 	.word	0x200002a4
 8004edc:	2000030c 	.word	0x2000030c

08004ee0 <global_stdio_init.part.0>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <global_stdio_init.part.0+0x30>)
 8004ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8004f14 <global_stdio_init.part.0+0x34>)
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	@ (8004f18 <global_stdio_init.part.0+0x38>)
 8004ee8:	601a      	str	r2, [r3, #0]
 8004eea:	4620      	mov	r0, r4
 8004eec:	2200      	movs	r2, #0
 8004eee:	2104      	movs	r1, #4
 8004ef0:	f7ff ff94 	bl	8004e1c <std>
 8004ef4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ef8:	2201      	movs	r2, #1
 8004efa:	2109      	movs	r1, #9
 8004efc:	f7ff ff8e 	bl	8004e1c <std>
 8004f00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f04:	2202      	movs	r2, #2
 8004f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f0a:	2112      	movs	r1, #18
 8004f0c:	f7ff bf86 	b.w	8004e1c <std>
 8004f10:	20000374 	.word	0x20000374
 8004f14:	2000023c 	.word	0x2000023c
 8004f18:	08004e89 	.word	0x08004e89

08004f1c <__sfp_lock_acquire>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	@ (8004f24 <__sfp_lock_acquire+0x8>)
 8004f1e:	f000 b9ca 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 8004f22:	bf00      	nop
 8004f24:	2000037d 	.word	0x2000037d

08004f28 <__sfp_lock_release>:
 8004f28:	4801      	ldr	r0, [pc, #4]	@ (8004f30 <__sfp_lock_release+0x8>)
 8004f2a:	f000 b9c5 	b.w	80052b8 <__retarget_lock_release_recursive>
 8004f2e:	bf00      	nop
 8004f30:	2000037d 	.word	0x2000037d

08004f34 <__sinit>:
 8004f34:	b510      	push	{r4, lr}
 8004f36:	4604      	mov	r4, r0
 8004f38:	f7ff fff0 	bl	8004f1c <__sfp_lock_acquire>
 8004f3c:	6a23      	ldr	r3, [r4, #32]
 8004f3e:	b11b      	cbz	r3, 8004f48 <__sinit+0x14>
 8004f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f44:	f7ff bff0 	b.w	8004f28 <__sfp_lock_release>
 8004f48:	4b04      	ldr	r3, [pc, #16]	@ (8004f5c <__sinit+0x28>)
 8004f4a:	6223      	str	r3, [r4, #32]
 8004f4c:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <__sinit+0x2c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1f5      	bne.n	8004f40 <__sinit+0xc>
 8004f54:	f7ff ffc4 	bl	8004ee0 <global_stdio_init.part.0>
 8004f58:	e7f2      	b.n	8004f40 <__sinit+0xc>
 8004f5a:	bf00      	nop
 8004f5c:	08004ea1 	.word	0x08004ea1
 8004f60:	20000374 	.word	0x20000374

08004f64 <_fwalk_sglue>:
 8004f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f68:	4607      	mov	r7, r0
 8004f6a:	4688      	mov	r8, r1
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	2600      	movs	r6, #0
 8004f70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f74:	f1b9 0901 	subs.w	r9, r9, #1
 8004f78:	d505      	bpl.n	8004f86 <_fwalk_sglue+0x22>
 8004f7a:	6824      	ldr	r4, [r4, #0]
 8004f7c:	2c00      	cmp	r4, #0
 8004f7e:	d1f7      	bne.n	8004f70 <_fwalk_sglue+0xc>
 8004f80:	4630      	mov	r0, r6
 8004f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f86:	89ab      	ldrh	r3, [r5, #12]
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d907      	bls.n	8004f9c <_fwalk_sglue+0x38>
 8004f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f90:	3301      	adds	r3, #1
 8004f92:	d003      	beq.n	8004f9c <_fwalk_sglue+0x38>
 8004f94:	4629      	mov	r1, r5
 8004f96:	4638      	mov	r0, r7
 8004f98:	47c0      	blx	r8
 8004f9a:	4306      	orrs	r6, r0
 8004f9c:	3568      	adds	r5, #104	@ 0x68
 8004f9e:	e7e9      	b.n	8004f74 <_fwalk_sglue+0x10>

08004fa0 <iprintf>:
 8004fa0:	b40f      	push	{r0, r1, r2, r3}
 8004fa2:	b507      	push	{r0, r1, r2, lr}
 8004fa4:	4906      	ldr	r1, [pc, #24]	@ (8004fc0 <iprintf+0x20>)
 8004fa6:	ab04      	add	r3, sp, #16
 8004fa8:	6808      	ldr	r0, [r1, #0]
 8004faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fae:	6881      	ldr	r1, [r0, #8]
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	f000 faad 	bl	8005510 <_vfiprintf_r>
 8004fb6:	b003      	add	sp, #12
 8004fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fbc:	b004      	add	sp, #16
 8004fbe:	4770      	bx	lr
 8004fc0:	20000018 	.word	0x20000018

08004fc4 <setbuf>:
 8004fc4:	fab1 f281 	clz	r2, r1
 8004fc8:	0952      	lsrs	r2, r2, #5
 8004fca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fce:	0052      	lsls	r2, r2, #1
 8004fd0:	f000 b800 	b.w	8004fd4 <setvbuf>

08004fd4 <setvbuf>:
 8004fd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	461d      	mov	r5, r3
 8004fda:	4b57      	ldr	r3, [pc, #348]	@ (8005138 <setvbuf+0x164>)
 8004fdc:	681f      	ldr	r7, [r3, #0]
 8004fde:	4604      	mov	r4, r0
 8004fe0:	460e      	mov	r6, r1
 8004fe2:	4690      	mov	r8, r2
 8004fe4:	b127      	cbz	r7, 8004ff0 <setvbuf+0x1c>
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	b913      	cbnz	r3, 8004ff0 <setvbuf+0x1c>
 8004fea:	4638      	mov	r0, r7
 8004fec:	f7ff ffa2 	bl	8004f34 <__sinit>
 8004ff0:	f1b8 0f02 	cmp.w	r8, #2
 8004ff4:	d006      	beq.n	8005004 <setvbuf+0x30>
 8004ff6:	f1b8 0f01 	cmp.w	r8, #1
 8004ffa:	f200 809a 	bhi.w	8005132 <setvbuf+0x15e>
 8004ffe:	2d00      	cmp	r5, #0
 8005000:	f2c0 8097 	blt.w	8005132 <setvbuf+0x15e>
 8005004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005006:	07d9      	lsls	r1, r3, #31
 8005008:	d405      	bmi.n	8005016 <setvbuf+0x42>
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	059a      	lsls	r2, r3, #22
 800500e:	d402      	bmi.n	8005016 <setvbuf+0x42>
 8005010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005012:	f000 f950 	bl	80052b6 <__retarget_lock_acquire_recursive>
 8005016:	4621      	mov	r1, r4
 8005018:	4638      	mov	r0, r7
 800501a:	f000 fda3 	bl	8005b64 <_fflush_r>
 800501e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005020:	b141      	cbz	r1, 8005034 <setvbuf+0x60>
 8005022:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005026:	4299      	cmp	r1, r3
 8005028:	d002      	beq.n	8005030 <setvbuf+0x5c>
 800502a:	4638      	mov	r0, r7
 800502c:	f000 f946 	bl	80052bc <_free_r>
 8005030:	2300      	movs	r3, #0
 8005032:	6363      	str	r3, [r4, #52]	@ 0x34
 8005034:	2300      	movs	r3, #0
 8005036:	61a3      	str	r3, [r4, #24]
 8005038:	6063      	str	r3, [r4, #4]
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	061b      	lsls	r3, r3, #24
 800503e:	d503      	bpl.n	8005048 <setvbuf+0x74>
 8005040:	6921      	ldr	r1, [r4, #16]
 8005042:	4638      	mov	r0, r7
 8005044:	f000 f93a 	bl	80052bc <_free_r>
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	f1b8 0f02 	cmp.w	r8, #2
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	d061      	beq.n	800511e <setvbuf+0x14a>
 800505a:	ab01      	add	r3, sp, #4
 800505c:	466a      	mov	r2, sp
 800505e:	4621      	mov	r1, r4
 8005060:	4638      	mov	r0, r7
 8005062:	f000 fda7 	bl	8005bb4 <__swhatbuf_r>
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	4318      	orrs	r0, r3
 800506a:	81a0      	strh	r0, [r4, #12]
 800506c:	bb2d      	cbnz	r5, 80050ba <setvbuf+0xe6>
 800506e:	9d00      	ldr	r5, [sp, #0]
 8005070:	4628      	mov	r0, r5
 8005072:	f000 f96d 	bl	8005350 <malloc>
 8005076:	4606      	mov	r6, r0
 8005078:	2800      	cmp	r0, #0
 800507a:	d152      	bne.n	8005122 <setvbuf+0x14e>
 800507c:	f8dd 9000 	ldr.w	r9, [sp]
 8005080:	45a9      	cmp	r9, r5
 8005082:	d140      	bne.n	8005106 <setvbuf+0x132>
 8005084:	f04f 35ff 	mov.w	r5, #4294967295
 8005088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800508c:	f043 0202 	orr.w	r2, r3, #2
 8005090:	81a2      	strh	r2, [r4, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	60a2      	str	r2, [r4, #8]
 8005096:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800509a:	6022      	str	r2, [r4, #0]
 800509c:	6122      	str	r2, [r4, #16]
 800509e:	2201      	movs	r2, #1
 80050a0:	6162      	str	r2, [r4, #20]
 80050a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050a4:	07d6      	lsls	r6, r2, #31
 80050a6:	d404      	bmi.n	80050b2 <setvbuf+0xde>
 80050a8:	0598      	lsls	r0, r3, #22
 80050aa:	d402      	bmi.n	80050b2 <setvbuf+0xde>
 80050ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ae:	f000 f903 	bl	80052b8 <__retarget_lock_release_recursive>
 80050b2:	4628      	mov	r0, r5
 80050b4:	b003      	add	sp, #12
 80050b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050ba:	2e00      	cmp	r6, #0
 80050bc:	d0d8      	beq.n	8005070 <setvbuf+0x9c>
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	b913      	cbnz	r3, 80050c8 <setvbuf+0xf4>
 80050c2:	4638      	mov	r0, r7
 80050c4:	f7ff ff36 	bl	8004f34 <__sinit>
 80050c8:	f1b8 0f01 	cmp.w	r8, #1
 80050cc:	bf08      	it	eq
 80050ce:	89a3      	ldrheq	r3, [r4, #12]
 80050d0:	6026      	str	r6, [r4, #0]
 80050d2:	bf04      	itt	eq
 80050d4:	f043 0301 	orreq.w	r3, r3, #1
 80050d8:	81a3      	strheq	r3, [r4, #12]
 80050da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050de:	f013 0208 	ands.w	r2, r3, #8
 80050e2:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80050e6:	d01e      	beq.n	8005126 <setvbuf+0x152>
 80050e8:	07d9      	lsls	r1, r3, #31
 80050ea:	bf41      	itttt	mi
 80050ec:	2200      	movmi	r2, #0
 80050ee:	426d      	negmi	r5, r5
 80050f0:	60a2      	strmi	r2, [r4, #8]
 80050f2:	61a5      	strmi	r5, [r4, #24]
 80050f4:	bf58      	it	pl
 80050f6:	60a5      	strpl	r5, [r4, #8]
 80050f8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050fa:	07d2      	lsls	r2, r2, #31
 80050fc:	d401      	bmi.n	8005102 <setvbuf+0x12e>
 80050fe:	059b      	lsls	r3, r3, #22
 8005100:	d513      	bpl.n	800512a <setvbuf+0x156>
 8005102:	2500      	movs	r5, #0
 8005104:	e7d5      	b.n	80050b2 <setvbuf+0xde>
 8005106:	4648      	mov	r0, r9
 8005108:	f000 f922 	bl	8005350 <malloc>
 800510c:	4606      	mov	r6, r0
 800510e:	2800      	cmp	r0, #0
 8005110:	d0b8      	beq.n	8005084 <setvbuf+0xb0>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	464d      	mov	r5, r9
 800511c:	e7cf      	b.n	80050be <setvbuf+0xea>
 800511e:	2500      	movs	r5, #0
 8005120:	e7b2      	b.n	8005088 <setvbuf+0xb4>
 8005122:	46a9      	mov	r9, r5
 8005124:	e7f5      	b.n	8005112 <setvbuf+0x13e>
 8005126:	60a2      	str	r2, [r4, #8]
 8005128:	e7e6      	b.n	80050f8 <setvbuf+0x124>
 800512a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800512c:	f000 f8c4 	bl	80052b8 <__retarget_lock_release_recursive>
 8005130:	e7e7      	b.n	8005102 <setvbuf+0x12e>
 8005132:	f04f 35ff 	mov.w	r5, #4294967295
 8005136:	e7bc      	b.n	80050b2 <setvbuf+0xde>
 8005138:	20000018 	.word	0x20000018

0800513c <__sread>:
 800513c:	b510      	push	{r4, lr}
 800513e:	460c      	mov	r4, r1
 8005140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005144:	f000 f868 	bl	8005218 <_read_r>
 8005148:	2800      	cmp	r0, #0
 800514a:	bfab      	itete	ge
 800514c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800514e:	89a3      	ldrhlt	r3, [r4, #12]
 8005150:	181b      	addge	r3, r3, r0
 8005152:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005156:	bfac      	ite	ge
 8005158:	6563      	strge	r3, [r4, #84]	@ 0x54
 800515a:	81a3      	strhlt	r3, [r4, #12]
 800515c:	bd10      	pop	{r4, pc}

0800515e <__swrite>:
 800515e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005162:	461f      	mov	r7, r3
 8005164:	898b      	ldrh	r3, [r1, #12]
 8005166:	05db      	lsls	r3, r3, #23
 8005168:	4605      	mov	r5, r0
 800516a:	460c      	mov	r4, r1
 800516c:	4616      	mov	r6, r2
 800516e:	d505      	bpl.n	800517c <__swrite+0x1e>
 8005170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005174:	2302      	movs	r3, #2
 8005176:	2200      	movs	r2, #0
 8005178:	f000 f83c 	bl	80051f4 <_lseek_r>
 800517c:	89a3      	ldrh	r3, [r4, #12]
 800517e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005182:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005186:	81a3      	strh	r3, [r4, #12]
 8005188:	4632      	mov	r2, r6
 800518a:	463b      	mov	r3, r7
 800518c:	4628      	mov	r0, r5
 800518e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005192:	f000 b853 	b.w	800523c <_write_r>

08005196 <__sseek>:
 8005196:	b510      	push	{r4, lr}
 8005198:	460c      	mov	r4, r1
 800519a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800519e:	f000 f829 	bl	80051f4 <_lseek_r>
 80051a2:	1c43      	adds	r3, r0, #1
 80051a4:	89a3      	ldrh	r3, [r4, #12]
 80051a6:	bf15      	itete	ne
 80051a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051b2:	81a3      	strheq	r3, [r4, #12]
 80051b4:	bf18      	it	ne
 80051b6:	81a3      	strhne	r3, [r4, #12]
 80051b8:	bd10      	pop	{r4, pc}

080051ba <__sclose>:
 80051ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051be:	f000 b809 	b.w	80051d4 <_close_r>

080051c2 <memset>:
 80051c2:	4402      	add	r2, r0
 80051c4:	4603      	mov	r3, r0
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d100      	bne.n	80051cc <memset+0xa>
 80051ca:	4770      	bx	lr
 80051cc:	f803 1b01 	strb.w	r1, [r3], #1
 80051d0:	e7f9      	b.n	80051c6 <memset+0x4>
	...

080051d4 <_close_r>:
 80051d4:	b538      	push	{r3, r4, r5, lr}
 80051d6:	4d06      	ldr	r5, [pc, #24]	@ (80051f0 <_close_r+0x1c>)
 80051d8:	2300      	movs	r3, #0
 80051da:	4604      	mov	r4, r0
 80051dc:	4608      	mov	r0, r1
 80051de:	602b      	str	r3, [r5, #0]
 80051e0:	f7fb fcfd 	bl	8000bde <_close>
 80051e4:	1c43      	adds	r3, r0, #1
 80051e6:	d102      	bne.n	80051ee <_close_r+0x1a>
 80051e8:	682b      	ldr	r3, [r5, #0]
 80051ea:	b103      	cbz	r3, 80051ee <_close_r+0x1a>
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	bd38      	pop	{r3, r4, r5, pc}
 80051f0:	20000378 	.word	0x20000378

080051f4 <_lseek_r>:
 80051f4:	b538      	push	{r3, r4, r5, lr}
 80051f6:	4d07      	ldr	r5, [pc, #28]	@ (8005214 <_lseek_r+0x20>)
 80051f8:	4604      	mov	r4, r0
 80051fa:	4608      	mov	r0, r1
 80051fc:	4611      	mov	r1, r2
 80051fe:	2200      	movs	r2, #0
 8005200:	602a      	str	r2, [r5, #0]
 8005202:	461a      	mov	r2, r3
 8005204:	f7fb fd12 	bl	8000c2c <_lseek>
 8005208:	1c43      	adds	r3, r0, #1
 800520a:	d102      	bne.n	8005212 <_lseek_r+0x1e>
 800520c:	682b      	ldr	r3, [r5, #0]
 800520e:	b103      	cbz	r3, 8005212 <_lseek_r+0x1e>
 8005210:	6023      	str	r3, [r4, #0]
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	20000378 	.word	0x20000378

08005218 <_read_r>:
 8005218:	b538      	push	{r3, r4, r5, lr}
 800521a:	4d07      	ldr	r5, [pc, #28]	@ (8005238 <_read_r+0x20>)
 800521c:	4604      	mov	r4, r0
 800521e:	4608      	mov	r0, r1
 8005220:	4611      	mov	r1, r2
 8005222:	2200      	movs	r2, #0
 8005224:	602a      	str	r2, [r5, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	f7fb fcbc 	bl	8000ba4 <_read>
 800522c:	1c43      	adds	r3, r0, #1
 800522e:	d102      	bne.n	8005236 <_read_r+0x1e>
 8005230:	682b      	ldr	r3, [r5, #0]
 8005232:	b103      	cbz	r3, 8005236 <_read_r+0x1e>
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	bd38      	pop	{r3, r4, r5, pc}
 8005238:	20000378 	.word	0x20000378

0800523c <_write_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	4d07      	ldr	r5, [pc, #28]	@ (800525c <_write_r+0x20>)
 8005240:	4604      	mov	r4, r0
 8005242:	4608      	mov	r0, r1
 8005244:	4611      	mov	r1, r2
 8005246:	2200      	movs	r2, #0
 8005248:	602a      	str	r2, [r5, #0]
 800524a:	461a      	mov	r2, r3
 800524c:	f7fb fb2e 	bl	80008ac <_write>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d102      	bne.n	800525a <_write_r+0x1e>
 8005254:	682b      	ldr	r3, [r5, #0]
 8005256:	b103      	cbz	r3, 800525a <_write_r+0x1e>
 8005258:	6023      	str	r3, [r4, #0]
 800525a:	bd38      	pop	{r3, r4, r5, pc}
 800525c:	20000378 	.word	0x20000378

08005260 <__errno>:
 8005260:	4b01      	ldr	r3, [pc, #4]	@ (8005268 <__errno+0x8>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop
 8005268:	20000018 	.word	0x20000018

0800526c <__libc_init_array>:
 800526c:	b570      	push	{r4, r5, r6, lr}
 800526e:	4d0d      	ldr	r5, [pc, #52]	@ (80052a4 <__libc_init_array+0x38>)
 8005270:	4c0d      	ldr	r4, [pc, #52]	@ (80052a8 <__libc_init_array+0x3c>)
 8005272:	1b64      	subs	r4, r4, r5
 8005274:	10a4      	asrs	r4, r4, #2
 8005276:	2600      	movs	r6, #0
 8005278:	42a6      	cmp	r6, r4
 800527a:	d109      	bne.n	8005290 <__libc_init_array+0x24>
 800527c:	4d0b      	ldr	r5, [pc, #44]	@ (80052ac <__libc_init_array+0x40>)
 800527e:	4c0c      	ldr	r4, [pc, #48]	@ (80052b0 <__libc_init_array+0x44>)
 8005280:	f000 fdc0 	bl	8005e04 <_init>
 8005284:	1b64      	subs	r4, r4, r5
 8005286:	10a4      	asrs	r4, r4, #2
 8005288:	2600      	movs	r6, #0
 800528a:	42a6      	cmp	r6, r4
 800528c:	d105      	bne.n	800529a <__libc_init_array+0x2e>
 800528e:	bd70      	pop	{r4, r5, r6, pc}
 8005290:	f855 3b04 	ldr.w	r3, [r5], #4
 8005294:	4798      	blx	r3
 8005296:	3601      	adds	r6, #1
 8005298:	e7ee      	b.n	8005278 <__libc_init_array+0xc>
 800529a:	f855 3b04 	ldr.w	r3, [r5], #4
 800529e:	4798      	blx	r3
 80052a0:	3601      	adds	r6, #1
 80052a2:	e7f2      	b.n	800528a <__libc_init_array+0x1e>
 80052a4:	08005ee0 	.word	0x08005ee0
 80052a8:	08005ee0 	.word	0x08005ee0
 80052ac:	08005ee0 	.word	0x08005ee0
 80052b0:	08005ee4 	.word	0x08005ee4

080052b4 <__retarget_lock_init_recursive>:
 80052b4:	4770      	bx	lr

080052b6 <__retarget_lock_acquire_recursive>:
 80052b6:	4770      	bx	lr

080052b8 <__retarget_lock_release_recursive>:
 80052b8:	4770      	bx	lr
	...

080052bc <_free_r>:
 80052bc:	b538      	push	{r3, r4, r5, lr}
 80052be:	4605      	mov	r5, r0
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d041      	beq.n	8005348 <_free_r+0x8c>
 80052c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052c8:	1f0c      	subs	r4, r1, #4
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	bfb8      	it	lt
 80052ce:	18e4      	addlt	r4, r4, r3
 80052d0:	f000 f8e8 	bl	80054a4 <__malloc_lock>
 80052d4:	4a1d      	ldr	r2, [pc, #116]	@ (800534c <_free_r+0x90>)
 80052d6:	6813      	ldr	r3, [r2, #0]
 80052d8:	b933      	cbnz	r3, 80052e8 <_free_r+0x2c>
 80052da:	6063      	str	r3, [r4, #4]
 80052dc:	6014      	str	r4, [r2, #0]
 80052de:	4628      	mov	r0, r5
 80052e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80052e4:	f000 b8e4 	b.w	80054b0 <__malloc_unlock>
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	d908      	bls.n	80052fe <_free_r+0x42>
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	1821      	adds	r1, r4, r0
 80052f0:	428b      	cmp	r3, r1
 80052f2:	bf01      	itttt	eq
 80052f4:	6819      	ldreq	r1, [r3, #0]
 80052f6:	685b      	ldreq	r3, [r3, #4]
 80052f8:	1809      	addeq	r1, r1, r0
 80052fa:	6021      	streq	r1, [r4, #0]
 80052fc:	e7ed      	b.n	80052da <_free_r+0x1e>
 80052fe:	461a      	mov	r2, r3
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b10b      	cbz	r3, 8005308 <_free_r+0x4c>
 8005304:	42a3      	cmp	r3, r4
 8005306:	d9fa      	bls.n	80052fe <_free_r+0x42>
 8005308:	6811      	ldr	r1, [r2, #0]
 800530a:	1850      	adds	r0, r2, r1
 800530c:	42a0      	cmp	r0, r4
 800530e:	d10b      	bne.n	8005328 <_free_r+0x6c>
 8005310:	6820      	ldr	r0, [r4, #0]
 8005312:	4401      	add	r1, r0
 8005314:	1850      	adds	r0, r2, r1
 8005316:	4283      	cmp	r3, r0
 8005318:	6011      	str	r1, [r2, #0]
 800531a:	d1e0      	bne.n	80052de <_free_r+0x22>
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	6053      	str	r3, [r2, #4]
 8005322:	4408      	add	r0, r1
 8005324:	6010      	str	r0, [r2, #0]
 8005326:	e7da      	b.n	80052de <_free_r+0x22>
 8005328:	d902      	bls.n	8005330 <_free_r+0x74>
 800532a:	230c      	movs	r3, #12
 800532c:	602b      	str	r3, [r5, #0]
 800532e:	e7d6      	b.n	80052de <_free_r+0x22>
 8005330:	6820      	ldr	r0, [r4, #0]
 8005332:	1821      	adds	r1, r4, r0
 8005334:	428b      	cmp	r3, r1
 8005336:	bf04      	itt	eq
 8005338:	6819      	ldreq	r1, [r3, #0]
 800533a:	685b      	ldreq	r3, [r3, #4]
 800533c:	6063      	str	r3, [r4, #4]
 800533e:	bf04      	itt	eq
 8005340:	1809      	addeq	r1, r1, r0
 8005342:	6021      	streq	r1, [r4, #0]
 8005344:	6054      	str	r4, [r2, #4]
 8005346:	e7ca      	b.n	80052de <_free_r+0x22>
 8005348:	bd38      	pop	{r3, r4, r5, pc}
 800534a:	bf00      	nop
 800534c:	20000384 	.word	0x20000384

08005350 <malloc>:
 8005350:	4b02      	ldr	r3, [pc, #8]	@ (800535c <malloc+0xc>)
 8005352:	4601      	mov	r1, r0
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	f000 b825 	b.w	80053a4 <_malloc_r>
 800535a:	bf00      	nop
 800535c:	20000018 	.word	0x20000018

08005360 <sbrk_aligned>:
 8005360:	b570      	push	{r4, r5, r6, lr}
 8005362:	4e0f      	ldr	r6, [pc, #60]	@ (80053a0 <sbrk_aligned+0x40>)
 8005364:	460c      	mov	r4, r1
 8005366:	6831      	ldr	r1, [r6, #0]
 8005368:	4605      	mov	r5, r0
 800536a:	b911      	cbnz	r1, 8005372 <sbrk_aligned+0x12>
 800536c:	f000 fd3a 	bl	8005de4 <_sbrk_r>
 8005370:	6030      	str	r0, [r6, #0]
 8005372:	4621      	mov	r1, r4
 8005374:	4628      	mov	r0, r5
 8005376:	f000 fd35 	bl	8005de4 <_sbrk_r>
 800537a:	1c43      	adds	r3, r0, #1
 800537c:	d103      	bne.n	8005386 <sbrk_aligned+0x26>
 800537e:	f04f 34ff 	mov.w	r4, #4294967295
 8005382:	4620      	mov	r0, r4
 8005384:	bd70      	pop	{r4, r5, r6, pc}
 8005386:	1cc4      	adds	r4, r0, #3
 8005388:	f024 0403 	bic.w	r4, r4, #3
 800538c:	42a0      	cmp	r0, r4
 800538e:	d0f8      	beq.n	8005382 <sbrk_aligned+0x22>
 8005390:	1a21      	subs	r1, r4, r0
 8005392:	4628      	mov	r0, r5
 8005394:	f000 fd26 	bl	8005de4 <_sbrk_r>
 8005398:	3001      	adds	r0, #1
 800539a:	d1f2      	bne.n	8005382 <sbrk_aligned+0x22>
 800539c:	e7ef      	b.n	800537e <sbrk_aligned+0x1e>
 800539e:	bf00      	nop
 80053a0:	20000380 	.word	0x20000380

080053a4 <_malloc_r>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	1ccd      	adds	r5, r1, #3
 80053aa:	f025 0503 	bic.w	r5, r5, #3
 80053ae:	3508      	adds	r5, #8
 80053b0:	2d0c      	cmp	r5, #12
 80053b2:	bf38      	it	cc
 80053b4:	250c      	movcc	r5, #12
 80053b6:	2d00      	cmp	r5, #0
 80053b8:	4606      	mov	r6, r0
 80053ba:	db01      	blt.n	80053c0 <_malloc_r+0x1c>
 80053bc:	42a9      	cmp	r1, r5
 80053be:	d904      	bls.n	80053ca <_malloc_r+0x26>
 80053c0:	230c      	movs	r3, #12
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	2000      	movs	r0, #0
 80053c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054a0 <_malloc_r+0xfc>
 80053ce:	f000 f869 	bl	80054a4 <__malloc_lock>
 80053d2:	f8d8 3000 	ldr.w	r3, [r8]
 80053d6:	461c      	mov	r4, r3
 80053d8:	bb44      	cbnz	r4, 800542c <_malloc_r+0x88>
 80053da:	4629      	mov	r1, r5
 80053dc:	4630      	mov	r0, r6
 80053de:	f7ff ffbf 	bl	8005360 <sbrk_aligned>
 80053e2:	1c43      	adds	r3, r0, #1
 80053e4:	4604      	mov	r4, r0
 80053e6:	d158      	bne.n	800549a <_malloc_r+0xf6>
 80053e8:	f8d8 4000 	ldr.w	r4, [r8]
 80053ec:	4627      	mov	r7, r4
 80053ee:	2f00      	cmp	r7, #0
 80053f0:	d143      	bne.n	800547a <_malloc_r+0xd6>
 80053f2:	2c00      	cmp	r4, #0
 80053f4:	d04b      	beq.n	800548e <_malloc_r+0xea>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	4639      	mov	r1, r7
 80053fa:	4630      	mov	r0, r6
 80053fc:	eb04 0903 	add.w	r9, r4, r3
 8005400:	f000 fcf0 	bl	8005de4 <_sbrk_r>
 8005404:	4581      	cmp	r9, r0
 8005406:	d142      	bne.n	800548e <_malloc_r+0xea>
 8005408:	6821      	ldr	r1, [r4, #0]
 800540a:	1a6d      	subs	r5, r5, r1
 800540c:	4629      	mov	r1, r5
 800540e:	4630      	mov	r0, r6
 8005410:	f7ff ffa6 	bl	8005360 <sbrk_aligned>
 8005414:	3001      	adds	r0, #1
 8005416:	d03a      	beq.n	800548e <_malloc_r+0xea>
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	442b      	add	r3, r5
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	f8d8 3000 	ldr.w	r3, [r8]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	bb62      	cbnz	r2, 8005480 <_malloc_r+0xdc>
 8005426:	f8c8 7000 	str.w	r7, [r8]
 800542a:	e00f      	b.n	800544c <_malloc_r+0xa8>
 800542c:	6822      	ldr	r2, [r4, #0]
 800542e:	1b52      	subs	r2, r2, r5
 8005430:	d420      	bmi.n	8005474 <_malloc_r+0xd0>
 8005432:	2a0b      	cmp	r2, #11
 8005434:	d917      	bls.n	8005466 <_malloc_r+0xc2>
 8005436:	1961      	adds	r1, r4, r5
 8005438:	42a3      	cmp	r3, r4
 800543a:	6025      	str	r5, [r4, #0]
 800543c:	bf18      	it	ne
 800543e:	6059      	strne	r1, [r3, #4]
 8005440:	6863      	ldr	r3, [r4, #4]
 8005442:	bf08      	it	eq
 8005444:	f8c8 1000 	streq.w	r1, [r8]
 8005448:	5162      	str	r2, [r4, r5]
 800544a:	604b      	str	r3, [r1, #4]
 800544c:	4630      	mov	r0, r6
 800544e:	f000 f82f 	bl	80054b0 <__malloc_unlock>
 8005452:	f104 000b 	add.w	r0, r4, #11
 8005456:	1d23      	adds	r3, r4, #4
 8005458:	f020 0007 	bic.w	r0, r0, #7
 800545c:	1ac2      	subs	r2, r0, r3
 800545e:	bf1c      	itt	ne
 8005460:	1a1b      	subne	r3, r3, r0
 8005462:	50a3      	strne	r3, [r4, r2]
 8005464:	e7af      	b.n	80053c6 <_malloc_r+0x22>
 8005466:	6862      	ldr	r2, [r4, #4]
 8005468:	42a3      	cmp	r3, r4
 800546a:	bf0c      	ite	eq
 800546c:	f8c8 2000 	streq.w	r2, [r8]
 8005470:	605a      	strne	r2, [r3, #4]
 8005472:	e7eb      	b.n	800544c <_malloc_r+0xa8>
 8005474:	4623      	mov	r3, r4
 8005476:	6864      	ldr	r4, [r4, #4]
 8005478:	e7ae      	b.n	80053d8 <_malloc_r+0x34>
 800547a:	463c      	mov	r4, r7
 800547c:	687f      	ldr	r7, [r7, #4]
 800547e:	e7b6      	b.n	80053ee <_malloc_r+0x4a>
 8005480:	461a      	mov	r2, r3
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	42a3      	cmp	r3, r4
 8005486:	d1fb      	bne.n	8005480 <_malloc_r+0xdc>
 8005488:	2300      	movs	r3, #0
 800548a:	6053      	str	r3, [r2, #4]
 800548c:	e7de      	b.n	800544c <_malloc_r+0xa8>
 800548e:	230c      	movs	r3, #12
 8005490:	6033      	str	r3, [r6, #0]
 8005492:	4630      	mov	r0, r6
 8005494:	f000 f80c 	bl	80054b0 <__malloc_unlock>
 8005498:	e794      	b.n	80053c4 <_malloc_r+0x20>
 800549a:	6005      	str	r5, [r0, #0]
 800549c:	e7d6      	b.n	800544c <_malloc_r+0xa8>
 800549e:	bf00      	nop
 80054a0:	20000384 	.word	0x20000384

080054a4 <__malloc_lock>:
 80054a4:	4801      	ldr	r0, [pc, #4]	@ (80054ac <__malloc_lock+0x8>)
 80054a6:	f7ff bf06 	b.w	80052b6 <__retarget_lock_acquire_recursive>
 80054aa:	bf00      	nop
 80054ac:	2000037c 	.word	0x2000037c

080054b0 <__malloc_unlock>:
 80054b0:	4801      	ldr	r0, [pc, #4]	@ (80054b8 <__malloc_unlock+0x8>)
 80054b2:	f7ff bf01 	b.w	80052b8 <__retarget_lock_release_recursive>
 80054b6:	bf00      	nop
 80054b8:	2000037c 	.word	0x2000037c

080054bc <__sfputc_r>:
 80054bc:	6893      	ldr	r3, [r2, #8]
 80054be:	3b01      	subs	r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	b410      	push	{r4}
 80054c4:	6093      	str	r3, [r2, #8]
 80054c6:	da08      	bge.n	80054da <__sfputc_r+0x1e>
 80054c8:	6994      	ldr	r4, [r2, #24]
 80054ca:	42a3      	cmp	r3, r4
 80054cc:	db01      	blt.n	80054d2 <__sfputc_r+0x16>
 80054ce:	290a      	cmp	r1, #10
 80054d0:	d103      	bne.n	80054da <__sfputc_r+0x1e>
 80054d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054d6:	f000 bbcf 	b.w	8005c78 <__swbuf_r>
 80054da:	6813      	ldr	r3, [r2, #0]
 80054dc:	1c58      	adds	r0, r3, #1
 80054de:	6010      	str	r0, [r2, #0]
 80054e0:	7019      	strb	r1, [r3, #0]
 80054e2:	4608      	mov	r0, r1
 80054e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <__sfputs_r>:
 80054ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ec:	4606      	mov	r6, r0
 80054ee:	460f      	mov	r7, r1
 80054f0:	4614      	mov	r4, r2
 80054f2:	18d5      	adds	r5, r2, r3
 80054f4:	42ac      	cmp	r4, r5
 80054f6:	d101      	bne.n	80054fc <__sfputs_r+0x12>
 80054f8:	2000      	movs	r0, #0
 80054fa:	e007      	b.n	800550c <__sfputs_r+0x22>
 80054fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005500:	463a      	mov	r2, r7
 8005502:	4630      	mov	r0, r6
 8005504:	f7ff ffda 	bl	80054bc <__sfputc_r>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d1f3      	bne.n	80054f4 <__sfputs_r+0xa>
 800550c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005510 <_vfiprintf_r>:
 8005510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005514:	460d      	mov	r5, r1
 8005516:	b09d      	sub	sp, #116	@ 0x74
 8005518:	4614      	mov	r4, r2
 800551a:	4698      	mov	r8, r3
 800551c:	4606      	mov	r6, r0
 800551e:	b118      	cbz	r0, 8005528 <_vfiprintf_r+0x18>
 8005520:	6a03      	ldr	r3, [r0, #32]
 8005522:	b90b      	cbnz	r3, 8005528 <_vfiprintf_r+0x18>
 8005524:	f7ff fd06 	bl	8004f34 <__sinit>
 8005528:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800552a:	07d9      	lsls	r1, r3, #31
 800552c:	d405      	bmi.n	800553a <_vfiprintf_r+0x2a>
 800552e:	89ab      	ldrh	r3, [r5, #12]
 8005530:	059a      	lsls	r2, r3, #22
 8005532:	d402      	bmi.n	800553a <_vfiprintf_r+0x2a>
 8005534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005536:	f7ff febe 	bl	80052b6 <__retarget_lock_acquire_recursive>
 800553a:	89ab      	ldrh	r3, [r5, #12]
 800553c:	071b      	lsls	r3, r3, #28
 800553e:	d501      	bpl.n	8005544 <_vfiprintf_r+0x34>
 8005540:	692b      	ldr	r3, [r5, #16]
 8005542:	b99b      	cbnz	r3, 800556c <_vfiprintf_r+0x5c>
 8005544:	4629      	mov	r1, r5
 8005546:	4630      	mov	r0, r6
 8005548:	f000 fbd4 	bl	8005cf4 <__swsetup_r>
 800554c:	b170      	cbz	r0, 800556c <_vfiprintf_r+0x5c>
 800554e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005550:	07dc      	lsls	r4, r3, #31
 8005552:	d504      	bpl.n	800555e <_vfiprintf_r+0x4e>
 8005554:	f04f 30ff 	mov.w	r0, #4294967295
 8005558:	b01d      	add	sp, #116	@ 0x74
 800555a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800555e:	89ab      	ldrh	r3, [r5, #12]
 8005560:	0598      	lsls	r0, r3, #22
 8005562:	d4f7      	bmi.n	8005554 <_vfiprintf_r+0x44>
 8005564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005566:	f7ff fea7 	bl	80052b8 <__retarget_lock_release_recursive>
 800556a:	e7f3      	b.n	8005554 <_vfiprintf_r+0x44>
 800556c:	2300      	movs	r3, #0
 800556e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005570:	2320      	movs	r3, #32
 8005572:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005576:	f8cd 800c 	str.w	r8, [sp, #12]
 800557a:	2330      	movs	r3, #48	@ 0x30
 800557c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800572c <_vfiprintf_r+0x21c>
 8005580:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005584:	f04f 0901 	mov.w	r9, #1
 8005588:	4623      	mov	r3, r4
 800558a:	469a      	mov	sl, r3
 800558c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005590:	b10a      	cbz	r2, 8005596 <_vfiprintf_r+0x86>
 8005592:	2a25      	cmp	r2, #37	@ 0x25
 8005594:	d1f9      	bne.n	800558a <_vfiprintf_r+0x7a>
 8005596:	ebba 0b04 	subs.w	fp, sl, r4
 800559a:	d00b      	beq.n	80055b4 <_vfiprintf_r+0xa4>
 800559c:	465b      	mov	r3, fp
 800559e:	4622      	mov	r2, r4
 80055a0:	4629      	mov	r1, r5
 80055a2:	4630      	mov	r0, r6
 80055a4:	f7ff ffa1 	bl	80054ea <__sfputs_r>
 80055a8:	3001      	adds	r0, #1
 80055aa:	f000 80a7 	beq.w	80056fc <_vfiprintf_r+0x1ec>
 80055ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055b0:	445a      	add	r2, fp
 80055b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055b4:	f89a 3000 	ldrb.w	r3, [sl]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f000 809f 	beq.w	80056fc <_vfiprintf_r+0x1ec>
 80055be:	2300      	movs	r3, #0
 80055c0:	f04f 32ff 	mov.w	r2, #4294967295
 80055c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055c8:	f10a 0a01 	add.w	sl, sl, #1
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	9307      	str	r3, [sp, #28]
 80055d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80055d6:	4654      	mov	r4, sl
 80055d8:	2205      	movs	r2, #5
 80055da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055de:	4853      	ldr	r0, [pc, #332]	@ (800572c <_vfiprintf_r+0x21c>)
 80055e0:	f7fa fdf6 	bl	80001d0 <memchr>
 80055e4:	9a04      	ldr	r2, [sp, #16]
 80055e6:	b9d8      	cbnz	r0, 8005620 <_vfiprintf_r+0x110>
 80055e8:	06d1      	lsls	r1, r2, #27
 80055ea:	bf44      	itt	mi
 80055ec:	2320      	movmi	r3, #32
 80055ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055f2:	0713      	lsls	r3, r2, #28
 80055f4:	bf44      	itt	mi
 80055f6:	232b      	movmi	r3, #43	@ 0x2b
 80055f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005600:	2b2a      	cmp	r3, #42	@ 0x2a
 8005602:	d015      	beq.n	8005630 <_vfiprintf_r+0x120>
 8005604:	9a07      	ldr	r2, [sp, #28]
 8005606:	4654      	mov	r4, sl
 8005608:	2000      	movs	r0, #0
 800560a:	f04f 0c0a 	mov.w	ip, #10
 800560e:	4621      	mov	r1, r4
 8005610:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005614:	3b30      	subs	r3, #48	@ 0x30
 8005616:	2b09      	cmp	r3, #9
 8005618:	d94b      	bls.n	80056b2 <_vfiprintf_r+0x1a2>
 800561a:	b1b0      	cbz	r0, 800564a <_vfiprintf_r+0x13a>
 800561c:	9207      	str	r2, [sp, #28]
 800561e:	e014      	b.n	800564a <_vfiprintf_r+0x13a>
 8005620:	eba0 0308 	sub.w	r3, r0, r8
 8005624:	fa09 f303 	lsl.w	r3, r9, r3
 8005628:	4313      	orrs	r3, r2
 800562a:	9304      	str	r3, [sp, #16]
 800562c:	46a2      	mov	sl, r4
 800562e:	e7d2      	b.n	80055d6 <_vfiprintf_r+0xc6>
 8005630:	9b03      	ldr	r3, [sp, #12]
 8005632:	1d19      	adds	r1, r3, #4
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	9103      	str	r1, [sp, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfbb      	ittet	lt
 800563c:	425b      	neglt	r3, r3
 800563e:	f042 0202 	orrlt.w	r2, r2, #2
 8005642:	9307      	strge	r3, [sp, #28]
 8005644:	9307      	strlt	r3, [sp, #28]
 8005646:	bfb8      	it	lt
 8005648:	9204      	strlt	r2, [sp, #16]
 800564a:	7823      	ldrb	r3, [r4, #0]
 800564c:	2b2e      	cmp	r3, #46	@ 0x2e
 800564e:	d10a      	bne.n	8005666 <_vfiprintf_r+0x156>
 8005650:	7863      	ldrb	r3, [r4, #1]
 8005652:	2b2a      	cmp	r3, #42	@ 0x2a
 8005654:	d132      	bne.n	80056bc <_vfiprintf_r+0x1ac>
 8005656:	9b03      	ldr	r3, [sp, #12]
 8005658:	1d1a      	adds	r2, r3, #4
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	9203      	str	r2, [sp, #12]
 800565e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005662:	3402      	adds	r4, #2
 8005664:	9305      	str	r3, [sp, #20]
 8005666:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800573c <_vfiprintf_r+0x22c>
 800566a:	7821      	ldrb	r1, [r4, #0]
 800566c:	2203      	movs	r2, #3
 800566e:	4650      	mov	r0, sl
 8005670:	f7fa fdae 	bl	80001d0 <memchr>
 8005674:	b138      	cbz	r0, 8005686 <_vfiprintf_r+0x176>
 8005676:	9b04      	ldr	r3, [sp, #16]
 8005678:	eba0 000a 	sub.w	r0, r0, sl
 800567c:	2240      	movs	r2, #64	@ 0x40
 800567e:	4082      	lsls	r2, r0
 8005680:	4313      	orrs	r3, r2
 8005682:	3401      	adds	r4, #1
 8005684:	9304      	str	r3, [sp, #16]
 8005686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800568a:	4829      	ldr	r0, [pc, #164]	@ (8005730 <_vfiprintf_r+0x220>)
 800568c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005690:	2206      	movs	r2, #6
 8005692:	f7fa fd9d 	bl	80001d0 <memchr>
 8005696:	2800      	cmp	r0, #0
 8005698:	d03f      	beq.n	800571a <_vfiprintf_r+0x20a>
 800569a:	4b26      	ldr	r3, [pc, #152]	@ (8005734 <_vfiprintf_r+0x224>)
 800569c:	bb1b      	cbnz	r3, 80056e6 <_vfiprintf_r+0x1d6>
 800569e:	9b03      	ldr	r3, [sp, #12]
 80056a0:	3307      	adds	r3, #7
 80056a2:	f023 0307 	bic.w	r3, r3, #7
 80056a6:	3308      	adds	r3, #8
 80056a8:	9303      	str	r3, [sp, #12]
 80056aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ac:	443b      	add	r3, r7
 80056ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80056b0:	e76a      	b.n	8005588 <_vfiprintf_r+0x78>
 80056b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80056b6:	460c      	mov	r4, r1
 80056b8:	2001      	movs	r0, #1
 80056ba:	e7a8      	b.n	800560e <_vfiprintf_r+0xfe>
 80056bc:	2300      	movs	r3, #0
 80056be:	3401      	adds	r4, #1
 80056c0:	9305      	str	r3, [sp, #20]
 80056c2:	4619      	mov	r1, r3
 80056c4:	f04f 0c0a 	mov.w	ip, #10
 80056c8:	4620      	mov	r0, r4
 80056ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056ce:	3a30      	subs	r2, #48	@ 0x30
 80056d0:	2a09      	cmp	r2, #9
 80056d2:	d903      	bls.n	80056dc <_vfiprintf_r+0x1cc>
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0c6      	beq.n	8005666 <_vfiprintf_r+0x156>
 80056d8:	9105      	str	r1, [sp, #20]
 80056da:	e7c4      	b.n	8005666 <_vfiprintf_r+0x156>
 80056dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80056e0:	4604      	mov	r4, r0
 80056e2:	2301      	movs	r3, #1
 80056e4:	e7f0      	b.n	80056c8 <_vfiprintf_r+0x1b8>
 80056e6:	ab03      	add	r3, sp, #12
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	462a      	mov	r2, r5
 80056ec:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <_vfiprintf_r+0x228>)
 80056ee:	a904      	add	r1, sp, #16
 80056f0:	4630      	mov	r0, r6
 80056f2:	f3af 8000 	nop.w
 80056f6:	4607      	mov	r7, r0
 80056f8:	1c78      	adds	r0, r7, #1
 80056fa:	d1d6      	bne.n	80056aa <_vfiprintf_r+0x19a>
 80056fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056fe:	07d9      	lsls	r1, r3, #31
 8005700:	d405      	bmi.n	800570e <_vfiprintf_r+0x1fe>
 8005702:	89ab      	ldrh	r3, [r5, #12]
 8005704:	059a      	lsls	r2, r3, #22
 8005706:	d402      	bmi.n	800570e <_vfiprintf_r+0x1fe>
 8005708:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800570a:	f7ff fdd5 	bl	80052b8 <__retarget_lock_release_recursive>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	065b      	lsls	r3, r3, #25
 8005712:	f53f af1f 	bmi.w	8005554 <_vfiprintf_r+0x44>
 8005716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005718:	e71e      	b.n	8005558 <_vfiprintf_r+0x48>
 800571a:	ab03      	add	r3, sp, #12
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	462a      	mov	r2, r5
 8005720:	4b05      	ldr	r3, [pc, #20]	@ (8005738 <_vfiprintf_r+0x228>)
 8005722:	a904      	add	r1, sp, #16
 8005724:	4630      	mov	r0, r6
 8005726:	f000 f879 	bl	800581c <_printf_i>
 800572a:	e7e4      	b.n	80056f6 <_vfiprintf_r+0x1e6>
 800572c:	08005ea4 	.word	0x08005ea4
 8005730:	08005eae 	.word	0x08005eae
 8005734:	00000000 	.word	0x00000000
 8005738:	080054eb 	.word	0x080054eb
 800573c:	08005eaa 	.word	0x08005eaa

08005740 <_printf_common>:
 8005740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005744:	4616      	mov	r6, r2
 8005746:	4698      	mov	r8, r3
 8005748:	688a      	ldr	r2, [r1, #8]
 800574a:	690b      	ldr	r3, [r1, #16]
 800574c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005750:	4293      	cmp	r3, r2
 8005752:	bfb8      	it	lt
 8005754:	4613      	movlt	r3, r2
 8005756:	6033      	str	r3, [r6, #0]
 8005758:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800575c:	4607      	mov	r7, r0
 800575e:	460c      	mov	r4, r1
 8005760:	b10a      	cbz	r2, 8005766 <_printf_common+0x26>
 8005762:	3301      	adds	r3, #1
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	0699      	lsls	r1, r3, #26
 800576a:	bf42      	ittt	mi
 800576c:	6833      	ldrmi	r3, [r6, #0]
 800576e:	3302      	addmi	r3, #2
 8005770:	6033      	strmi	r3, [r6, #0]
 8005772:	6825      	ldr	r5, [r4, #0]
 8005774:	f015 0506 	ands.w	r5, r5, #6
 8005778:	d106      	bne.n	8005788 <_printf_common+0x48>
 800577a:	f104 0a19 	add.w	sl, r4, #25
 800577e:	68e3      	ldr	r3, [r4, #12]
 8005780:	6832      	ldr	r2, [r6, #0]
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	42ab      	cmp	r3, r5
 8005786:	dc26      	bgt.n	80057d6 <_printf_common+0x96>
 8005788:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800578c:	6822      	ldr	r2, [r4, #0]
 800578e:	3b00      	subs	r3, #0
 8005790:	bf18      	it	ne
 8005792:	2301      	movne	r3, #1
 8005794:	0692      	lsls	r2, r2, #26
 8005796:	d42b      	bmi.n	80057f0 <_printf_common+0xb0>
 8005798:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800579c:	4641      	mov	r1, r8
 800579e:	4638      	mov	r0, r7
 80057a0:	47c8      	blx	r9
 80057a2:	3001      	adds	r0, #1
 80057a4:	d01e      	beq.n	80057e4 <_printf_common+0xa4>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	6922      	ldr	r2, [r4, #16]
 80057aa:	f003 0306 	and.w	r3, r3, #6
 80057ae:	2b04      	cmp	r3, #4
 80057b0:	bf02      	ittt	eq
 80057b2:	68e5      	ldreq	r5, [r4, #12]
 80057b4:	6833      	ldreq	r3, [r6, #0]
 80057b6:	1aed      	subeq	r5, r5, r3
 80057b8:	68a3      	ldr	r3, [r4, #8]
 80057ba:	bf0c      	ite	eq
 80057bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057c0:	2500      	movne	r5, #0
 80057c2:	4293      	cmp	r3, r2
 80057c4:	bfc4      	itt	gt
 80057c6:	1a9b      	subgt	r3, r3, r2
 80057c8:	18ed      	addgt	r5, r5, r3
 80057ca:	2600      	movs	r6, #0
 80057cc:	341a      	adds	r4, #26
 80057ce:	42b5      	cmp	r5, r6
 80057d0:	d11a      	bne.n	8005808 <_printf_common+0xc8>
 80057d2:	2000      	movs	r0, #0
 80057d4:	e008      	b.n	80057e8 <_printf_common+0xa8>
 80057d6:	2301      	movs	r3, #1
 80057d8:	4652      	mov	r2, sl
 80057da:	4641      	mov	r1, r8
 80057dc:	4638      	mov	r0, r7
 80057de:	47c8      	blx	r9
 80057e0:	3001      	adds	r0, #1
 80057e2:	d103      	bne.n	80057ec <_printf_common+0xac>
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295
 80057e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ec:	3501      	adds	r5, #1
 80057ee:	e7c6      	b.n	800577e <_printf_common+0x3e>
 80057f0:	18e1      	adds	r1, r4, r3
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	2030      	movs	r0, #48	@ 0x30
 80057f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80057fa:	4422      	add	r2, r4
 80057fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005800:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005804:	3302      	adds	r3, #2
 8005806:	e7c7      	b.n	8005798 <_printf_common+0x58>
 8005808:	2301      	movs	r3, #1
 800580a:	4622      	mov	r2, r4
 800580c:	4641      	mov	r1, r8
 800580e:	4638      	mov	r0, r7
 8005810:	47c8      	blx	r9
 8005812:	3001      	adds	r0, #1
 8005814:	d0e6      	beq.n	80057e4 <_printf_common+0xa4>
 8005816:	3601      	adds	r6, #1
 8005818:	e7d9      	b.n	80057ce <_printf_common+0x8e>
	...

0800581c <_printf_i>:
 800581c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005820:	7e0f      	ldrb	r7, [r1, #24]
 8005822:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005824:	2f78      	cmp	r7, #120	@ 0x78
 8005826:	4691      	mov	r9, r2
 8005828:	4680      	mov	r8, r0
 800582a:	460c      	mov	r4, r1
 800582c:	469a      	mov	sl, r3
 800582e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005832:	d807      	bhi.n	8005844 <_printf_i+0x28>
 8005834:	2f62      	cmp	r7, #98	@ 0x62
 8005836:	d80a      	bhi.n	800584e <_printf_i+0x32>
 8005838:	2f00      	cmp	r7, #0
 800583a:	f000 80d2 	beq.w	80059e2 <_printf_i+0x1c6>
 800583e:	2f58      	cmp	r7, #88	@ 0x58
 8005840:	f000 80b9 	beq.w	80059b6 <_printf_i+0x19a>
 8005844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005848:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800584c:	e03a      	b.n	80058c4 <_printf_i+0xa8>
 800584e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005852:	2b15      	cmp	r3, #21
 8005854:	d8f6      	bhi.n	8005844 <_printf_i+0x28>
 8005856:	a101      	add	r1, pc, #4	@ (adr r1, 800585c <_printf_i+0x40>)
 8005858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800585c:	080058b5 	.word	0x080058b5
 8005860:	080058c9 	.word	0x080058c9
 8005864:	08005845 	.word	0x08005845
 8005868:	08005845 	.word	0x08005845
 800586c:	08005845 	.word	0x08005845
 8005870:	08005845 	.word	0x08005845
 8005874:	080058c9 	.word	0x080058c9
 8005878:	08005845 	.word	0x08005845
 800587c:	08005845 	.word	0x08005845
 8005880:	08005845 	.word	0x08005845
 8005884:	08005845 	.word	0x08005845
 8005888:	080059c9 	.word	0x080059c9
 800588c:	080058f3 	.word	0x080058f3
 8005890:	08005983 	.word	0x08005983
 8005894:	08005845 	.word	0x08005845
 8005898:	08005845 	.word	0x08005845
 800589c:	080059eb 	.word	0x080059eb
 80058a0:	08005845 	.word	0x08005845
 80058a4:	080058f3 	.word	0x080058f3
 80058a8:	08005845 	.word	0x08005845
 80058ac:	08005845 	.word	0x08005845
 80058b0:	0800598b 	.word	0x0800598b
 80058b4:	6833      	ldr	r3, [r6, #0]
 80058b6:	1d1a      	adds	r2, r3, #4
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6032      	str	r2, [r6, #0]
 80058bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058c4:	2301      	movs	r3, #1
 80058c6:	e09d      	b.n	8005a04 <_printf_i+0x1e8>
 80058c8:	6833      	ldr	r3, [r6, #0]
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	1d19      	adds	r1, r3, #4
 80058ce:	6031      	str	r1, [r6, #0]
 80058d0:	0606      	lsls	r6, r0, #24
 80058d2:	d501      	bpl.n	80058d8 <_printf_i+0xbc>
 80058d4:	681d      	ldr	r5, [r3, #0]
 80058d6:	e003      	b.n	80058e0 <_printf_i+0xc4>
 80058d8:	0645      	lsls	r5, r0, #25
 80058da:	d5fb      	bpl.n	80058d4 <_printf_i+0xb8>
 80058dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058e0:	2d00      	cmp	r5, #0
 80058e2:	da03      	bge.n	80058ec <_printf_i+0xd0>
 80058e4:	232d      	movs	r3, #45	@ 0x2d
 80058e6:	426d      	negs	r5, r5
 80058e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058ec:	4859      	ldr	r0, [pc, #356]	@ (8005a54 <_printf_i+0x238>)
 80058ee:	230a      	movs	r3, #10
 80058f0:	e011      	b.n	8005916 <_printf_i+0xfa>
 80058f2:	6821      	ldr	r1, [r4, #0]
 80058f4:	6833      	ldr	r3, [r6, #0]
 80058f6:	0608      	lsls	r0, r1, #24
 80058f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80058fc:	d402      	bmi.n	8005904 <_printf_i+0xe8>
 80058fe:	0649      	lsls	r1, r1, #25
 8005900:	bf48      	it	mi
 8005902:	b2ad      	uxthmi	r5, r5
 8005904:	2f6f      	cmp	r7, #111	@ 0x6f
 8005906:	4853      	ldr	r0, [pc, #332]	@ (8005a54 <_printf_i+0x238>)
 8005908:	6033      	str	r3, [r6, #0]
 800590a:	bf14      	ite	ne
 800590c:	230a      	movne	r3, #10
 800590e:	2308      	moveq	r3, #8
 8005910:	2100      	movs	r1, #0
 8005912:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005916:	6866      	ldr	r6, [r4, #4]
 8005918:	60a6      	str	r6, [r4, #8]
 800591a:	2e00      	cmp	r6, #0
 800591c:	bfa2      	ittt	ge
 800591e:	6821      	ldrge	r1, [r4, #0]
 8005920:	f021 0104 	bicge.w	r1, r1, #4
 8005924:	6021      	strge	r1, [r4, #0]
 8005926:	b90d      	cbnz	r5, 800592c <_printf_i+0x110>
 8005928:	2e00      	cmp	r6, #0
 800592a:	d04b      	beq.n	80059c4 <_printf_i+0x1a8>
 800592c:	4616      	mov	r6, r2
 800592e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005932:	fb03 5711 	mls	r7, r3, r1, r5
 8005936:	5dc7      	ldrb	r7, [r0, r7]
 8005938:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800593c:	462f      	mov	r7, r5
 800593e:	42bb      	cmp	r3, r7
 8005940:	460d      	mov	r5, r1
 8005942:	d9f4      	bls.n	800592e <_printf_i+0x112>
 8005944:	2b08      	cmp	r3, #8
 8005946:	d10b      	bne.n	8005960 <_printf_i+0x144>
 8005948:	6823      	ldr	r3, [r4, #0]
 800594a:	07df      	lsls	r7, r3, #31
 800594c:	d508      	bpl.n	8005960 <_printf_i+0x144>
 800594e:	6923      	ldr	r3, [r4, #16]
 8005950:	6861      	ldr	r1, [r4, #4]
 8005952:	4299      	cmp	r1, r3
 8005954:	bfde      	ittt	le
 8005956:	2330      	movle	r3, #48	@ 0x30
 8005958:	f806 3c01 	strble.w	r3, [r6, #-1]
 800595c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005960:	1b92      	subs	r2, r2, r6
 8005962:	6122      	str	r2, [r4, #16]
 8005964:	f8cd a000 	str.w	sl, [sp]
 8005968:	464b      	mov	r3, r9
 800596a:	aa03      	add	r2, sp, #12
 800596c:	4621      	mov	r1, r4
 800596e:	4640      	mov	r0, r8
 8005970:	f7ff fee6 	bl	8005740 <_printf_common>
 8005974:	3001      	adds	r0, #1
 8005976:	d14a      	bne.n	8005a0e <_printf_i+0x1f2>
 8005978:	f04f 30ff 	mov.w	r0, #4294967295
 800597c:	b004      	add	sp, #16
 800597e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f043 0320 	orr.w	r3, r3, #32
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	4833      	ldr	r0, [pc, #204]	@ (8005a58 <_printf_i+0x23c>)
 800598c:	2778      	movs	r7, #120	@ 0x78
 800598e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	6831      	ldr	r1, [r6, #0]
 8005996:	061f      	lsls	r7, r3, #24
 8005998:	f851 5b04 	ldr.w	r5, [r1], #4
 800599c:	d402      	bmi.n	80059a4 <_printf_i+0x188>
 800599e:	065f      	lsls	r7, r3, #25
 80059a0:	bf48      	it	mi
 80059a2:	b2ad      	uxthmi	r5, r5
 80059a4:	6031      	str	r1, [r6, #0]
 80059a6:	07d9      	lsls	r1, r3, #31
 80059a8:	bf44      	itt	mi
 80059aa:	f043 0320 	orrmi.w	r3, r3, #32
 80059ae:	6023      	strmi	r3, [r4, #0]
 80059b0:	b11d      	cbz	r5, 80059ba <_printf_i+0x19e>
 80059b2:	2310      	movs	r3, #16
 80059b4:	e7ac      	b.n	8005910 <_printf_i+0xf4>
 80059b6:	4827      	ldr	r0, [pc, #156]	@ (8005a54 <_printf_i+0x238>)
 80059b8:	e7e9      	b.n	800598e <_printf_i+0x172>
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	f023 0320 	bic.w	r3, r3, #32
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	e7f6      	b.n	80059b2 <_printf_i+0x196>
 80059c4:	4616      	mov	r6, r2
 80059c6:	e7bd      	b.n	8005944 <_printf_i+0x128>
 80059c8:	6833      	ldr	r3, [r6, #0]
 80059ca:	6825      	ldr	r5, [r4, #0]
 80059cc:	6961      	ldr	r1, [r4, #20]
 80059ce:	1d18      	adds	r0, r3, #4
 80059d0:	6030      	str	r0, [r6, #0]
 80059d2:	062e      	lsls	r6, r5, #24
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	d501      	bpl.n	80059dc <_printf_i+0x1c0>
 80059d8:	6019      	str	r1, [r3, #0]
 80059da:	e002      	b.n	80059e2 <_printf_i+0x1c6>
 80059dc:	0668      	lsls	r0, r5, #25
 80059de:	d5fb      	bpl.n	80059d8 <_printf_i+0x1bc>
 80059e0:	8019      	strh	r1, [r3, #0]
 80059e2:	2300      	movs	r3, #0
 80059e4:	6123      	str	r3, [r4, #16]
 80059e6:	4616      	mov	r6, r2
 80059e8:	e7bc      	b.n	8005964 <_printf_i+0x148>
 80059ea:	6833      	ldr	r3, [r6, #0]
 80059ec:	1d1a      	adds	r2, r3, #4
 80059ee:	6032      	str	r2, [r6, #0]
 80059f0:	681e      	ldr	r6, [r3, #0]
 80059f2:	6862      	ldr	r2, [r4, #4]
 80059f4:	2100      	movs	r1, #0
 80059f6:	4630      	mov	r0, r6
 80059f8:	f7fa fbea 	bl	80001d0 <memchr>
 80059fc:	b108      	cbz	r0, 8005a02 <_printf_i+0x1e6>
 80059fe:	1b80      	subs	r0, r0, r6
 8005a00:	6060      	str	r0, [r4, #4]
 8005a02:	6863      	ldr	r3, [r4, #4]
 8005a04:	6123      	str	r3, [r4, #16]
 8005a06:	2300      	movs	r3, #0
 8005a08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a0c:	e7aa      	b.n	8005964 <_printf_i+0x148>
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	4632      	mov	r2, r6
 8005a12:	4649      	mov	r1, r9
 8005a14:	4640      	mov	r0, r8
 8005a16:	47d0      	blx	sl
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d0ad      	beq.n	8005978 <_printf_i+0x15c>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	079b      	lsls	r3, r3, #30
 8005a20:	d413      	bmi.n	8005a4a <_printf_i+0x22e>
 8005a22:	68e0      	ldr	r0, [r4, #12]
 8005a24:	9b03      	ldr	r3, [sp, #12]
 8005a26:	4298      	cmp	r0, r3
 8005a28:	bfb8      	it	lt
 8005a2a:	4618      	movlt	r0, r3
 8005a2c:	e7a6      	b.n	800597c <_printf_i+0x160>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4632      	mov	r2, r6
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	47d0      	blx	sl
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d09d      	beq.n	8005978 <_printf_i+0x15c>
 8005a3c:	3501      	adds	r5, #1
 8005a3e:	68e3      	ldr	r3, [r4, #12]
 8005a40:	9903      	ldr	r1, [sp, #12]
 8005a42:	1a5b      	subs	r3, r3, r1
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dcf2      	bgt.n	8005a2e <_printf_i+0x212>
 8005a48:	e7eb      	b.n	8005a22 <_printf_i+0x206>
 8005a4a:	2500      	movs	r5, #0
 8005a4c:	f104 0619 	add.w	r6, r4, #25
 8005a50:	e7f5      	b.n	8005a3e <_printf_i+0x222>
 8005a52:	bf00      	nop
 8005a54:	08005eb5 	.word	0x08005eb5
 8005a58:	08005ec6 	.word	0x08005ec6

08005a5c <__sflush_r>:
 8005a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a64:	0716      	lsls	r6, r2, #28
 8005a66:	4605      	mov	r5, r0
 8005a68:	460c      	mov	r4, r1
 8005a6a:	d454      	bmi.n	8005b16 <__sflush_r+0xba>
 8005a6c:	684b      	ldr	r3, [r1, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dc02      	bgt.n	8005a78 <__sflush_r+0x1c>
 8005a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	dd48      	ble.n	8005b0a <__sflush_r+0xae>
 8005a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	d045      	beq.n	8005b0a <__sflush_r+0xae>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a84:	682f      	ldr	r7, [r5, #0]
 8005a86:	6a21      	ldr	r1, [r4, #32]
 8005a88:	602b      	str	r3, [r5, #0]
 8005a8a:	d030      	beq.n	8005aee <__sflush_r+0x92>
 8005a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	0759      	lsls	r1, r3, #29
 8005a92:	d505      	bpl.n	8005aa0 <__sflush_r+0x44>
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	1ad2      	subs	r2, r2, r3
 8005a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005a9a:	b10b      	cbz	r3, 8005aa0 <__sflush_r+0x44>
 8005a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005a9e:	1ad2      	subs	r2, r2, r3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005aa4:	6a21      	ldr	r1, [r4, #32]
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	47b0      	blx	r6
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	89a3      	ldrh	r3, [r4, #12]
 8005aae:	d106      	bne.n	8005abe <__sflush_r+0x62>
 8005ab0:	6829      	ldr	r1, [r5, #0]
 8005ab2:	291d      	cmp	r1, #29
 8005ab4:	d82b      	bhi.n	8005b0e <__sflush_r+0xb2>
 8005ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8005b60 <__sflush_r+0x104>)
 8005ab8:	410a      	asrs	r2, r1
 8005aba:	07d6      	lsls	r6, r2, #31
 8005abc:	d427      	bmi.n	8005b0e <__sflush_r+0xb2>
 8005abe:	2200      	movs	r2, #0
 8005ac0:	6062      	str	r2, [r4, #4]
 8005ac2:	04d9      	lsls	r1, r3, #19
 8005ac4:	6922      	ldr	r2, [r4, #16]
 8005ac6:	6022      	str	r2, [r4, #0]
 8005ac8:	d504      	bpl.n	8005ad4 <__sflush_r+0x78>
 8005aca:	1c42      	adds	r2, r0, #1
 8005acc:	d101      	bne.n	8005ad2 <__sflush_r+0x76>
 8005ace:	682b      	ldr	r3, [r5, #0]
 8005ad0:	b903      	cbnz	r3, 8005ad4 <__sflush_r+0x78>
 8005ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ad6:	602f      	str	r7, [r5, #0]
 8005ad8:	b1b9      	cbz	r1, 8005b0a <__sflush_r+0xae>
 8005ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ade:	4299      	cmp	r1, r3
 8005ae0:	d002      	beq.n	8005ae8 <__sflush_r+0x8c>
 8005ae2:	4628      	mov	r0, r5
 8005ae4:	f7ff fbea 	bl	80052bc <_free_r>
 8005ae8:	2300      	movs	r3, #0
 8005aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8005aec:	e00d      	b.n	8005b0a <__sflush_r+0xae>
 8005aee:	2301      	movs	r3, #1
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b0      	blx	r6
 8005af4:	4602      	mov	r2, r0
 8005af6:	1c50      	adds	r0, r2, #1
 8005af8:	d1c9      	bne.n	8005a8e <__sflush_r+0x32>
 8005afa:	682b      	ldr	r3, [r5, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0c6      	beq.n	8005a8e <__sflush_r+0x32>
 8005b00:	2b1d      	cmp	r3, #29
 8005b02:	d001      	beq.n	8005b08 <__sflush_r+0xac>
 8005b04:	2b16      	cmp	r3, #22
 8005b06:	d11e      	bne.n	8005b46 <__sflush_r+0xea>
 8005b08:	602f      	str	r7, [r5, #0]
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	e022      	b.n	8005b54 <__sflush_r+0xf8>
 8005b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b12:	b21b      	sxth	r3, r3
 8005b14:	e01b      	b.n	8005b4e <__sflush_r+0xf2>
 8005b16:	690f      	ldr	r7, [r1, #16]
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	d0f6      	beq.n	8005b0a <__sflush_r+0xae>
 8005b1c:	0793      	lsls	r3, r2, #30
 8005b1e:	680e      	ldr	r6, [r1, #0]
 8005b20:	bf08      	it	eq
 8005b22:	694b      	ldreq	r3, [r1, #20]
 8005b24:	600f      	str	r7, [r1, #0]
 8005b26:	bf18      	it	ne
 8005b28:	2300      	movne	r3, #0
 8005b2a:	eba6 0807 	sub.w	r8, r6, r7
 8005b2e:	608b      	str	r3, [r1, #8]
 8005b30:	f1b8 0f00 	cmp.w	r8, #0
 8005b34:	dde9      	ble.n	8005b0a <__sflush_r+0xae>
 8005b36:	6a21      	ldr	r1, [r4, #32]
 8005b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b3a:	4643      	mov	r3, r8
 8005b3c:	463a      	mov	r2, r7
 8005b3e:	4628      	mov	r0, r5
 8005b40:	47b0      	blx	r6
 8005b42:	2800      	cmp	r0, #0
 8005b44:	dc08      	bgt.n	8005b58 <__sflush_r+0xfc>
 8005b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b4e:	81a3      	strh	r3, [r4, #12]
 8005b50:	f04f 30ff 	mov.w	r0, #4294967295
 8005b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b58:	4407      	add	r7, r0
 8005b5a:	eba8 0800 	sub.w	r8, r8, r0
 8005b5e:	e7e7      	b.n	8005b30 <__sflush_r+0xd4>
 8005b60:	dfbffffe 	.word	0xdfbffffe

08005b64 <_fflush_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	690b      	ldr	r3, [r1, #16]
 8005b68:	4605      	mov	r5, r0
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	b913      	cbnz	r3, 8005b74 <_fflush_r+0x10>
 8005b6e:	2500      	movs	r5, #0
 8005b70:	4628      	mov	r0, r5
 8005b72:	bd38      	pop	{r3, r4, r5, pc}
 8005b74:	b118      	cbz	r0, 8005b7e <_fflush_r+0x1a>
 8005b76:	6a03      	ldr	r3, [r0, #32]
 8005b78:	b90b      	cbnz	r3, 8005b7e <_fflush_r+0x1a>
 8005b7a:	f7ff f9db 	bl	8004f34 <__sinit>
 8005b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f3      	beq.n	8005b6e <_fflush_r+0xa>
 8005b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b88:	07d0      	lsls	r0, r2, #31
 8005b8a:	d404      	bmi.n	8005b96 <_fflush_r+0x32>
 8005b8c:	0599      	lsls	r1, r3, #22
 8005b8e:	d402      	bmi.n	8005b96 <_fflush_r+0x32>
 8005b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b92:	f7ff fb90 	bl	80052b6 <__retarget_lock_acquire_recursive>
 8005b96:	4628      	mov	r0, r5
 8005b98:	4621      	mov	r1, r4
 8005b9a:	f7ff ff5f 	bl	8005a5c <__sflush_r>
 8005b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ba0:	07da      	lsls	r2, r3, #31
 8005ba2:	4605      	mov	r5, r0
 8005ba4:	d4e4      	bmi.n	8005b70 <_fflush_r+0xc>
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	059b      	lsls	r3, r3, #22
 8005baa:	d4e1      	bmi.n	8005b70 <_fflush_r+0xc>
 8005bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bae:	f7ff fb83 	bl	80052b8 <__retarget_lock_release_recursive>
 8005bb2:	e7dd      	b.n	8005b70 <_fflush_r+0xc>

08005bb4 <__swhatbuf_r>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	b096      	sub	sp, #88	@ 0x58
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	461e      	mov	r6, r3
 8005bc4:	da0d      	bge.n	8005be2 <__swhatbuf_r+0x2e>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	bf14      	ite	ne
 8005bd2:	2340      	movne	r3, #64	@ 0x40
 8005bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bd8:	2000      	movs	r0, #0
 8005bda:	6031      	str	r1, [r6, #0]
 8005bdc:	602b      	str	r3, [r5, #0]
 8005bde:	b016      	add	sp, #88	@ 0x58
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	466a      	mov	r2, sp
 8005be4:	f000 f8dc 	bl	8005da0 <_fstat_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	dbec      	blt.n	8005bc6 <__swhatbuf_r+0x12>
 8005bec:	9901      	ldr	r1, [sp, #4]
 8005bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005bf6:	4259      	negs	r1, r3
 8005bf8:	4159      	adcs	r1, r3
 8005bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bfe:	e7eb      	b.n	8005bd8 <__swhatbuf_r+0x24>

08005c00 <__smakebuf_r>:
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c04:	079d      	lsls	r5, r3, #30
 8005c06:	4606      	mov	r6, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	d507      	bpl.n	8005c1c <__smakebuf_r+0x1c>
 8005c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	2301      	movs	r3, #1
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	b003      	add	sp, #12
 8005c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1c:	ab01      	add	r3, sp, #4
 8005c1e:	466a      	mov	r2, sp
 8005c20:	f7ff ffc8 	bl	8005bb4 <__swhatbuf_r>
 8005c24:	9f00      	ldr	r7, [sp, #0]
 8005c26:	4605      	mov	r5, r0
 8005c28:	4639      	mov	r1, r7
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7ff fbba 	bl	80053a4 <_malloc_r>
 8005c30:	b948      	cbnz	r0, 8005c46 <__smakebuf_r+0x46>
 8005c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c36:	059a      	lsls	r2, r3, #22
 8005c38:	d4ee      	bmi.n	8005c18 <__smakebuf_r+0x18>
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	f043 0302 	orr.w	r3, r3, #2
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	e7e2      	b.n	8005c0c <__smakebuf_r+0xc>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	6020      	str	r0, [r4, #0]
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c56:	b15b      	cbz	r3, 8005c70 <__smakebuf_r+0x70>
 8005c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 f8b1 	bl	8005dc4 <_isatty_r>
 8005c62:	b128      	cbz	r0, 8005c70 <__smakebuf_r+0x70>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	431d      	orrs	r5, r3
 8005c74:	81a5      	strh	r5, [r4, #12]
 8005c76:	e7cf      	b.n	8005c18 <__smakebuf_r+0x18>

08005c78 <__swbuf_r>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	460e      	mov	r6, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	4605      	mov	r5, r0
 8005c80:	b118      	cbz	r0, 8005c8a <__swbuf_r+0x12>
 8005c82:	6a03      	ldr	r3, [r0, #32]
 8005c84:	b90b      	cbnz	r3, 8005c8a <__swbuf_r+0x12>
 8005c86:	f7ff f955 	bl	8004f34 <__sinit>
 8005c8a:	69a3      	ldr	r3, [r4, #24]
 8005c8c:	60a3      	str	r3, [r4, #8]
 8005c8e:	89a3      	ldrh	r3, [r4, #12]
 8005c90:	071a      	lsls	r2, r3, #28
 8005c92:	d501      	bpl.n	8005c98 <__swbuf_r+0x20>
 8005c94:	6923      	ldr	r3, [r4, #16]
 8005c96:	b943      	cbnz	r3, 8005caa <__swbuf_r+0x32>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f82a 	bl	8005cf4 <__swsetup_r>
 8005ca0:	b118      	cbz	r0, 8005caa <__swbuf_r+0x32>
 8005ca2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005caa:	6823      	ldr	r3, [r4, #0]
 8005cac:	6922      	ldr	r2, [r4, #16]
 8005cae:	1a98      	subs	r0, r3, r2
 8005cb0:	6963      	ldr	r3, [r4, #20]
 8005cb2:	b2f6      	uxtb	r6, r6
 8005cb4:	4283      	cmp	r3, r0
 8005cb6:	4637      	mov	r7, r6
 8005cb8:	dc05      	bgt.n	8005cc6 <__swbuf_r+0x4e>
 8005cba:	4621      	mov	r1, r4
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f7ff ff51 	bl	8005b64 <_fflush_r>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d1ed      	bne.n	8005ca2 <__swbuf_r+0x2a>
 8005cc6:	68a3      	ldr	r3, [r4, #8]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	60a3      	str	r3, [r4, #8]
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	1c5a      	adds	r2, r3, #1
 8005cd0:	6022      	str	r2, [r4, #0]
 8005cd2:	701e      	strb	r6, [r3, #0]
 8005cd4:	6962      	ldr	r2, [r4, #20]
 8005cd6:	1c43      	adds	r3, r0, #1
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d004      	beq.n	8005ce6 <__swbuf_r+0x6e>
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	07db      	lsls	r3, r3, #31
 8005ce0:	d5e1      	bpl.n	8005ca6 <__swbuf_r+0x2e>
 8005ce2:	2e0a      	cmp	r6, #10
 8005ce4:	d1df      	bne.n	8005ca6 <__swbuf_r+0x2e>
 8005ce6:	4621      	mov	r1, r4
 8005ce8:	4628      	mov	r0, r5
 8005cea:	f7ff ff3b 	bl	8005b64 <_fflush_r>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	d0d9      	beq.n	8005ca6 <__swbuf_r+0x2e>
 8005cf2:	e7d6      	b.n	8005ca2 <__swbuf_r+0x2a>

08005cf4 <__swsetup_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4b29      	ldr	r3, [pc, #164]	@ (8005d9c <__swsetup_r+0xa8>)
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	460c      	mov	r4, r1
 8005cfe:	b118      	cbz	r0, 8005d08 <__swsetup_r+0x14>
 8005d00:	6a03      	ldr	r3, [r0, #32]
 8005d02:	b90b      	cbnz	r3, 8005d08 <__swsetup_r+0x14>
 8005d04:	f7ff f916 	bl	8004f34 <__sinit>
 8005d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d0c:	0719      	lsls	r1, r3, #28
 8005d0e:	d422      	bmi.n	8005d56 <__swsetup_r+0x62>
 8005d10:	06da      	lsls	r2, r3, #27
 8005d12:	d407      	bmi.n	8005d24 <__swsetup_r+0x30>
 8005d14:	2209      	movs	r2, #9
 8005d16:	602a      	str	r2, [r5, #0]
 8005d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d1c:	81a3      	strh	r3, [r4, #12]
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d22:	e033      	b.n	8005d8c <__swsetup_r+0x98>
 8005d24:	0758      	lsls	r0, r3, #29
 8005d26:	d512      	bpl.n	8005d4e <__swsetup_r+0x5a>
 8005d28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d2a:	b141      	cbz	r1, 8005d3e <__swsetup_r+0x4a>
 8005d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d30:	4299      	cmp	r1, r3
 8005d32:	d002      	beq.n	8005d3a <__swsetup_r+0x46>
 8005d34:	4628      	mov	r0, r5
 8005d36:	f7ff fac1 	bl	80052bc <_free_r>
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	2300      	movs	r3, #0
 8005d48:	6063      	str	r3, [r4, #4]
 8005d4a:	6923      	ldr	r3, [r4, #16]
 8005d4c:	6023      	str	r3, [r4, #0]
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f043 0308 	orr.w	r3, r3, #8
 8005d54:	81a3      	strh	r3, [r4, #12]
 8005d56:	6923      	ldr	r3, [r4, #16]
 8005d58:	b94b      	cbnz	r3, 8005d6e <__swsetup_r+0x7a>
 8005d5a:	89a3      	ldrh	r3, [r4, #12]
 8005d5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005d60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d64:	d003      	beq.n	8005d6e <__swsetup_r+0x7a>
 8005d66:	4621      	mov	r1, r4
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7ff ff49 	bl	8005c00 <__smakebuf_r>
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	f013 0201 	ands.w	r2, r3, #1
 8005d76:	d00a      	beq.n	8005d8e <__swsetup_r+0x9a>
 8005d78:	2200      	movs	r2, #0
 8005d7a:	60a2      	str	r2, [r4, #8]
 8005d7c:	6962      	ldr	r2, [r4, #20]
 8005d7e:	4252      	negs	r2, r2
 8005d80:	61a2      	str	r2, [r4, #24]
 8005d82:	6922      	ldr	r2, [r4, #16]
 8005d84:	b942      	cbnz	r2, 8005d98 <__swsetup_r+0xa4>
 8005d86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005d8a:	d1c5      	bne.n	8005d18 <__swsetup_r+0x24>
 8005d8c:	bd38      	pop	{r3, r4, r5, pc}
 8005d8e:	0799      	lsls	r1, r3, #30
 8005d90:	bf58      	it	pl
 8005d92:	6962      	ldrpl	r2, [r4, #20]
 8005d94:	60a2      	str	r2, [r4, #8]
 8005d96:	e7f4      	b.n	8005d82 <__swsetup_r+0x8e>
 8005d98:	2000      	movs	r0, #0
 8005d9a:	e7f7      	b.n	8005d8c <__swsetup_r+0x98>
 8005d9c:	20000018 	.word	0x20000018

08005da0 <_fstat_r>:
 8005da0:	b538      	push	{r3, r4, r5, lr}
 8005da2:	4d07      	ldr	r5, [pc, #28]	@ (8005dc0 <_fstat_r+0x20>)
 8005da4:	2300      	movs	r3, #0
 8005da6:	4604      	mov	r4, r0
 8005da8:	4608      	mov	r0, r1
 8005daa:	4611      	mov	r1, r2
 8005dac:	602b      	str	r3, [r5, #0]
 8005dae:	f7fa ff22 	bl	8000bf6 <_fstat>
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	d102      	bne.n	8005dbc <_fstat_r+0x1c>
 8005db6:	682b      	ldr	r3, [r5, #0]
 8005db8:	b103      	cbz	r3, 8005dbc <_fstat_r+0x1c>
 8005dba:	6023      	str	r3, [r4, #0]
 8005dbc:	bd38      	pop	{r3, r4, r5, pc}
 8005dbe:	bf00      	nop
 8005dc0:	20000378 	.word	0x20000378

08005dc4 <_isatty_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d06      	ldr	r5, [pc, #24]	@ (8005de0 <_isatty_r+0x1c>)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fa ff21 	bl	8000c16 <_isatty>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_isatty_r+0x1a>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_isatty_r+0x1a>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	20000378 	.word	0x20000378

08005de4 <_sbrk_r>:
 8005de4:	b538      	push	{r3, r4, r5, lr}
 8005de6:	4d06      	ldr	r5, [pc, #24]	@ (8005e00 <_sbrk_r+0x1c>)
 8005de8:	2300      	movs	r3, #0
 8005dea:	4604      	mov	r4, r0
 8005dec:	4608      	mov	r0, r1
 8005dee:	602b      	str	r3, [r5, #0]
 8005df0:	f7fa ff2a 	bl	8000c48 <_sbrk>
 8005df4:	1c43      	adds	r3, r0, #1
 8005df6:	d102      	bne.n	8005dfe <_sbrk_r+0x1a>
 8005df8:	682b      	ldr	r3, [r5, #0]
 8005dfa:	b103      	cbz	r3, 8005dfe <_sbrk_r+0x1a>
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	bd38      	pop	{r3, r4, r5, pc}
 8005e00:	20000378 	.word	0x20000378

08005e04 <_init>:
 8005e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e06:	bf00      	nop
 8005e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0a:	bc08      	pop	{r3}
 8005e0c:	469e      	mov	lr, r3
 8005e0e:	4770      	bx	lr

08005e10 <_fini>:
 8005e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e12:	bf00      	nop
 8005e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e16:	bc08      	pop	{r3}
 8005e18:	469e      	mov	lr, r3
 8005e1a:	4770      	bx	lr
