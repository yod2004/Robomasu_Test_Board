
F3_Multi_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003a80  08003a80  00004a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab8  08003ab8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab8  08003ab8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab8  08003ab8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003abc  08003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ac0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          00000144  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000150  20000150  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b416  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a16  00000000  00000000  00010452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e8  00000000  00000000  00011e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006de  00000000  00000000  00012750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a670  00000000  00000000  00012e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bf66  00000000  00000000  0002d49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e50f  00000000  00000000  00039404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000086  00000000  00000000  000d7913  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002404  00000000  00000000  000d799c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  000d9da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a68 	.word	0x08003a68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003a68 	.word	0x08003a68

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08a      	sub	sp, #40	@ 0x28
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fab7 	bl	8000740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f831 	bl	8000238 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f941 	bl	800045c <MX_GPIO_Init>
  MX_DMA_Init();
 80001da:	f000 f921 	bl	8000420 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001de:	f000 f8ef 	bl	80003c0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 80001e2:	f000 f865 	bl	80002b0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
HAL_ADCEx_Calibration_Start(&hadc2,ADC_SINGLE_ENDED);
 80001e6:	2100      	movs	r1, #0
 80001e8:	4811      	ldr	r0, [pc, #68]	@ (8000230 <main+0x68>)
 80001ea:	f000 fd99 	bl	8000d20 <HAL_ADCEx_Calibration_Start>

uint16_t result[16] = {0};
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2220      	movs	r2, #32
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f003 fc0a 	bl	8003a0e <memset>

HAL_ADC_Start_DMA(&hadc2,(uint32_t *)&result,4);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	2204      	movs	r2, #4
 80001fe:	4619      	mov	r1, r3
 8000200:	480b      	ldr	r0, [pc, #44]	@ (8000230 <main+0x68>)
 8000202:	f000 fcb3 	bl	8000b6c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int i=0;i<8;i++){
 8000206:	2300      	movs	r3, #0
 8000208:	627b      	str	r3, [r7, #36]	@ 0x24
 800020a:	e00c      	b.n	8000226 <main+0x5e>
		  adcvalue[i]=result[i];
 800020c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800020e:	005b      	lsls	r3, r3, #1
 8000210:	3328      	adds	r3, #40	@ 0x28
 8000212:	443b      	add	r3, r7
 8000214:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8000218:	4a06      	ldr	r2, [pc, #24]	@ (8000234 <main+0x6c>)
 800021a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800021c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(int i=0;i<8;i++){
 8000220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000222:	3301      	adds	r3, #1
 8000224:	627b      	str	r3, [r7, #36]	@ 0x24
 8000226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000228:	2b07      	cmp	r3, #7
 800022a:	ddef      	ble.n	800020c <main+0x44>
 800022c:	e7eb      	b.n	8000206 <main+0x3e>
 800022e:	bf00      	nop
 8000230:	20000030 	.word	0x20000030
 8000234:	20000028 	.word	0x20000028

08000238 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b090      	sub	sp, #64	@ 0x40
 800023c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023e:	f107 0318 	add.w	r3, r7, #24
 8000242:	2228      	movs	r2, #40	@ 0x28
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f003 fbe1 	bl	8003a0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
 8000258:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800025a:	2302      	movs	r3, #2
 800025c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000262:	2310      	movs	r3, #16
 8000264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000266:	2300      	movs	r3, #0
 8000268:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026a:	f107 0318 	add.w	r3, r7, #24
 800026e:	4618      	mov	r0, r3
 8000270:	f001 fdd0 	bl	8001e14 <HAL_RCC_OscConfig>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800027a:	f000 f913 	bl	80004a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800027e:	230f      	movs	r3, #15
 8000280:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000282:	2300      	movs	r3, #0
 8000284:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000286:	2300      	movs	r3, #0
 8000288:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fdfa 	bl	8002e90 <HAL_RCC_ClockConfig>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002a2:	f000 f8ff 	bl	80004a4 <Error_Handler>
  }
}
 80002a6:	bf00      	nop
 80002a8:	3740      	adds	r7, #64	@ 0x40
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
	...

080002b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002b6:	463b      	mov	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]
 80002be:	609a      	str	r2, [r3, #8]
 80002c0:	60da      	str	r2, [r3, #12]
 80002c2:	611a      	str	r2, [r3, #16]
 80002c4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80002c6:	4b3c      	ldr	r3, [pc, #240]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002c8:	4a3c      	ldr	r2, [pc, #240]	@ (80003bc <MX_ADC2_Init+0x10c>)
 80002ca:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002cc:	4b3a      	ldr	r3, [pc, #232]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002ce:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80002d2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80002d4:	4b38      	ldr	r3, [pc, #224]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002da:	4b37      	ldr	r3, [pc, #220]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002dc:	2201      	movs	r2, #1
 80002de:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80002e0:	4b35      	ldr	r3, [pc, #212]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002e6:	4b34      	ldr	r3, [pc, #208]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ee:	4b32      	ldr	r3, [pc, #200]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002f4:	4b30      	ldr	r3, [pc, #192]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002f6:	2201      	movs	r2, #1
 80002f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002fa:	4b2f      	ldr	r3, [pc, #188]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8000300:	4b2d      	ldr	r3, [pc, #180]	@ (80003b8 <MX_ADC2_Init+0x108>)
 8000302:	2204      	movs	r2, #4
 8000304:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000306:	4b2c      	ldr	r3, [pc, #176]	@ (80003b8 <MX_ADC2_Init+0x108>)
 8000308:	2201      	movs	r2, #1
 800030a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800030e:	4b2a      	ldr	r3, [pc, #168]	@ (80003b8 <MX_ADC2_Init+0x108>)
 8000310:	2204      	movs	r2, #4
 8000312:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000314:	4b28      	ldr	r3, [pc, #160]	@ (80003b8 <MX_ADC2_Init+0x108>)
 8000316:	2200      	movs	r2, #0
 8000318:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800031a:	4b27      	ldr	r3, [pc, #156]	@ (80003b8 <MX_ADC2_Init+0x108>)
 800031c:	2200      	movs	r2, #0
 800031e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000320:	4825      	ldr	r0, [pc, #148]	@ (80003b8 <MX_ADC2_Init+0x108>)
 8000322:	f000 fa91 	bl	8000848 <HAL_ADC_Init>
 8000326:	4603      	mov	r3, r0
 8000328:	2b00      	cmp	r3, #0
 800032a:	d001      	beq.n	8000330 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800032c:	f000 f8ba 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000330:	2304      	movs	r3, #4
 8000332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000334:	2301      	movs	r3, #1
 8000336:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000338:	2300      	movs	r3, #0
 800033a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 800033c:	2305      	movs	r3, #5
 800033e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000340:	2300      	movs	r3, #0
 8000342:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000344:	2300      	movs	r3, #0
 8000346:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000348:	463b      	mov	r3, r7
 800034a:	4619      	mov	r1, r3
 800034c:	481a      	ldr	r0, [pc, #104]	@ (80003b8 <MX_ADC2_Init+0x108>)
 800034e:	f000 fd59 	bl	8000e04 <HAL_ADC_ConfigChannel>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000358:	f000 f8a4 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800035c:	2303      	movs	r3, #3
 800035e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000360:	2302      	movs	r3, #2
 8000362:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000364:	463b      	mov	r3, r7
 8000366:	4619      	mov	r1, r3
 8000368:	4813      	ldr	r0, [pc, #76]	@ (80003b8 <MX_ADC2_Init+0x108>)
 800036a:	f000 fd4b 	bl	8000e04 <HAL_ADC_ConfigChannel>
 800036e:	4603      	mov	r3, r0
 8000370:	2b00      	cmp	r3, #0
 8000372:	d001      	beq.n	8000378 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000374:	f000 f896 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000378:	2302      	movs	r3, #2
 800037a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800037c:	2303      	movs	r3, #3
 800037e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000380:	463b      	mov	r3, r7
 8000382:	4619      	mov	r1, r3
 8000384:	480c      	ldr	r0, [pc, #48]	@ (80003b8 <MX_ADC2_Init+0x108>)
 8000386:	f000 fd3d 	bl	8000e04 <HAL_ADC_ConfigChannel>
 800038a:	4603      	mov	r3, r0
 800038c:	2b00      	cmp	r3, #0
 800038e:	d001      	beq.n	8000394 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000390:	f000 f888 	bl	80004a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000394:	2301      	movs	r3, #1
 8000396:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000398:	2304      	movs	r3, #4
 800039a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800039c:	463b      	mov	r3, r7
 800039e:	4619      	mov	r1, r3
 80003a0:	4805      	ldr	r0, [pc, #20]	@ (80003b8 <MX_ADC2_Init+0x108>)
 80003a2:	f000 fd2f 	bl	8000e04 <HAL_ADC_ConfigChannel>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80003ac:	f000 f87a 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80003b0:	bf00      	nop
 80003b2:	3718      	adds	r7, #24
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000030 	.word	0x20000030
 80003bc:	50000100 	.word	0x50000100

080003c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003c4:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003c6:	4a15      	ldr	r2, [pc, #84]	@ (800041c <MX_USART2_UART_Init+0x5c>)
 80003c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80003ca:	4b13      	ldr	r3, [pc, #76]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003cc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80003d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003d2:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003da:	2200      	movs	r2, #0
 80003dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003e6:	220c      	movs	r2, #12
 80003e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_USART2_UART_Init+0x58>)
 8000404:	f002 ff64 	bl	80032d0 <HAL_UART_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800040e:	f000 f849 	bl	80004a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000c4 	.word	0x200000c4
 800041c:	40004400 	.word	0x40004400

08000420 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000426:	4b0c      	ldr	r3, [pc, #48]	@ (8000458 <MX_DMA_Init+0x38>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a0b      	ldr	r2, [pc, #44]	@ (8000458 <MX_DMA_Init+0x38>)
 800042c:	f043 0301 	orr.w	r3, r3, #1
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b09      	ldr	r3, [pc, #36]	@ (8000458 <MX_DMA_Init+0x38>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	607b      	str	r3, [r7, #4]
 800043c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2100      	movs	r1, #0
 8000442:	200c      	movs	r0, #12
 8000444:	f001 f9a7 	bl	8001796 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000448:	200c      	movs	r0, #12
 800044a:	f001 f9c0 	bl	80017ce <HAL_NVIC_EnableIRQ>

}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	40021000 	.word	0x40021000

0800045c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <MX_GPIO_Init+0x44>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <MX_GPIO_Init+0x44>)
 8000468:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <MX_GPIO_Init+0x44>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000476:	607b      	str	r3, [r7, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b09      	ldr	r3, [pc, #36]	@ (80004a0 <MX_GPIO_Init+0x44>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a08      	ldr	r2, [pc, #32]	@ (80004a0 <MX_GPIO_Init+0x44>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <MX_GPIO_Init+0x44>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048e:	603b      	str	r3, [r7, #0]
 8000490:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a8:	b672      	cpsid	i
}
 80004aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <Error_Handler+0x8>

080004b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <HAL_MspInit+0x44>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	@ (80004f4 <HAL_MspInit+0x44>)
 80004bc:	f043 0301 	orr.w	r3, r3, #1
 80004c0:	6193      	str	r3, [r2, #24]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	f003 0301 	and.w	r3, r3, #1
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <HAL_MspInit+0x44>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	4a08      	ldr	r2, [pc, #32]	@ (80004f4 <HAL_MspInit+0x44>)
 80004d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004d8:	61d3      	str	r3, [r2, #28]
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <HAL_MspInit+0x44>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004e2:	603b      	str	r3, [r7, #0]
 80004e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	40021000 	.word	0x40021000

080004f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b08a      	sub	sp, #40	@ 0x28
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000500:	f107 0314 	add.w	r3, r7, #20
 8000504:	2200      	movs	r2, #0
 8000506:	601a      	str	r2, [r3, #0]
 8000508:	605a      	str	r2, [r3, #4]
 800050a:	609a      	str	r2, [r3, #8]
 800050c:	60da      	str	r2, [r3, #12]
 800050e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a29      	ldr	r2, [pc, #164]	@ (80005bc <HAL_ADC_MspInit+0xc4>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d14c      	bne.n	80005b4 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800051a:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <HAL_ADC_MspInit+0xc8>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a28      	ldr	r2, [pc, #160]	@ (80005c0 <HAL_ADC_MspInit+0xc8>)
 8000520:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <HAL_ADC_MspInit+0xc8>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <HAL_ADC_MspInit+0xc8>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	4a22      	ldr	r2, [pc, #136]	@ (80005c0 <HAL_ADC_MspInit+0xc8>)
 8000538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800053c:	6153      	str	r3, [r2, #20]
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <HAL_ADC_MspInit+0xc8>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC2_IN1
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800054a:	23f0      	movs	r3, #240	@ 0xf0
 800054c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800054e:	2303      	movs	r3, #3
 8000550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000560:	f001 fae6 	bl	8001b30 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <HAL_ADC_MspInit+0xd0>)
 8000568:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800056a:	4b16      	ldr	r3, [pc, #88]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 800056c:	2200      	movs	r2, #0
 800056e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000570:	4b14      	ldr	r3, [pc, #80]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000576:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 8000578:	2280      	movs	r2, #128	@ 0x80
 800057a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 800057e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000582:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000584:	4b0f      	ldr	r3, [pc, #60]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 8000586:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800058a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800058c:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 800058e:	2220      	movs	r2, #32
 8000590:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000592:	4b0c      	ldr	r3, [pc, #48]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 8000594:	2200      	movs	r2, #0
 8000596:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000598:	480a      	ldr	r0, [pc, #40]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 800059a:	f001 f932 	bl	8001802 <HAL_DMA_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80005a4:	f7ff ff7e 	bl	80004a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a06      	ldr	r2, [pc, #24]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 80005ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <HAL_ADC_MspInit+0xcc>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	@ 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	50000100 	.word	0x50000100
 80005c0:	40021000 	.word	0x40021000
 80005c4:	20000080 	.word	0x20000080
 80005c8:	4002001c 	.word	0x4002001c

080005cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d4:	f107 0314 	add.w	r3, r7, #20
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a18      	ldr	r2, [pc, #96]	@ (800064c <HAL_UART_MspInit+0x80>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d129      	bne.n	8000642 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005ee:	4b18      	ldr	r3, [pc, #96]	@ (8000650 <HAL_UART_MspInit+0x84>)
 80005f0:	69db      	ldr	r3, [r3, #28]
 80005f2:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <HAL_UART_MspInit+0x84>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f8:	61d3      	str	r3, [r2, #28]
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <HAL_UART_MspInit+0x84>)
 80005fc:	69db      	ldr	r3, [r3, #28]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000602:	613b      	str	r3, [r7, #16]
 8000604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_UART_MspInit+0x84>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a11      	ldr	r2, [pc, #68]	@ (8000650 <HAL_UART_MspInit+0x84>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_UART_MspInit+0x84>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800061e:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000624:	2302      	movs	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800062c:	2303      	movs	r3, #3
 800062e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000630:	2307      	movs	r3, #7
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800063e:	f001 fa77 	bl	8001b30 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	@ 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40004400 	.word	0x40004400
 8000650:	40021000 	.word	0x40021000

08000654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <NMI_Handler+0x4>

0800065c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000660:	bf00      	nop
 8000662:	e7fd      	b.n	8000660 <HardFault_Handler+0x4>

08000664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <MemManage_Handler+0x4>

0800066c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800066c:	b480      	push	{r7}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000670:	bf00      	nop
 8000672:	e7fd      	b.n	8000670 <BusFault_Handler+0x4>

08000674 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <UsageFault_Handler+0x4>

0800067c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068e:	bf00      	nop
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006aa:	f000 f88f 	bl	80007cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80006b8:	4802      	ldr	r0, [pc, #8]	@ (80006c4 <DMA1_Channel2_IRQHandler+0x10>)
 80006ba:	f001 f948 	bl	800194e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000080 	.word	0x20000080

080006c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <SystemInit+0x20>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006d2:	4a05      	ldr	r2, [pc, #20]	@ (80006e8 <SystemInit+0x20>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000724 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80006f0:	f7ff ffea 	bl	80006c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <LoopForever+0x6>)
  ldr r1, =_edata
 80006f6:	490d      	ldr	r1, [pc, #52]	@ (800072c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000730 <LoopForever+0xe>)
  movs r3, #0
 80006fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006fc:	e002      	b.n	8000704 <LoopCopyDataInit>

080006fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000702:	3304      	adds	r3, #4

08000704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000708:	d3f9      	bcc.n	80006fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800070a:	4a0a      	ldr	r2, [pc, #40]	@ (8000734 <LoopForever+0x12>)
  ldr r4, =_ebss
 800070c:	4c0a      	ldr	r4, [pc, #40]	@ (8000738 <LoopForever+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000710:	e001      	b.n	8000716 <LoopFillZerobss>

08000712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000714:	3204      	adds	r2, #4

08000716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000718:	d3fb      	bcc.n	8000712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800071a:	f003 f981 	bl	8003a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800071e:	f7ff fd53 	bl	80001c8 <main>

08000722 <LoopForever>:

LoopForever:
    b LoopForever
 8000722:	e7fe      	b.n	8000722 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000724:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000730:	08003ac0 	.word	0x08003ac0
  ldr r2, =_sbss
 8000734:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000738:	20000150 	.word	0x20000150

0800073c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC1_2_IRQHandler>
	...

08000740 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000744:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_Init+0x28>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a07      	ldr	r2, [pc, #28]	@ (8000768 <HAL_Init+0x28>)
 800074a:	f043 0310 	orr.w	r3, r3, #16
 800074e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000750:	2003      	movs	r0, #3
 8000752:	f001 f815 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000756:	2000      	movs	r0, #0
 8000758:	f000 f808 	bl	800076c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f7ff fea8 	bl	80004b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40022000 	.word	0x40022000

0800076c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <HAL_InitTick+0x54>)
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <HAL_InitTick+0x58>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	4619      	mov	r1, r3
 800077e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000782:	fbb3 f3f1 	udiv	r3, r3, r1
 8000786:	fbb2 f3f3 	udiv	r3, r2, r3
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f82d 	bl	80017ea <HAL_SYSTICK_Config>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000796:	2301      	movs	r3, #1
 8000798:	e00e      	b.n	80007b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b0f      	cmp	r3, #15
 800079e:	d80a      	bhi.n	80007b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007a0:	2200      	movs	r2, #0
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	f04f 30ff 	mov.w	r0, #4294967295
 80007a8:	f000 fff5 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ac:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <HAL_InitTick+0x5c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e000      	b.n	80007b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b6:	2301      	movs	r3, #1
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3708      	adds	r7, #8
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000000 	.word	0x20000000
 80007c4:	20000008 	.word	0x20000008
 80007c8:	20000004 	.word	0x20000004

080007cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <HAL_IncTick+0x20>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_IncTick+0x24>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4413      	add	r3, r2
 80007dc:	4a04      	ldr	r2, [pc, #16]	@ (80007f0 <HAL_IncTick+0x24>)
 80007de:	6013      	str	r3, [r2, #0]
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	20000008 	.word	0x20000008
 80007f0:	2000014c 	.word	0x2000014c

080007f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80007f8:	4b03      	ldr	r3, [pc, #12]	@ (8000808 <HAL_GetTick+0x14>)
 80007fa:	681b      	ldr	r3, [r3, #0]
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	2000014c 	.word	0x2000014c

0800080c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000814:	bf00      	nop
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09a      	sub	sp, #104	@ 0x68
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000850:	2300      	movs	r3, #0
 8000852:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000856:	2300      	movs	r3, #0
 8000858:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	e172      	b.n	8000b4e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	f003 0310 	and.w	r3, r3, #16
 8000876:	2b00      	cmp	r3, #0
 8000878:	d176      	bne.n	8000968 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087e:	2b00      	cmp	r3, #0
 8000880:	d152      	bne.n	8000928 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2200      	movs	r2, #0
 8000886:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2200      	movs	r2, #0
 8000898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fe2b 	bl	80004f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d13b      	bne.n	8000928 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 fe2f 	bl	8001514 <ADC_Disable>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c0:	f003 0310 	and.w	r3, r3, #16
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12f      	bne.n	8000928 <HAL_ADC_Init+0xe0>
 80008c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d12b      	bne.n	8000928 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008d8:	f023 0302 	bic.w	r3, r3, #2
 80008dc:	f043 0202 	orr.w	r2, r3, #2
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80008f2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	689a      	ldr	r2, [r3, #8]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000902:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000904:	4b94      	ldr	r3, [pc, #592]	@ (8000b58 <HAL_ADC_Init+0x310>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a94      	ldr	r2, [pc, #592]	@ (8000b5c <HAL_ADC_Init+0x314>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9a      	lsrs	r2, r3, #18
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	4413      	add	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800091a:	e002      	b.n	8000922 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	3b01      	subs	r3, #1
 8000920:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d1f9      	bne.n	800091c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000932:	2b00      	cmp	r3, #0
 8000934:	d007      	beq.n	8000946 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000944:	d110      	bne.n	8000968 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f023 0312 	bic.w	r3, r3, #18
 800094e:	f043 0210 	orr.w	r2, r3, #16
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095a:	f043 0201 	orr.w	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	f003 0310 	and.w	r3, r3, #16
 8000970:	2b00      	cmp	r3, #0
 8000972:	f040 80df 	bne.w	8000b34 <HAL_ADC_Init+0x2ec>
 8000976:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800097a:	2b00      	cmp	r3, #0
 800097c:	f040 80da 	bne.w	8000b34 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800098a:	2b00      	cmp	r3, #0
 800098c:	f040 80d2 	bne.w	8000b34 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000998:	f043 0202 	orr.w	r2, r3, #2
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009a0:	4b6f      	ldr	r3, [pc, #444]	@ (8000b60 <HAL_ADC_Init+0x318>)
 80009a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009ac:	d102      	bne.n	80009b4 <HAL_ADC_Init+0x16c>
 80009ae:	4b6d      	ldr	r3, [pc, #436]	@ (8000b64 <HAL_ADC_Init+0x31c>)
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	e002      	b.n	80009ba <HAL_ADC_Init+0x172>
 80009b4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80009b8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f003 0303 	and.w	r3, r3, #3
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d108      	bne.n	80009da <HAL_ADC_Init+0x192>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d101      	bne.n	80009da <HAL_ADC_Init+0x192>
 80009d6:	2301      	movs	r3, #1
 80009d8:	e000      	b.n	80009dc <HAL_ADC_Init+0x194>
 80009da:	2300      	movs	r3, #0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d11c      	bne.n	8000a1a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009e0:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d010      	beq.n	8000a08 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	689b      	ldr	r3, [r3, #8]
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d107      	bne.n	8000a02 <HAL_ADC_Init+0x1ba>
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d101      	bne.n	8000a02 <HAL_ADC_Init+0x1ba>
 80009fe:	2301      	movs	r3, #1
 8000a00:	e000      	b.n	8000a04 <HAL_ADC_Init+0x1bc>
 8000a02:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d108      	bne.n	8000a1a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	431a      	orrs	r2, r3
 8000a16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a18:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7e5b      	ldrb	r3, [r3, #25]
 8000a1e:	035b      	lsls	r3, r3, #13
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000a24:	2a01      	cmp	r2, #1
 8000a26:	d002      	beq.n	8000a2e <HAL_ADC_Init+0x1e6>
 8000a28:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a2c:	e000      	b.n	8000a30 <HAL_ADC_Init+0x1e8>
 8000a2e:	2200      	movs	r2, #0
 8000a30:	431a      	orrs	r2, r3
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	68db      	ldr	r3, [r3, #12]
 8000a36:	431a      	orrs	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689b      	ldr	r3, [r3, #8]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a40:	4313      	orrs	r3, r2
 8000a42:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d11b      	bne.n	8000a86 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	7e5b      	ldrb	r3, [r3, #25]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d109      	bne.n	8000a6a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	045a      	lsls	r2, r3, #17
 8000a5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a60:	4313      	orrs	r3, r2
 8000a62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a66:	663b      	str	r3, [r7, #96]	@ 0x60
 8000a68:	e00d      	b.n	8000a86 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000a72:	f043 0220 	orr.w	r2, r3, #32
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a7e:	f043 0201 	orr.w	r2, r3, #1
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d007      	beq.n	8000a9e <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a96:	4313      	orrs	r3, r2
 8000a98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f003 030c 	and.w	r3, r3, #12
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d114      	bne.n	8000ad6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	6812      	ldr	r2, [r2, #0]
 8000ab6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000aba:	f023 0302 	bic.w	r3, r3, #2
 8000abe:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	7e1b      	ldrb	r3, [r3, #24]
 8000ac4:	039a      	lsls	r2, r3, #14
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	68da      	ldr	r2, [r3, #12]
 8000adc:	4b22      	ldr	r3, [pc, #136]	@ (8000b68 <HAL_ADC_Init+0x320>)
 8000ade:	4013      	ands	r3, r2
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000ae6:	430b      	orrs	r3, r1
 8000ae8:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	691b      	ldr	r3, [r3, #16]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10c      	bne.n	8000b0c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af8:	f023 010f 	bic.w	r1, r3, #15
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	1e5a      	subs	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	430a      	orrs	r2, r1
 8000b08:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b0a:	e007      	b.n	8000b1c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 020f 	bic.w	r2, r2, #15
 8000b1a:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2200      	movs	r2, #0
 8000b20:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f023 0303 	bic.w	r3, r3, #3
 8000b2a:	f043 0201 	orr.w	r2, r3, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b32:	e00a      	b.n	8000b4a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b38:	f023 0312 	bic.w	r3, r3, #18
 8000b3c:	f043 0210 	orr.w	r2, r3, #16
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000b44:	2301      	movs	r3, #1
 8000b46:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000b4a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3768      	adds	r7, #104	@ 0x68
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	50000300 	.word	0x50000300
 8000b64:	50000100 	.word	0x50000100
 8000b68:	fff0c007 	.word	0xfff0c007

08000b6c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	60f8      	str	r0, [r7, #12]
 8000b74:	60b9      	str	r1, [r7, #8]
 8000b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f040 80b9 	bne.w	8000cfe <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d101      	bne.n	8000b9a <HAL_ADC_Start_DMA+0x2e>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e0b4      	b.n	8000d04 <HAL_ADC_Start_DMA+0x198>
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8000ba2:	4b5a      	ldr	r3, [pc, #360]	@ (8000d0c <HAL_ADC_Start_DMA+0x1a0>)
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	f003 031f 	and.w	r3, r3, #31
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	f040 80a0 	bne.w	8000cf0 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8000bb0:	68f8      	ldr	r0, [r7, #12]
 8000bb2:	f000 fc4b 	bl	800144c <ADC_Enable>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8000bba:	7dfb      	ldrb	r3, [r7, #23]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000bca:	f023 0301 	bic.w	r3, r3, #1
 8000bce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8000d0c <HAL_ADC_Start_DMA+0x1a0>)
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f003 031f 	and.w	r3, r3, #31
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d004      	beq.n	8000bec <HAL_ADC_Start_DMA+0x80>
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bea:	d115      	bne.n	8000c18 <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	68db      	ldr	r3, [r3, #12]
 8000bfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d027      	beq.n	8000c56 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8000c16:	e01e      	b.n	8000c56 <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c2c:	d004      	beq.n	8000c38 <HAL_ADC_Start_DMA+0xcc>
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a37      	ldr	r2, [pc, #220]	@ (8000d10 <HAL_ADC_Start_DMA+0x1a4>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d10e      	bne.n	8000c56 <HAL_ADC_Start_DMA+0xea>
 8000c38:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000c3c:	68db      	ldr	r3, [r3, #12]
 8000c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c4e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000c62:	d106      	bne.n	8000c72 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c68:	f023 0206 	bic.w	r2, r3, #6
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c70:	e002      	b.n	8000c78 <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	2200      	movs	r2, #0
 8000c76:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c84:	4a23      	ldr	r2, [pc, #140]	@ (8000d14 <HAL_ADC_Start_DMA+0x1a8>)
 8000c86:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c8c:	4a22      	ldr	r2, [pc, #136]	@ (8000d18 <HAL_ADC_Start_DMA+0x1ac>)
 8000c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c94:	4a21      	ldr	r2, [pc, #132]	@ (8000d1c <HAL_ADC_Start_DMA+0x1b0>)
 8000c96:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	221c      	movs	r2, #28
 8000c9e:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0210 	orr.w	r2, r2, #16
 8000cae:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f042 0201 	orr.w	r2, r2, #1
 8000cbe:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	3340      	adds	r3, #64	@ 0x40
 8000cca:	4619      	mov	r1, r3
 8000ccc:	68ba      	ldr	r2, [r7, #8]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f000 fdde 	bl	8001890 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	689a      	ldr	r2, [r3, #8]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 0204 	orr.w	r2, r2, #4
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	e00d      	b.n	8000d02 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000cee:	e008      	b.n	8000d02 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8000cfc:	e001      	b.n	8000d02 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3718      	adds	r7, #24
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	50000300 	.word	0x50000300
 8000d10:	50000100 	.word	0x50000100
 8000d14:	08001381 	.word	0x08001381
 8000d18:	080013fb 	.word	0x080013fb
 8000d1c:	08001417 	.word	0x08001417

08000d20 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d101      	bne.n	8000d3c <HAL_ADCEx_Calibration_Start+0x1c>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e05f      	b.n	8000dfc <HAL_ADCEx_Calibration_Start+0xdc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f000 fbe5 	bl	8001514 <ADC_Disable>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14e      	bne.n	8000df2 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8000d68:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b01      	cmp	r3, #1
 8000d6e:	d107      	bne.n	8000d80 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	689a      	ldr	r2, [r3, #8]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000d7e:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000d8e:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8000d90:	f7ff fd30 	bl	80007f4 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000d96:	e01c      	b.n	8000dd2 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8000d98:	f7ff fd2c 	bl	80007f4 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	2b0a      	cmp	r3, #10
 8000da4:	d915      	bls.n	8000dd2 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db4:	d10d      	bne.n	8000dd2 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	f023 0312 	bic.w	r3, r3, #18
 8000dbe:	f043 0210 	orr.w	r2, r3, #16
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e014      	b.n	8000dfc <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8000ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000de0:	d0da      	beq.n	8000d98 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f023 0303 	bic.w	r3, r3, #3
 8000dea:	f043 0201 	orr.w	r2, r3, #1
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b09b      	sub	sp, #108	@ 0x6c
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d101      	bne.n	8000e26 <HAL_ADC_ConfigChannel+0x22>
 8000e22:	2302      	movs	r3, #2
 8000e24:	e2a1      	b.n	800136a <HAL_ADC_ConfigChannel+0x566>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0304 	and.w	r3, r3, #4
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f040 8285 	bne.w	8001348 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d81c      	bhi.n	8000e80 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685a      	ldr	r2, [r3, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	461a      	mov	r2, r3
 8000e5a:	231f      	movs	r3, #31
 8000e5c:	4093      	lsls	r3, r2
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	4019      	ands	r1, r3
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	4413      	add	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa00 f203 	lsl.w	r2, r0, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8000e7e:	e063      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b09      	cmp	r3, #9
 8000e86:	d81e      	bhi.n	8000ec6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4613      	mov	r3, r2
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	4413      	add	r3, r2
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	3b1e      	subs	r3, #30
 8000e9c:	221f      	movs	r2, #31
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	4019      	ands	r1, r3
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	6818      	ldr	r0, [r3, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	4413      	add	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	3b1e      	subs	r3, #30
 8000eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ec4:	e040      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b0e      	cmp	r3, #14
 8000ecc:	d81e      	bhi.n	8000f0c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685a      	ldr	r2, [r3, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	4413      	add	r3, r2
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	3b3c      	subs	r3, #60	@ 0x3c
 8000ee2:	221f      	movs	r2, #31
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	4019      	ands	r1, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685a      	ldr	r2, [r3, #4]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	3b3c      	subs	r3, #60	@ 0x3c
 8000efe:	fa00 f203 	lsl.w	r2, r0, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f0a:	e01d      	b.n	8000f48 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	3b5a      	subs	r3, #90	@ 0x5a
 8000f20:	221f      	movs	r2, #31
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	4019      	ands	r1, r3
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685a      	ldr	r2, [r3, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	3b5a      	subs	r3, #90	@ 0x5a
 8000f3c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	430a      	orrs	r2, r1
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	f040 80e5 	bne.w	8001122 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b09      	cmp	r3, #9
 8000f5e:	d91c      	bls.n	8000f9a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6999      	ldr	r1, [r3, #24]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	3b1e      	subs	r3, #30
 8000f72:	2207      	movs	r2, #7
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	4019      	ands	r1, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	6898      	ldr	r0, [r3, #8]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	4613      	mov	r3, r2
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	4413      	add	r3, r2
 8000f8a:	3b1e      	subs	r3, #30
 8000f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	430a      	orrs	r2, r1
 8000f96:	619a      	str	r2, [r3, #24]
 8000f98:	e019      	b.n	8000fce <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6959      	ldr	r1, [r3, #20]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	2207      	movs	r2, #7
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4019      	ands	r1, r3
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	6898      	ldr	r0, [r3, #8]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d84f      	bhi.n	8001090 <HAL_ADC_ConfigChannel+0x28c>
 8000ff0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff8 <HAL_ADC_ConfigChannel+0x1f4>)
 8000ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff6:	bf00      	nop
 8000ff8:	08001009 	.word	0x08001009
 8000ffc:	0800102b 	.word	0x0800102b
 8001000:	0800104d 	.word	0x0800104d
 8001004:	0800106f 	.word	0x0800106f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800100e:	4b9c      	ldr	r3, [pc, #624]	@ (8001280 <HAL_ADC_ConfigChannel+0x47c>)
 8001010:	4013      	ands	r3, r2
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	6812      	ldr	r2, [r2, #0]
 8001016:	0691      	lsls	r1, r2, #26
 8001018:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800101a:	430a      	orrs	r2, r1
 800101c:	431a      	orrs	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001026:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001028:	e07b      	b.n	8001122 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001030:	4b93      	ldr	r3, [pc, #588]	@ (8001280 <HAL_ADC_ConfigChannel+0x47c>)
 8001032:	4013      	ands	r3, r2
 8001034:	683a      	ldr	r2, [r7, #0]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	0691      	lsls	r1, r2, #26
 800103a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800103c:	430a      	orrs	r2, r1
 800103e:	431a      	orrs	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001048:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800104a:	e06a      	b.n	8001122 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001052:	4b8b      	ldr	r3, [pc, #556]	@ (8001280 <HAL_ADC_ConfigChannel+0x47c>)
 8001054:	4013      	ands	r3, r2
 8001056:	683a      	ldr	r2, [r7, #0]
 8001058:	6812      	ldr	r2, [r2, #0]
 800105a:	0691      	lsls	r1, r2, #26
 800105c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800105e:	430a      	orrs	r2, r1
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800106a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800106c:	e059      	b.n	8001122 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001074:	4b82      	ldr	r3, [pc, #520]	@ (8001280 <HAL_ADC_ConfigChannel+0x47c>)
 8001076:	4013      	ands	r3, r2
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	0691      	lsls	r1, r2, #26
 800107e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001080:	430a      	orrs	r2, r1
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800108c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800108e:	e048      	b.n	8001122 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001096:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	069b      	lsls	r3, r3, #26
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d107      	bne.n	80010b4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80010b2:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80010ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	069b      	lsls	r3, r3, #26
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d107      	bne.n	80010d8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80010d6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80010de:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	069b      	lsls	r3, r3, #26
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d107      	bne.n	80010fc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80010fa:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001102:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	069b      	lsls	r3, r3, #26
 800110c:	429a      	cmp	r2, r3
 800110e:	d107      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800111e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001120:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d108      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x33e>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	2b01      	cmp	r3, #1
 800113c:	d101      	bne.n	8001142 <HAL_ADC_ConfigChannel+0x33e>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <HAL_ADC_ConfigChannel+0x340>
 8001142:	2300      	movs	r3, #0
 8001144:	2b00      	cmp	r3, #0
 8001146:	f040 810a 	bne.w	800135e <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d00f      	beq.n	8001172 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43da      	mvns	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	400a      	ands	r2, r1
 800116c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001170:	e049      	b.n	8001206 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2201      	movs	r2, #1
 8001180:	409a      	lsls	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d91c      	bls.n	80011ce <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6999      	ldr	r1, [r3, #24]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	3b1b      	subs	r3, #27
 80011a6:	2207      	movs	r2, #7
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4019      	ands	r1, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6898      	ldr	r0, [r3, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	3b1b      	subs	r3, #27
 80011c0:	fa00 f203 	lsl.w	r2, r0, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	430a      	orrs	r2, r1
 80011ca:	619a      	str	r2, [r3, #24]
 80011cc:	e01b      	b.n	8001206 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	6959      	ldr	r1, [r3, #20]
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	1c5a      	adds	r2, r3, #1
 80011da:	4613      	mov	r3, r2
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	4413      	add	r3, r2
 80011e0:	2207      	movs	r2, #7
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43db      	mvns	r3, r3
 80011e8:	4019      	ands	r1, r3
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	6898      	ldr	r0, [r3, #8]
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1c5a      	adds	r2, r3, #1
 80011f4:	4613      	mov	r3, r2
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	4413      	add	r3, r2
 80011fa:	fa00 f203 	lsl.w	r2, r0, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	430a      	orrs	r2, r1
 8001204:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001206:	4b1f      	ldr	r3, [pc, #124]	@ (8001284 <HAL_ADC_ConfigChannel+0x480>)
 8001208:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b10      	cmp	r3, #16
 8001210:	d105      	bne.n	800121e <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800121a:	2b00      	cmp	r3, #0
 800121c:	d015      	beq.n	800124a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001222:	2b11      	cmp	r3, #17
 8001224:	d105      	bne.n	8001232 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800122e:	2b00      	cmp	r3, #0
 8001230:	d00b      	beq.n	800124a <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001236:	2b12      	cmp	r3, #18
 8001238:	f040 8091 	bne.w	800135e <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800123c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 808a 	bne.w	800135e <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001252:	d102      	bne.n	800125a <HAL_ADC_ConfigChannel+0x456>
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_ADC_ConfigChannel+0x484>)
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	e002      	b.n	8001260 <HAL_ADC_ConfigChannel+0x45c>
 800125a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800125e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d10e      	bne.n	800128c <HAL_ADC_ConfigChannel+0x488>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d107      	bne.n	800128c <HAL_ADC_ConfigChannel+0x488>
 800127c:	2301      	movs	r3, #1
 800127e:	e006      	b.n	800128e <HAL_ADC_ConfigChannel+0x48a>
 8001280:	83fff000 	.word	0x83fff000
 8001284:	50000300 	.word	0x50000300
 8001288:	50000100 	.word	0x50000100
 800128c:	2300      	movs	r3, #0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d150      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001292:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001294:	2b00      	cmp	r3, #0
 8001296:	d010      	beq.n	80012ba <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d107      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x4b0>
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d101      	bne.n	80012b4 <HAL_ADC_ConfigChannel+0x4b0>
 80012b0:	2301      	movs	r3, #1
 80012b2:	e000      	b.n	80012b6 <HAL_ADC_ConfigChannel+0x4b2>
 80012b4:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d13c      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b10      	cmp	r3, #16
 80012c0:	d11d      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x4fa>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012ca:	d118      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80012cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80012d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012d8:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <HAL_ADC_ConfigChannel+0x574>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a27      	ldr	r2, [pc, #156]	@ (800137c <HAL_ADC_ConfigChannel+0x578>)
 80012de:	fba2 2303 	umull	r2, r3, r2, r3
 80012e2:	0c9a      	lsrs	r2, r3, #18
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012ee:	e002      	b.n	80012f6 <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f9      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80012fc:	e02e      	b.n	800135c <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b11      	cmp	r3, #17
 8001304:	d10b      	bne.n	800131e <HAL_ADC_ConfigChannel+0x51a>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800130e:	d106      	bne.n	800131e <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001318:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800131a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800131c:	e01e      	b.n	800135c <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2b12      	cmp	r3, #18
 8001324:	d11a      	bne.n	800135c <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001326:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800132e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001330:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001332:	e013      	b.n	800135c <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001338:	f043 0220 	orr.w	r2, r3, #32
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001346:	e00a      	b.n	800135e <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134c:	f043 0220 	orr.w	r2, r3, #32
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800135a:	e000      	b.n	800135e <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800135c:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2200      	movs	r2, #0
 8001362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001366:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800136a:	4618      	mov	r0, r3
 800136c:	376c      	adds	r7, #108	@ 0x6c
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000000 	.word	0x20000000
 800137c:	431bde83 	.word	0x431bde83

08001380 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001392:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001396:	2b00      	cmp	r3, #0
 8001398:	d126      	bne.n	80013e8 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d115      	bne.n	80013e0 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d111      	bne.n	80013e0 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d105      	bne.n	80013e0 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d8:	f043 0201 	orr.w	r2, r3, #1
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80013e0:	68f8      	ldr	r0, [r7, #12]
 80013e2:	f7ff fa13 	bl	800080c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013e6:	e004      	b.n	80013f2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	4798      	blx	r3
}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f7ff fa09 	bl	8000820 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b084      	sub	sp, #16
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001428:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001434:	f043 0204 	orr.w	r2, r3, #4
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800143c:	68f8      	ldr	r0, [r7, #12]
 800143e:	f7ff f9f9 	bl	8000834 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001442:	bf00      	nop
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	f003 0303 	and.w	r3, r3, #3
 8001462:	2b01      	cmp	r3, #1
 8001464:	d108      	bne.n	8001478 <ADC_Enable+0x2c>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b01      	cmp	r3, #1
 8001472:	d101      	bne.n	8001478 <ADC_Enable+0x2c>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <ADC_Enable+0x2e>
 8001478:	2300      	movs	r3, #0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d143      	bne.n	8001506 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	4b22      	ldr	r3, [pc, #136]	@ (8001510 <ADC_Enable+0xc4>)
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00d      	beq.n	80014a8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f043 0210 	orr.w	r2, r3, #16
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149c:	f043 0201 	orr.w	r2, r3, #1
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e02f      	b.n	8001508 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0201 	orr.w	r2, r2, #1
 80014b6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80014b8:	f7ff f99c 	bl	80007f4 <HAL_GetTick>
 80014bc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014be:	e01b      	b.n	80014f8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014c0:	f7ff f998 	bl	80007f4 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d914      	bls.n	80014f8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d00d      	beq.n	80014f8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e0:	f043 0210 	orr.w	r2, r3, #16
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ec:	f043 0201 	orr.w	r2, r3, #1
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e007      	b.n	8001508 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	2b01      	cmp	r3, #1
 8001504:	d1dc      	bne.n	80014c0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	8000003f 	.word	0x8000003f

08001514 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	f003 0303 	and.w	r3, r3, #3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d108      	bne.n	8001540 <ADC_Disable+0x2c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d101      	bne.n	8001540 <ADC_Disable+0x2c>
 800153c:	2301      	movs	r3, #1
 800153e:	e000      	b.n	8001542 <ADC_Disable+0x2e>
 8001540:	2300      	movs	r3, #0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d047      	beq.n	80015d6 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030d 	and.w	r3, r3, #13
 8001550:	2b01      	cmp	r3, #1
 8001552:	d10f      	bne.n	8001574 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0202 	orr.w	r2, r2, #2
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2203      	movs	r2, #3
 800156a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 800156c:	f7ff f942 	bl	80007f4 <HAL_GetTick>
 8001570:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001572:	e029      	b.n	80015c8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001578:	f043 0210 	orr.w	r2, r3, #16
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001584:	f043 0201 	orr.w	r2, r3, #1
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e023      	b.n	80015d8 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001590:	f7ff f930 	bl	80007f4 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d914      	bls.n	80015c8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d10d      	bne.n	80015c8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	f043 0210 	orr.w	r2, r3, #16
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015bc:	f043 0201 	orr.w	r2, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e007      	b.n	80015d8 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d0dc      	beq.n	8001590 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f003 0307 	and.w	r3, r3, #7
 80015ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f6:	68ba      	ldr	r2, [r7, #8]
 80015f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015fc:	4013      	ands	r3, r2
 80015fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001608:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800160c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001610:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001612:	4a04      	ldr	r2, [pc, #16]	@ (8001624 <__NVIC_SetPriorityGrouping+0x44>)
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	60d3      	str	r3, [r2, #12]
}
 8001618:	bf00      	nop
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <__NVIC_GetPriorityGrouping+0x18>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	f003 0307 	and.w	r3, r3, #7
}
 8001636:	4618      	mov	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001652:	2b00      	cmp	r3, #0
 8001654:	db0b      	blt.n	800166e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	f003 021f 	and.w	r2, r3, #31
 800165c:	4907      	ldr	r1, [pc, #28]	@ (800167c <__NVIC_EnableIRQ+0x38>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	095b      	lsrs	r3, r3, #5
 8001664:	2001      	movs	r0, #1
 8001666:	fa00 f202 	lsl.w	r2, r0, r2
 800166a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166e:	bf00      	nop
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000e100 	.word	0xe000e100

08001680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	db0a      	blt.n	80016aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	490c      	ldr	r1, [pc, #48]	@ (80016cc <__NVIC_SetPriority+0x4c>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	0112      	lsls	r2, r2, #4
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	440b      	add	r3, r1
 80016a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a8:	e00a      	b.n	80016c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <__NVIC_SetPriority+0x50>)
 80016b0:	79fb      	ldrb	r3, [r7, #7]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	3b04      	subs	r3, #4
 80016b8:	0112      	lsls	r2, r2, #4
 80016ba:	b2d2      	uxtb	r2, r2
 80016bc:	440b      	add	r3, r1
 80016be:	761a      	strb	r2, [r3, #24]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	@ 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f1c3 0307 	rsb	r3, r3, #7
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	bf28      	it	cs
 80016f2:	2304      	movcs	r3, #4
 80016f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3304      	adds	r3, #4
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d902      	bls.n	8001704 <NVIC_EncodePriority+0x30>
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	3b03      	subs	r3, #3
 8001702:	e000      	b.n	8001706 <NVIC_EncodePriority+0x32>
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	401a      	ands	r2, r3
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800171c:	f04f 31ff 	mov.w	r1, #4294967295
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa01 f303 	lsl.w	r3, r1, r3
 8001726:	43d9      	mvns	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	4313      	orrs	r3, r2
         );
}
 800172e:	4618      	mov	r0, r3
 8001730:	3724      	adds	r7, #36	@ 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff8e 	bl	8001680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	@ (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	@ (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff29 	bl	80015e0 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff3e 	bl	8001628 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff8e 	bl	80016d4 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5d 	bl	8001680 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff31 	bl	8001644 <__NVIC_EnableIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffa2 	bl	800173c <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e037      	b.n	8001888 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800182e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001832:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800185c:	68fa      	ldr	r2, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f940 	bl	8001af0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d101      	bne.n	80018b0 <HAL_DMA_Start_IT+0x20>
 80018ac:	2302      	movs	r3, #2
 80018ae:	e04a      	b.n	8001946 <HAL_DMA_Start_IT+0xb6>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2201      	movs	r2, #1
 80018b4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d13a      	bne.n	8001938 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2202      	movs	r2, #2
 80018c6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2200      	movs	r2, #0
 80018ce:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0201 	bic.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f8d4 	bl	8001a94 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d008      	beq.n	8001906 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f042 020e 	orr.w	r2, r2, #14
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e00f      	b.n	8001926 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f042 020a 	orr.w	r2, r2, #10
 8001914:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0204 	bic.w	r2, r2, #4
 8001924:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e005      	b.n	8001944 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001940:	2302      	movs	r3, #2
 8001942:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001944:	7dfb      	ldrb	r3, [r7, #23]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b084      	sub	sp, #16
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	2204      	movs	r2, #4
 800196c:	409a      	lsls	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d024      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x72>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01f      	beq.n	80019c0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0320 	and.w	r3, r3, #32
 800198a:	2b00      	cmp	r3, #0
 800198c:	d107      	bne.n	800199e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0204 	bic.w	r2, r2, #4
 800199c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a6:	2104      	movs	r1, #4
 80019a8:	fa01 f202 	lsl.w	r2, r1, r2
 80019ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d06a      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019be:	e065      	b.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c4:	2202      	movs	r2, #2
 80019c6:	409a      	lsls	r2, r3
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4013      	ands	r3, r2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d02c      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xdc>
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d027      	beq.n	8001a2a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0320 	and.w	r3, r3, #32
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 020a 	bic.w	r2, r2, #10
 80019f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a08:	2102      	movs	r1, #2
 8001a0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d035      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a28:	e030      	b.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	2208      	movs	r2, #8
 8001a30:	409a      	lsls	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d028      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d023      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 020e 	bic.w	r2, r2, #14
 8001a52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
    }
  }
}
 8001a8a:	e7ff      	b.n	8001a8c <HAL_DMA_IRQHandler+0x13e>
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b10      	cmp	r3, #16
 8001ac0:	d108      	bne.n	8001ad4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68ba      	ldr	r2, [r7, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ad2:	e007      	b.n	8001ae4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	60da      	str	r2, [r3, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	461a      	mov	r2, r3
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <DMA_CalcBaseAndBitshift+0x34>)
 8001b00:	4413      	add	r3, r2
 8001b02:	4a09      	ldr	r2, [pc, #36]	@ (8001b28 <DMA_CalcBaseAndBitshift+0x38>)
 8001b04:	fba2 2303 	umull	r2, r3, r2, r3
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	009a      	lsls	r2, r3, #2
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a06      	ldr	r2, [pc, #24]	@ (8001b2c <DMA_CalcBaseAndBitshift+0x3c>)
 8001b14:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	bffdfff8 	.word	0xbffdfff8
 8001b28:	cccccccd 	.word	0xcccccccd
 8001b2c:	40020000 	.word	0x40020000

08001b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b087      	sub	sp, #28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
 8001b38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3e:	e14e      	b.n	8001dde <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8140 	beq.w	8001dd8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d005      	beq.n	8001b70 <HAL_GPIO_Init+0x40>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d130      	bne.n	8001bd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	693a      	ldr	r2, [r7, #16]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 0201 	and.w	r2, r3, #1
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d017      	beq.n	8001c0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d123      	bne.n	8001c62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	6939      	ldr	r1, [r7, #16]
 8001c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 809a 	beq.w	8001dd8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca4:	4b55      	ldr	r3, [pc, #340]	@ (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a54      	ldr	r2, [pc, #336]	@ (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b52      	ldr	r3, [pc, #328]	@ (8001dfc <HAL_GPIO_Init+0x2cc>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cbc:	4a50      	ldr	r2, [pc, #320]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3302      	adds	r3, #2
 8001cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1e0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a46      	ldr	r2, [pc, #280]	@ (8001e04 <HAL_GPIO_Init+0x2d4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1dc>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a45      	ldr	r2, [pc, #276]	@ (8001e08 <HAL_GPIO_Init+0x2d8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1d8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a44      	ldr	r2, [pc, #272]	@ (8001e0c <HAL_GPIO_Init+0x2dc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1d4>
 8001d00:	2303      	movs	r3, #3
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d04:	2305      	movs	r3, #5
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x1e2>
 8001d10:	2300      	movs	r3, #0
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d22:	4937      	ldr	r1, [pc, #220]	@ (8001e00 <HAL_GPIO_Init+0x2d0>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d30:	4b37      	ldr	r3, [pc, #220]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d54:	4a2e      	ldr	r2, [pc, #184]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7e:	4a24      	ldr	r2, [pc, #144]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d84:	4b22      	ldr	r3, [pc, #136]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da8:	4a19      	ldr	r2, [pc, #100]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e10 <HAL_GPIO_Init+0x2e0>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f aea9 	bne.w	8001b40 <HAL_GPIO_Init+0x10>
  }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	48000400 	.word	0x48000400
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	48000c00 	.word	0x48000c00
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	f001 b823 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 817d 	beq.w	800214a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e50:	4bbc      	ldr	r3, [pc, #752]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d00c      	beq.n	8001e76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e5c:	4bb9      	ldr	r3, [pc, #740]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d15c      	bne.n	8001f22 <HAL_RCC_OscConfig+0x10e>
 8001e68:	4bb6      	ldr	r3, [pc, #728]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e74:	d155      	bne.n	8001f22 <HAL_RCC_OscConfig+0x10e>
 8001e76:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e7a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e8e:	fab3 f383 	clz	r3, r3
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	095b      	lsrs	r3, r3, #5
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d102      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x94>
 8001ea2:	4ba8      	ldr	r3, [pc, #672]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	e015      	b.n	8001ed4 <HAL_RCC_OscConfig+0xc0>
 8001ea8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001eac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001ebc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ec0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001ec4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001ec8:	fa93 f3a3 	rbit	r3, r3
 8001ecc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001ed0:	4b9c      	ldr	r3, [pc, #624]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001edc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ee0:	fa92 f2a2 	rbit	r2, r2
 8001ee4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001ee8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001eec:	fab2 f282 	clz	r2, r2
 8001ef0:	b2d2      	uxtb	r2, r2
 8001ef2:	f042 0220 	orr.w	r2, r2, #32
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	f002 021f 	and.w	r2, r2, #31
 8001efc:	2101      	movs	r1, #1
 8001efe:	fa01 f202 	lsl.w	r2, r1, r2
 8001f02:	4013      	ands	r3, r2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 811f 	beq.w	8002148 <HAL_RCC_OscConfig+0x334>
 8001f0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f040 8116 	bne.w	8002148 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	f000 bfaf 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCC_OscConfig+0x12e>
 8001f34:	4b83      	ldr	r3, [pc, #524]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a82      	ldr	r2, [pc, #520]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	e036      	b.n	8001fb0 <HAL_RCC_OscConfig+0x19c>
 8001f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0x158>
 8001f52:	4b7c      	ldr	r3, [pc, #496]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a7b      	ldr	r2, [pc, #492]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b79      	ldr	r3, [pc, #484]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a78      	ldr	r2, [pc, #480]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f64:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e021      	b.n	8001fb0 <HAL_RCC_OscConfig+0x19c>
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f7c:	d10c      	bne.n	8001f98 <HAL_RCC_OscConfig+0x184>
 8001f7e:	4b71      	ldr	r3, [pc, #452]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a70      	ldr	r2, [pc, #448]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f88:	6013      	str	r3, [r2, #0]
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a6d      	ldr	r2, [pc, #436]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f94:	6013      	str	r3, [r2, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x19c>
 8001f98:	4b6a      	ldr	r3, [pc, #424]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a69      	ldr	r2, [pc, #420]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b67      	ldr	r3, [pc, #412]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a66      	ldr	r2, [pc, #408]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001faa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fb0:	4b64      	ldr	r3, [pc, #400]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb4:	f023 020f 	bic.w	r2, r3, #15
 8001fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	495f      	ldr	r1, [pc, #380]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d059      	beq.n	800208e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe fc0b 	bl	80007f4 <HAL_GetTick>
 8001fde:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	e00a      	b.n	8001ffa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fc06 	bl	80007f4 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b64      	cmp	r3, #100	@ 0x64
 8001ff2:	d902      	bls.n	8001ffa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	f000 bf43 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
 8001ffa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ffe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800200e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_RCC_OscConfig+0x218>
 8002026:	4b47      	ldr	r3, [pc, #284]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e015      	b.n	8002058 <HAL_RCC_OscConfig+0x244>
 800202c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002030:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002034:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002038:	fa93 f3a3 	rbit	r3, r3
 800203c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002040:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002044:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002048:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002054:	4b3b      	ldr	r3, [pc, #236]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800205c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002060:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002064:	fa92 f2a2 	rbit	r2, r2
 8002068:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800206c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002070:	fab2 f282 	clz	r2, r2
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f042 0220 	orr.w	r2, r2, #32
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f002 021f 	and.w	r2, r2, #31
 8002080:	2101      	movs	r1, #1
 8002082:	fa01 f202 	lsl.w	r2, r1, r2
 8002086:	4013      	ands	r3, r2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d0ab      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x1d0>
 800208c:	e05d      	b.n	800214a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe fbb1 	bl	80007f4 <HAL_GetTick>
 8002092:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002096:	e00a      	b.n	80020ae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002098:	f7fe fbac 	bl	80007f4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	@ 0x64
 80020a6:	d902      	bls.n	80020ae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	f000 bee9 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
 80020ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020b2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80020c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	095b      	lsrs	r3, r3, #5
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d102      	bne.n	80020e0 <HAL_RCC_OscConfig+0x2cc>
 80020da:	4b1a      	ldr	r3, [pc, #104]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	e015      	b.n	800210c <HAL_RCC_OscConfig+0x2f8>
 80020e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020e4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80020ec:	fa93 f3a3 	rbit	r3, r3
 80020f0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80020f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020f8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80020fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002108:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <HAL_RCC_OscConfig+0x330>)
 800210a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800210c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002110:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002114:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002118:	fa92 f2a2 	rbit	r2, r2
 800211c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002120:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002124:	fab2 f282 	clz	r2, r2
 8002128:	b2d2      	uxtb	r2, r2
 800212a:	f042 0220 	orr.w	r2, r2, #32
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	f002 021f 	and.w	r2, r2, #31
 8002134:	2101      	movs	r1, #1
 8002136:	fa01 f202 	lsl.w	r2, r1, r2
 800213a:	4013      	ands	r3, r2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d1ab      	bne.n	8002098 <HAL_RCC_OscConfig+0x284>
 8002140:	e003      	b.n	800214a <HAL_RCC_OscConfig+0x336>
 8002142:	bf00      	nop
 8002144:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	f000 817d 	beq.w	800245a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002160:	4ba6      	ldr	r3, [pc, #664]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800216c:	4ba3      	ldr	r3, [pc, #652]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 030c 	and.w	r3, r3, #12
 8002174:	2b08      	cmp	r3, #8
 8002176:	d172      	bne.n	800225e <HAL_RCC_OscConfig+0x44a>
 8002178:	4ba0      	ldr	r3, [pc, #640]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d16c      	bne.n	800225e <HAL_RCC_OscConfig+0x44a>
 8002184:	2302      	movs	r3, #2
 8002186:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800218e:	fa93 f3a3 	rbit	r3, r3
 8002192:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002196:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219a:	fab3 f383 	clz	r3, r3
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d102      	bne.n	80021b4 <HAL_RCC_OscConfig+0x3a0>
 80021ae:	4b93      	ldr	r3, [pc, #588]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	e013      	b.n	80021dc <HAL_RCC_OscConfig+0x3c8>
 80021b4:	2302      	movs	r3, #2
 80021b6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80021c6:	2302      	movs	r3, #2
 80021c8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80021cc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80021d8:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 80021da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021dc:	2202      	movs	r2, #2
 80021de:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80021e2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80021e6:	fa92 f2a2 	rbit	r2, r2
 80021ea:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80021ee:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80021f2:	fab2 f282 	clz	r2, r2
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	f042 0220 	orr.w	r2, r2, #32
 80021fc:	b2d2      	uxtb	r2, r2
 80021fe:	f002 021f 	and.w	r2, r2, #31
 8002202:	2101      	movs	r1, #1
 8002204:	fa01 f202 	lsl.w	r2, r1, r2
 8002208:	4013      	ands	r3, r2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCC_OscConfig+0x410>
 800220e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002212:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d002      	beq.n	8002224 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f000 be2e 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b75      	ldr	r3, [pc, #468]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	21f8      	movs	r1, #248	@ 0xf8
 800223a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002242:	fa91 f1a1 	rbit	r1, r1
 8002246:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800224a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800224e:	fab1 f181 	clz	r1, r1
 8002252:	b2c9      	uxtb	r1, r1
 8002254:	408b      	lsls	r3, r1
 8002256:	4969      	ldr	r1, [pc, #420]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 8002258:	4313      	orrs	r3, r2
 800225a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800225c:	e0fd      	b.n	800245a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8088 	beq.w	8002380 <HAL_RCC_OscConfig+0x56c>
 8002270:	2301      	movs	r3, #1
 8002272:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002282:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002290:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	461a      	mov	r2, r3
 8002298:	2301      	movs	r3, #1
 800229a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe faaa 	bl	80007f4 <HAL_GetTick>
 80022a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	e00a      	b.n	80022bc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022a6:	f7fe faa5 	bl	80007f4 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d902      	bls.n	80022bc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	f000 bde2 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
 80022bc:	2302      	movs	r3, #2
 80022be:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80022ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	fab3 f383 	clz	r3, r3
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d102      	bne.n	80022ec <HAL_RCC_OscConfig+0x4d8>
 80022e6:	4b45      	ldr	r3, [pc, #276]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	e013      	b.n	8002314 <HAL_RCC_OscConfig+0x500>
 80022ec:	2302      	movs	r3, #2
 80022ee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80022fe:	2302      	movs	r3, #2
 8002300:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002304:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002310:	4b3a      	ldr	r3, [pc, #232]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002314:	2202      	movs	r2, #2
 8002316:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800231a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800231e:	fa92 f2a2 	rbit	r2, r2
 8002322:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002326:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800232a:	fab2 f282 	clz	r2, r2
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	f042 0220 	orr.w	r2, r2, #32
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	f002 021f 	and.w	r2, r2, #31
 800233a:	2101      	movs	r1, #1
 800233c:	fa01 f202 	lsl.w	r2, r1, r2
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0af      	beq.n	80022a6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	21f8      	movs	r1, #248	@ 0xf8
 800235c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002364:	fa91 f1a1 	rbit	r1, r1
 8002368:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800236c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002370:	fab1 f181 	clz	r1, r1
 8002374:	b2c9      	uxtb	r1, r1
 8002376:	408b      	lsls	r3, r1
 8002378:	4920      	ldr	r1, [pc, #128]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
 800237e:	e06c      	b.n	800245a <HAL_RCC_OscConfig+0x646>
 8002380:	2301      	movs	r3, #1
 8002382:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002386:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800238a:	fa93 f3a3 	rbit	r3, r3
 800238e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002392:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002396:	fab3 f383 	clz	r3, r3
 800239a:	b2db      	uxtb	r3, r3
 800239c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023a0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	461a      	mov	r2, r3
 80023a8:	2300      	movs	r3, #0
 80023aa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7fe fa22 	bl	80007f4 <HAL_GetTick>
 80023b0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023b6:	f7fe fa1d 	bl	80007f4 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d902      	bls.n	80023cc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	f000 bd5a 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
 80023cc:	2302      	movs	r3, #2
 80023ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80023d6:	fa93 f3a3 	rbit	r3, r3
 80023da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80023de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d104      	bne.n	8002400 <HAL_RCC_OscConfig+0x5ec>
 80023f6:	4b01      	ldr	r3, [pc, #4]	@ (80023fc <HAL_RCC_OscConfig+0x5e8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	e015      	b.n	8002428 <HAL_RCC_OscConfig+0x614>
 80023fc:	40021000 	.word	0x40021000
 8002400:	2302      	movs	r3, #2
 8002402:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002406:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800240a:	fa93 f3a3 	rbit	r3, r3
 800240e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002412:	2302      	movs	r3, #2
 8002414:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002418:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800241c:	fa93 f3a3 	rbit	r3, r3
 8002420:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002424:	4bc8      	ldr	r3, [pc, #800]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	2202      	movs	r2, #2
 800242a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800242e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002432:	fa92 f2a2 	rbit	r2, r2
 8002436:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800243a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800243e:	fab2 f282 	clz	r2, r2
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	f042 0220 	orr.w	r2, r2, #32
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	f002 021f 	and.w	r2, r2, #31
 800244e:	2101      	movs	r1, #1
 8002450:	fa01 f202 	lsl.w	r2, r1, r2
 8002454:	4013      	ands	r3, r2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1ad      	bne.n	80023b6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8110 	beq.w	8002690 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002470:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002474:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d079      	beq.n	8002574 <HAL_RCC_OscConfig+0x760>
 8002480:	2301      	movs	r3, #1
 8002482:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800248a:	fa93 f3a3 	rbit	r3, r3
 800248e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4bab      	ldr	r3, [pc, #684]	@ (800274c <HAL_RCC_OscConfig+0x938>)
 80024a0:	4413      	add	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	461a      	mov	r2, r3
 80024a6:	2301      	movs	r3, #1
 80024a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024aa:	f7fe f9a3 	bl	80007f4 <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024b4:	f7fe f99e 	bl	80007f4 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d902      	bls.n	80024ca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	f000 bcdb 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
 80024ca:	2302      	movs	r3, #2
 80024cc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024e4:	2202      	movs	r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
 80024e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	fa93 f2a3 	rbit	r2, r3
 80024f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002508:	2202      	movs	r2, #2
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	fa93 f2a3 	rbit	r2, r3
 800251a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800251e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002522:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002524:	4b88      	ldr	r3, [pc, #544]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 8002526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002530:	2102      	movs	r1, #2
 8002532:	6019      	str	r1, [r3, #0]
 8002534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002538:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	fa93 f1a3 	rbit	r1, r3
 8002542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002546:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800254a:	6019      	str	r1, [r3, #0]
  return result;
 800254c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002550:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002560:	b2db      	uxtb	r3, r3
 8002562:	f003 031f 	and.w	r3, r3, #31
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f303 	lsl.w	r3, r1, r3
 800256c:	4013      	ands	r3, r2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0a0      	beq.n	80024b4 <HAL_RCC_OscConfig+0x6a0>
 8002572:	e08d      	b.n	8002690 <HAL_RCC_OscConfig+0x87c>
 8002574:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002578:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800257c:	2201      	movs	r2, #1
 800257e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002584:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	fa93 f2a3 	rbit	r2, r3
 800258e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002592:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002596:	601a      	str	r2, [r3, #0]
  return result;
 8002598:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800259c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a2:	fab3 f383 	clz	r3, r3
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	461a      	mov	r2, r3
 80025aa:	4b68      	ldr	r3, [pc, #416]	@ (800274c <HAL_RCC_OscConfig+0x938>)
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	461a      	mov	r2, r3
 80025b2:	2300      	movs	r3, #0
 80025b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b6:	f7fe f91d 	bl	80007f4 <HAL_GetTick>
 80025ba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c0:	f7fe f918 	bl	80007f4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d902      	bls.n	80025d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f000 bc55 	b.w	8002e80 <HAL_RCC_OscConfig+0x106c>
 80025d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025da:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025de:	2202      	movs	r2, #2
 80025e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025e6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	fa93 f2a3 	rbit	r2, r3
 80025f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025f4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002602:	2202      	movs	r2, #2
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800260a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002618:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002622:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002626:	2202      	movs	r2, #2
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800262e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	fa93 f2a3 	rbit	r2, r3
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002640:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002642:	4b41      	ldr	r3, [pc, #260]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 8002644:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002646:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800264e:	2102      	movs	r1, #2
 8002650:	6019      	str	r1, [r3, #0]
 8002652:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002656:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f1a3 	rbit	r1, r3
 8002660:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002664:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002668:	6019      	str	r1, [r3, #0]
  return result;
 800266a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fab3 f383 	clz	r3, r3
 8002678:	b2db      	uxtb	r3, r3
 800267a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	2101      	movs	r1, #1
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d197      	bne.n	80025c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 81a1 	beq.w	80029e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ac:	4b26      	ldr	r3, [pc, #152]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b8:	4b23      	ldr	r3, [pc, #140]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	4a22      	ldr	r2, [pc, #136]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	61d3      	str	r3, [r2, #28]
 80026c4:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80026cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026d4:	601a      	str	r2, [r3, #0]
 80026d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026da:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80026de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80026e0:	2301      	movs	r3, #1
 80026e2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <HAL_RCC_OscConfig+0x93c>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d11a      	bne.n	8002728 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f2:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <HAL_RCC_OscConfig+0x93c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a16      	ldr	r2, [pc, #88]	@ (8002750 <HAL_RCC_OscConfig+0x93c>)
 80026f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026fe:	f7fe f879 	bl	80007f4 <HAL_GetTick>
 8002702:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002706:	e009      	b.n	800271c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002708:	f7fe f874 	bl	80007f4 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b64      	cmp	r3, #100	@ 0x64
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e3b1      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <HAL_RCC_OscConfig+0x93c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d0ef      	beq.n	8002708 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002728:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800272c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d10d      	bne.n	8002754 <HAL_RCC_OscConfig+0x940>
 8002738:	4b03      	ldr	r3, [pc, #12]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a02      	ldr	r2, [pc, #8]	@ (8002748 <HAL_RCC_OscConfig+0x934>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	e03c      	b.n	80027c0 <HAL_RCC_OscConfig+0x9ac>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	10908120 	.word	0x10908120
 8002750:	40007000 	.word	0x40007000
 8002754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002758:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10c      	bne.n	800277e <HAL_RCC_OscConfig+0x96a>
 8002764:	4bc1      	ldr	r3, [pc, #772]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	4ac0      	ldr	r2, [pc, #768]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	6213      	str	r3, [r2, #32]
 8002770:	4bbe      	ldr	r3, [pc, #760]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	4abd      	ldr	r2, [pc, #756]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 8002776:	f023 0304 	bic.w	r3, r3, #4
 800277a:	6213      	str	r3, [r2, #32]
 800277c:	e020      	b.n	80027c0 <HAL_RCC_OscConfig+0x9ac>
 800277e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002782:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b05      	cmp	r3, #5
 800278c:	d10c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x994>
 800278e:	4bb7      	ldr	r3, [pc, #732]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	4ab6      	ldr	r2, [pc, #728]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6213      	str	r3, [r2, #32]
 800279a:	4bb4      	ldr	r3, [pc, #720]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4ab3      	ldr	r2, [pc, #716]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	6213      	str	r3, [r2, #32]
 80027a6:	e00b      	b.n	80027c0 <HAL_RCC_OscConfig+0x9ac>
 80027a8:	4bb0      	ldr	r3, [pc, #704]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4aaf      	ldr	r2, [pc, #700]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6213      	str	r3, [r2, #32]
 80027b4:	4bad      	ldr	r3, [pc, #692]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	4aac      	ldr	r2, [pc, #688]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8081 	beq.w	80028d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d2:	f7fe f80f 	bl	80007f4 <HAL_GetTick>
 80027d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	e00b      	b.n	80027f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027dc:	f7fe f80a 	bl	80007f4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d901      	bls.n	80027f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e345      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80027fc:	2202      	movs	r2, #2
 80027fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002800:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002804:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	fa93 f2a3 	rbit	r2, r3
 800280e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002812:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800281c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002820:	2202      	movs	r2, #2
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002828:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002836:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800283a:	601a      	str	r2, [r3, #0]
  return result;
 800283c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002840:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002844:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	095b      	lsrs	r3, r3, #5
 800284e:	b2db      	uxtb	r3, r3
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d102      	bne.n	8002860 <HAL_RCC_OscConfig+0xa4c>
 800285a:	4b84      	ldr	r3, [pc, #528]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 800285c:	6a1b      	ldr	r3, [r3, #32]
 800285e:	e013      	b.n	8002888 <HAL_RCC_OscConfig+0xa74>
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002868:	2202      	movs	r2, #2
 800286a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002870:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	fa93 f2a3 	rbit	r2, r3
 800287a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800287e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	4b79      	ldr	r3, [pc, #484]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 8002886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002888:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800288c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002890:	2102      	movs	r1, #2
 8002892:	6011      	str	r1, [r2, #0]
 8002894:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002898:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800289c:	6812      	ldr	r2, [r2, #0]
 800289e:	fa92 f1a2 	rbit	r1, r2
 80028a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028aa:	6011      	str	r1, [r2, #0]
  return result;
 80028ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d084      	beq.n	80027dc <HAL_RCC_OscConfig+0x9c8>
 80028d2:	e07f      	b.n	80029d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028d4:	f7fd ff8e 	bl	80007f4 <HAL_GetTick>
 80028d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028dc:	e00b      	b.n	80028f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028de:	f7fd ff89 	bl	80007f4 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e2c4      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
 80028f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028fa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80028fe:	2202      	movs	r2, #2
 8002900:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002906:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	fa93 f2a3 	rbit	r2, r3
 8002910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002914:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002922:	2202      	movs	r2, #2
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fa93 f2a3 	rbit	r2, r3
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800293c:	601a      	str	r2, [r3, #0]
  return result;
 800293e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002942:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002946:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	b2db      	uxtb	r3, r3
 8002952:	f043 0302 	orr.w	r3, r3, #2
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d102      	bne.n	8002962 <HAL_RCC_OscConfig+0xb4e>
 800295c:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	e013      	b.n	800298a <HAL_RCC_OscConfig+0xb76>
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800296a:	2202      	movs	r2, #2
 800296c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002972:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fa93 f2a3 	rbit	r2, r3
 800297c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002980:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	4b39      	ldr	r3, [pc, #228]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800298e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002992:	2102      	movs	r1, #2
 8002994:	6011      	str	r1, [r2, #0]
 8002996:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800299e:	6812      	ldr	r2, [r2, #0]
 80029a0:	fa92 f1a2 	rbit	r1, r2
 80029a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029ac:	6011      	str	r1, [r2, #0]
  return result;
 80029ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	fab2 f282 	clz	r2, r2
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	f002 021f 	and.w	r2, r2, #31
 80029c8:	2101      	movs	r1, #1
 80029ca:	fa01 f202 	lsl.w	r2, r1, r2
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d184      	bne.n	80028de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d105      	bne.n	80029e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029dc:	4b23      	ldr	r3, [pc, #140]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80029de:	69db      	ldr	r3, [r3, #28]
 80029e0:	4a22      	ldr	r2, [pc, #136]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80029e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8242 	beq.w	8002e7e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <HAL_RCC_OscConfig+0xc58>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	f000 8213 	beq.w	8002e2e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	f040 8162 	bne.w	8002cde <HAL_RCC_OscConfig+0xeca>
 8002a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a22:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	fa93 f2a3 	rbit	r2, r3
 8002a36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a3a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a3e:	601a      	str	r2, [r3, #0]
  return result;
 8002a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a44:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002a48:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a54:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fd fec8 	bl	80007f4 <HAL_GetTick>
 8002a64:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a68:	e00c      	b.n	8002a84 <HAL_RCC_OscConfig+0xc70>
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fd fec0 	bl	80007f4 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d901      	bls.n	8002a84 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e1fd      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
 8002a84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a88:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a96:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	fa93 f2a3 	rbit	r2, r3
 8002aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aa4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002aa8:	601a      	str	r2, [r3, #0]
  return result;
 8002aaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002ab2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ab4:	fab3 f383 	clz	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d102      	bne.n	8002ace <HAL_RCC_OscConfig+0xcba>
 8002ac8:	4bb0      	ldr	r3, [pc, #704]	@ (8002d8c <HAL_RCC_OscConfig+0xf78>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	e027      	b.n	8002b1e <HAL_RCC_OscConfig+0xd0a>
 8002ace:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ad6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ada:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002adc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	fa93 f2a3 	rbit	r2, r3
 8002aea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002afc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b06:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	fa93 f2a3 	rbit	r2, r3
 8002b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b14:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	4b9c      	ldr	r3, [pc, #624]	@ (8002d8c <HAL_RCC_OscConfig+0xf78>)
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b22:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b26:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b2a:	6011      	str	r1, [r2, #0]
 8002b2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b30:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	fa92 f1a2 	rbit	r1, r2
 8002b3a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b3e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b42:	6011      	str	r1, [r2, #0]
  return result;
 8002b44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b48:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	fab2 f282 	clz	r2, r2
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	f042 0220 	orr.w	r2, r2, #32
 8002b58:	b2d2      	uxtb	r2, r2
 8002b5a:	f002 021f 	and.w	r2, r2, #31
 8002b5e:	2101      	movs	r1, #1
 8002b60:	fa01 f202 	lsl.w	r2, r1, r2
 8002b64:	4013      	ands	r3, r2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d182      	bne.n	8002a70 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b6a:	4b88      	ldr	r3, [pc, #544]	@ (8002d8c <HAL_RCC_OscConfig+0xf78>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002b7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	430b      	orrs	r3, r1
 8002b8c:	497f      	ldr	r1, [pc, #508]	@ (8002d8c <HAL_RCC_OscConfig+0xf78>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b96:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002b9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ba4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	fa93 f2a3 	rbit	r2, r3
 8002bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bb2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bb6:	601a      	str	r2, [r3, #0]
  return result;
 8002bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002bc0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc2:	fab3 f383 	clz	r3, r3
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002bcc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fd fe0c 	bl	80007f4 <HAL_GetTick>
 8002bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be0:	e009      	b.n	8002bf6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be2:	f7fd fe07 	bl	80007f4 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e144      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002bfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c08:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	fa93 f2a3 	rbit	r2, r3
 8002c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c16:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c1a:	601a      	str	r2, [r3, #0]
  return result;
 8002c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c20:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002c24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	095b      	lsrs	r3, r3, #5
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d102      	bne.n	8002c40 <HAL_RCC_OscConfig+0xe2c>
 8002c3a:	4b54      	ldr	r3, [pc, #336]	@ (8002d8c <HAL_RCC_OscConfig+0xf78>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	e027      	b.n	8002c90 <HAL_RCC_OscConfig+0xe7c>
 8002c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c44:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c48:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c52:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	fa93 f2a3 	rbit	r2, r3
 8002c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c60:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c6a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c6e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c78:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f2a3 	rbit	r2, r3
 8002c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c8a:	601a      	str	r2, [r3, #0]
 8002c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d8c <HAL_RCC_OscConfig+0xf78>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c94:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002c98:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c9c:	6011      	str	r1, [r2, #0]
 8002c9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002ca2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	fa92 f1a2 	rbit	r1, r2
 8002cac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cb0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cb4:	6011      	str	r1, [r2, #0]
  return result;
 8002cb6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002cba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	fab2 f282 	clz	r2, r2
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	f042 0220 	orr.w	r2, r2, #32
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	f002 021f 	and.w	r2, r2, #31
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	fa01 f202 	lsl.w	r2, r1, r2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d082      	beq.n	8002be2 <HAL_RCC_OscConfig+0xdce>
 8002cdc:	e0cf      	b.n	8002e7e <HAL_RCC_OscConfig+0x106a>
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002ce6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cf0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	fa93 f2a3 	rbit	r2, r3
 8002cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cfe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d02:	601a      	str	r2, [r3, #0]
  return result;
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002d0c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002d18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2300      	movs	r3, #0
 8002d22:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fd fd66 	bl	80007f4 <HAL_GetTick>
 8002d28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2c:	e009      	b.n	8002d42 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2e:	f7fd fd61 	bl	80007f4 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e09e      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
 8002d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d46:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d4a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d54:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	fa93 f2a3 	rbit	r2, r3
 8002d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d62:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d66:	601a      	str	r2, [r3, #0]
  return result;
 8002d68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d6c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d70:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d72:	fab3 f383 	clz	r3, r3
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	095b      	lsrs	r3, r3, #5
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d104      	bne.n	8002d90 <HAL_RCC_OscConfig+0xf7c>
 8002d86:	4b01      	ldr	r3, [pc, #4]	@ (8002d8c <HAL_RCC_OscConfig+0xf78>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	e029      	b.n	8002de0 <HAL_RCC_OscConfig+0xfcc>
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d94:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d98:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002da2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	fa93 f2a3 	rbit	r2, r3
 8002dac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002db0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002db4:	601a      	str	r2, [r3, #0]
 8002db6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dc8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	fa93 f2a3 	rbit	r2, r3
 8002dd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e8c <HAL_RCC_OscConfig+0x1078>)
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002de4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002de8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dec:	6011      	str	r1, [r2, #0]
 8002dee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002df2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	fa92 f1a2 	rbit	r1, r2
 8002dfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e00:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e04:	6011      	str	r1, [r2, #0]
  return result;
 8002e06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002e0a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002e0e:	6812      	ldr	r2, [r2, #0]
 8002e10:	fab2 f282 	clz	r2, r2
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f042 0220 	orr.w	r2, r2, #32
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	f002 021f 	and.w	r2, r2, #31
 8002e20:	2101      	movs	r1, #1
 8002e22:	fa01 f202 	lsl.w	r2, r1, r2
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d180      	bne.n	8002d2e <HAL_RCC_OscConfig+0xf1a>
 8002e2c:	e027      	b.n	8002e7e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e01e      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e42:	4b12      	ldr	r3, [pc, #72]	@ (8002e8c <HAL_RCC_OscConfig+0x1078>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e4e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002e52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d10b      	bne.n	8002e7a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002e62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002e66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40021000 	.word	0x40021000

08002e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b09e      	sub	sp, #120	@ 0x78
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e162      	b.n	800316e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b90      	ldr	r3, [pc, #576]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d910      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 0207 	bic.w	r2, r3, #7
 8002ebe:	498b      	ldr	r1, [pc, #556]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b89      	ldr	r3, [pc, #548]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e14a      	b.n	800316e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d008      	beq.n	8002ef6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee4:	4b82      	ldr	r3, [pc, #520]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	497f      	ldr	r1, [pc, #508]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 80dc 	beq.w	80030bc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d13c      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xf6>
 8002f0c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f10:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	095b      	lsrs	r3, r3, #5
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f043 0301 	orr.w	r3, r3, #1
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d102      	bne.n	8002f36 <HAL_RCC_ClockConfig+0xa6>
 8002f30:	4b6f      	ldr	r3, [pc, #444]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	e00f      	b.n	8002f56 <HAL_RCC_ClockConfig+0xc6>
 8002f36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f44:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f48:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f52:	4b67      	ldr	r3, [pc, #412]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f5a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f5c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f5e:	fa92 f2a2 	rbit	r2, r2
 8002f62:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f66:	fab2 f282 	clz	r2, r2
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f042 0220 	orr.w	r2, r2, #32
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	f002 021f 	and.w	r2, r2, #31
 8002f76:	2101      	movs	r1, #1
 8002f78:	fa01 f202 	lsl.w	r2, r1, r2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d17b      	bne.n	800307a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0f3      	b.n	800316e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d13c      	bne.n	8003008 <HAL_RCC_ClockConfig+0x178>
 8002f8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f92:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f96:	fa93 f3a3 	rbit	r3, r3
 8002f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d102      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x128>
 8002fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	e00f      	b.n	8002fd8 <HAL_RCC_ClockConfig+0x148>
 8002fb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fc0:	fa93 f3a3 	rbit	r3, r3
 8002fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fc6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fca:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fd4:	4b46      	ldr	r3, [pc, #280]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fdc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fe0:	fa92 f2a2 	rbit	r2, r2
 8002fe4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002fe6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fe8:	fab2 f282 	clz	r2, r2
 8002fec:	b2d2      	uxtb	r2, r2
 8002fee:	f042 0220 	orr.w	r2, r2, #32
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	f002 021f 	and.w	r2, r2, #31
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b00      	cmp	r3, #0
 8003002:	d13a      	bne.n	800307a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0b2      	b.n	800316e <HAL_RCC_ClockConfig+0x2de>
 8003008:	2302      	movs	r3, #2
 800300a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003016:	fab3 f383 	clz	r3, r3
 800301a:	b2db      	uxtb	r3, r3
 800301c:	095b      	lsrs	r3, r3, #5
 800301e:	b2db      	uxtb	r3, r3
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <HAL_RCC_ClockConfig+0x1a0>
 800302a:	4b31      	ldr	r3, [pc, #196]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	e00d      	b.n	800304c <HAL_RCC_ClockConfig+0x1bc>
 8003030:	2302      	movs	r3, #2
 8003032:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	627b      	str	r3, [r7, #36]	@ 0x24
 800303c:	2302      	movs	r3, #2
 800303e:	623b      	str	r3, [r7, #32]
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	fa93 f3a3 	rbit	r3, r3
 8003046:	61fb      	str	r3, [r7, #28]
 8003048:	4b29      	ldr	r3, [pc, #164]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	2202      	movs	r2, #2
 800304e:	61ba      	str	r2, [r7, #24]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	fa92 f2a2 	rbit	r2, r2
 8003056:	617a      	str	r2, [r7, #20]
  return result;
 8003058:	697a      	ldr	r2, [r7, #20]
 800305a:	fab2 f282 	clz	r2, r2
 800305e:	b2d2      	uxtb	r2, r2
 8003060:	f042 0220 	orr.w	r2, r2, #32
 8003064:	b2d2      	uxtb	r2, r2
 8003066:	f002 021f 	and.w	r2, r2, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f202 	lsl.w	r2, r1, r2
 8003070:	4013      	ands	r3, r2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e079      	b.n	800316e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800307a:	4b1d      	ldr	r3, [pc, #116]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f023 0203 	bic.w	r2, r3, #3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	491a      	ldr	r1, [pc, #104]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8003088:	4313      	orrs	r3, r2
 800308a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800308c:	f7fd fbb2 	bl	80007f4 <HAL_GetTick>
 8003090:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	e00a      	b.n	80030aa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fd fbae 	bl	80007f4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e061      	b.n	800316e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030aa:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <HAL_RCC_ClockConfig+0x260>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 020c 	and.w	r2, r3, #12
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d1eb      	bne.n	8003094 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d214      	bcs.n	80030f4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b08      	ldr	r3, [pc, #32]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0207 	bic.w	r2, r3, #7
 80030d2:	4906      	ldr	r1, [pc, #24]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <HAL_RCC_ClockConfig+0x25c>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e040      	b.n	800316e <HAL_RCC_ClockConfig+0x2de>
 80030ec:	40022000 	.word	0x40022000
 80030f0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003100:	4b1d      	ldr	r3, [pc, #116]	@ (8003178 <HAL_RCC_ClockConfig+0x2e8>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	491a      	ldr	r1, [pc, #104]	@ (8003178 <HAL_RCC_ClockConfig+0x2e8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0308 	and.w	r3, r3, #8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d009      	beq.n	8003132 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800311e:	4b16      	ldr	r3, [pc, #88]	@ (8003178 <HAL_RCC_ClockConfig+0x2e8>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	4912      	ldr	r1, [pc, #72]	@ (8003178 <HAL_RCC_ClockConfig+0x2e8>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003132:	f000 f829 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 8003136:	4601      	mov	r1, r0
 8003138:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <HAL_RCC_ClockConfig+0x2e8>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003140:	22f0      	movs	r2, #240	@ 0xf0
 8003142:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	fa92 f2a2 	rbit	r2, r2
 800314a:	60fa      	str	r2, [r7, #12]
  return result;
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	fab2 f282 	clz	r2, r2
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	40d3      	lsrs	r3, r2
 8003156:	4a09      	ldr	r2, [pc, #36]	@ (800317c <HAL_RCC_ClockConfig+0x2ec>)
 8003158:	5cd3      	ldrb	r3, [r2, r3]
 800315a:	fa21 f303 	lsr.w	r3, r1, r3
 800315e:	4a08      	ldr	r2, [pc, #32]	@ (8003180 <HAL_RCC_ClockConfig+0x2f0>)
 8003160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003162:	4b08      	ldr	r3, [pc, #32]	@ (8003184 <HAL_RCC_ClockConfig+0x2f4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fb00 	bl	800076c <HAL_InitTick>
  
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3778      	adds	r7, #120	@ 0x78
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	08003a80 	.word	0x08003a80
 8003180:	20000000 	.word	0x20000000
 8003184:	20000004 	.word	0x20000004

08003188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80031a2:	4b1e      	ldr	r3, [pc, #120]	@ (800321c <HAL_RCC_GetSysClockFreq+0x94>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d002      	beq.n	80031b8 <HAL_RCC_GetSysClockFreq+0x30>
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d003      	beq.n	80031be <HAL_RCC_GetSysClockFreq+0x36>
 80031b6:	e026      	b.n	8003206 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031b8:	4b19      	ldr	r3, [pc, #100]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ba:	613b      	str	r3, [r7, #16]
      break;
 80031bc:	e026      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	0c9b      	lsrs	r3, r3, #18
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c8:	5cd3      	ldrb	r3, [r2, r3]
 80031ca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <HAL_RCC_GetSysClockFreq+0x94>)
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	4a14      	ldr	r2, [pc, #80]	@ (8003228 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031d6:	5cd3      	ldrb	r3, [r2, r3]
 80031d8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d008      	beq.n	80031f6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	e004      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a0c      	ldr	r2, [pc, #48]	@ (800322c <HAL_RCC_GetSysClockFreq+0xa4>)
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	613b      	str	r3, [r7, #16]
      break;
 8003204:	e002      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003206:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_RCC_GetSysClockFreq+0x98>)
 8003208:	613b      	str	r3, [r7, #16]
      break;
 800320a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800320c:	693b      	ldr	r3, [r7, #16]
}
 800320e:	4618      	mov	r0, r3
 8003210:	371c      	adds	r7, #28
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	40021000 	.word	0x40021000
 8003220:	007a1200 	.word	0x007a1200
 8003224:	08003a98 	.word	0x08003a98
 8003228:	08003aa8 	.word	0x08003aa8
 800322c:	003d0900 	.word	0x003d0900

08003230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003234:	4b03      	ldr	r3, [pc, #12]	@ (8003244 <HAL_RCC_GetHCLKFreq+0x14>)
 8003236:	681b      	ldr	r3, [r3, #0]
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000000 	.word	0x20000000

08003248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800324e:	f7ff ffef 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003252:	4601      	mov	r1, r0
 8003254:	4b0b      	ldr	r3, [pc, #44]	@ (8003284 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800325c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003260:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	fa92 f2a2 	rbit	r2, r2
 8003268:	603a      	str	r2, [r7, #0]
  return result;
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	fab2 f282 	clz	r2, r2
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	40d3      	lsrs	r3, r2
 8003274:	4a04      	ldr	r2, [pc, #16]	@ (8003288 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003276:	5cd3      	ldrb	r3, [r2, r3]
 8003278:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800327c:	4618      	mov	r0, r3
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}
 8003284:	40021000 	.word	0x40021000
 8003288:	08003a90 	.word	0x08003a90

0800328c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003292:	f7ff ffcd 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003296:	4601      	mov	r1, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80032a0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80032a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	fa92 f2a2 	rbit	r2, r2
 80032ac:	603a      	str	r2, [r7, #0]
  return result;
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	fab2 f282 	clz	r2, r2
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	40d3      	lsrs	r3, r2
 80032b8:	4a04      	ldr	r2, [pc, #16]	@ (80032cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000
 80032cc:	08003a90 	.word	0x08003a90

080032d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e040      	b.n	8003364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd f96a 	bl	80005cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	@ 0x24
 80032fc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f95e 	bl	80035d8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f825 	bl	800336c <UART_SetConfig>
 8003322:	4603      	mov	r3, r0
 8003324:	2b01      	cmp	r3, #1
 8003326:	d101      	bne.n	800332c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e01b      	b.n	8003364 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800333a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800334a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f9dd 	bl	800371c <UART_CheckIdleState>
 8003362:	4603      	mov	r3, r0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b8a      	ldr	r3, [pc, #552]	@ (80035c0 <UART_SetConfig+0x254>)
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6812      	ldr	r2, [r2, #0]
 800339e:	6979      	ldr	r1, [r7, #20]
 80033a0:	430b      	orrs	r3, r1
 80033a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	697a      	ldr	r2, [r7, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	430a      	orrs	r2, r1
 80033dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a78      	ldr	r2, [pc, #480]	@ (80035c4 <UART_SetConfig+0x258>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d120      	bne.n	800342a <UART_SetConfig+0xbe>
 80033e8:	4b77      	ldr	r3, [pc, #476]	@ (80035c8 <UART_SetConfig+0x25c>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d817      	bhi.n	8003424 <UART_SetConfig+0xb8>
 80033f4:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <UART_SetConfig+0x90>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	0800340d 	.word	0x0800340d
 8003400:	08003419 	.word	0x08003419
 8003404:	0800341f 	.word	0x0800341f
 8003408:	08003413 	.word	0x08003413
 800340c:	2300      	movs	r3, #0
 800340e:	77fb      	strb	r3, [r7, #31]
 8003410:	e01d      	b.n	800344e <UART_SetConfig+0xe2>
 8003412:	2302      	movs	r3, #2
 8003414:	77fb      	strb	r3, [r7, #31]
 8003416:	e01a      	b.n	800344e <UART_SetConfig+0xe2>
 8003418:	2304      	movs	r3, #4
 800341a:	77fb      	strb	r3, [r7, #31]
 800341c:	e017      	b.n	800344e <UART_SetConfig+0xe2>
 800341e:	2308      	movs	r3, #8
 8003420:	77fb      	strb	r3, [r7, #31]
 8003422:	e014      	b.n	800344e <UART_SetConfig+0xe2>
 8003424:	2310      	movs	r3, #16
 8003426:	77fb      	strb	r3, [r7, #31]
 8003428:	e011      	b.n	800344e <UART_SetConfig+0xe2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a67      	ldr	r2, [pc, #412]	@ (80035cc <UART_SetConfig+0x260>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d102      	bne.n	800343a <UART_SetConfig+0xce>
 8003434:	2300      	movs	r3, #0
 8003436:	77fb      	strb	r3, [r7, #31]
 8003438:	e009      	b.n	800344e <UART_SetConfig+0xe2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a64      	ldr	r2, [pc, #400]	@ (80035d0 <UART_SetConfig+0x264>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d102      	bne.n	800344a <UART_SetConfig+0xde>
 8003444:	2300      	movs	r3, #0
 8003446:	77fb      	strb	r3, [r7, #31]
 8003448:	e001      	b.n	800344e <UART_SetConfig+0xe2>
 800344a:	2310      	movs	r3, #16
 800344c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003456:	d15a      	bne.n	800350e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003458:	7ffb      	ldrb	r3, [r7, #31]
 800345a:	2b08      	cmp	r3, #8
 800345c:	d827      	bhi.n	80034ae <UART_SetConfig+0x142>
 800345e:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <UART_SetConfig+0xf8>)
 8003460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003464:	08003489 	.word	0x08003489
 8003468:	08003491 	.word	0x08003491
 800346c:	08003499 	.word	0x08003499
 8003470:	080034af 	.word	0x080034af
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034a7 	.word	0x080034a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7ff fede 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 800348c:	61b8      	str	r0, [r7, #24]
        break;
 800348e:	e013      	b.n	80034b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7ff fefc 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 8003494:	61b8      	str	r0, [r7, #24]
        break;
 8003496:	e00f      	b.n	80034b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b4e      	ldr	r3, [pc, #312]	@ (80035d4 <UART_SetConfig+0x268>)
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e00c      	b.n	80034b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7ff fe73 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 80034a2:	61b8      	str	r0, [r7, #24]
        break;
 80034a4:	e008      	b.n	80034b8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e004      	b.n	80034b8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	77bb      	strb	r3, [r7, #30]
        break;
 80034b6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d074      	beq.n	80035a8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	005a      	lsls	r2, r3, #1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	085b      	lsrs	r3, r3, #1
 80034c8:	441a      	add	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b0f      	cmp	r3, #15
 80034d8:	d916      	bls.n	8003508 <UART_SetConfig+0x19c>
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e0:	d212      	bcs.n	8003508 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f023 030f 	bic.w	r3, r3, #15
 80034ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	085b      	lsrs	r3, r3, #1
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	89fb      	ldrh	r3, [r7, #14]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	89fa      	ldrh	r2, [r7, #14]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	e04f      	b.n	80035a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	77bb      	strb	r3, [r7, #30]
 800350c:	e04c      	b.n	80035a8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	2b08      	cmp	r3, #8
 8003512:	d828      	bhi.n	8003566 <UART_SetConfig+0x1fa>
 8003514:	a201      	add	r2, pc, #4	@ (adr r2, 800351c <UART_SetConfig+0x1b0>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003541 	.word	0x08003541
 8003520:	08003549 	.word	0x08003549
 8003524:	08003551 	.word	0x08003551
 8003528:	08003567 	.word	0x08003567
 800352c:	08003557 	.word	0x08003557
 8003530:	08003567 	.word	0x08003567
 8003534:	08003567 	.word	0x08003567
 8003538:	08003567 	.word	0x08003567
 800353c:	0800355f 	.word	0x0800355f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003540:	f7ff fe82 	bl	8003248 <HAL_RCC_GetPCLK1Freq>
 8003544:	61b8      	str	r0, [r7, #24]
        break;
 8003546:	e013      	b.n	8003570 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003548:	f7ff fea0 	bl	800328c <HAL_RCC_GetPCLK2Freq>
 800354c:	61b8      	str	r0, [r7, #24]
        break;
 800354e:	e00f      	b.n	8003570 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003550:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <UART_SetConfig+0x268>)
 8003552:	61bb      	str	r3, [r7, #24]
        break;
 8003554:	e00c      	b.n	8003570 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003556:	f7ff fe17 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 800355a:	61b8      	str	r0, [r7, #24]
        break;
 800355c:	e008      	b.n	8003570 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800355e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003562:	61bb      	str	r3, [r7, #24]
        break;
 8003564:	e004      	b.n	8003570 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	77bb      	strb	r3, [r7, #30]
        break;
 800356e:	bf00      	nop
    }

    if (pclk != 0U)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d018      	beq.n	80035a8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	085a      	lsrs	r2, r3, #1
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	441a      	add	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	fbb2 f3f3 	udiv	r3, r2, r3
 8003588:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b0f      	cmp	r3, #15
 800358e:	d909      	bls.n	80035a4 <UART_SetConfig+0x238>
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003596:	d205      	bcs.n	80035a4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	e001      	b.n	80035a8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80035b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3720      	adds	r7, #32
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	efff69f3 	.word	0xefff69f3
 80035c4:	40013800 	.word	0x40013800
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40004400 	.word	0x40004400
 80035d0:	40004800 	.word	0x40004800
 80035d4:	007a1200 	.word	0x007a1200

080035d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	430a      	orrs	r2, r1
 8003600:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00a      	beq.n	8003624 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00a      	beq.n	8003646 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00a      	beq.n	8003668 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00a      	beq.n	800368a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00a      	beq.n	80036ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d01a      	beq.n	80036ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036d6:	d10a      	bne.n	80036ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00a      	beq.n	8003710 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
  }
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b098      	sub	sp, #96	@ 0x60
 8003720:	af02      	add	r7, sp, #8
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800372c:	f7fd f862 	bl	80007f4 <HAL_GetTick>
 8003730:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d12e      	bne.n	800379e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003740:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003748:	2200      	movs	r2, #0
 800374a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f88c 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d021      	beq.n	800379e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800376a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800376e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003778:	647b      	str	r3, [r7, #68]	@ 0x44
 800377a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800377e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e6      	bne.n	800375a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2220      	movs	r2, #32
 8003790:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e062      	b.n	8003864 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d149      	bne.n	8003840 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037ac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b4:	2200      	movs	r2, #0
 80037b6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f856 	bl	800386c <UART_WaitOnFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d03c      	beq.n	8003840 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	623b      	str	r3, [r7, #32]
   return(result);
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e6      	bne.n	80037c6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	60fb      	str	r3, [r7, #12]
   return(result);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003818:	61fa      	str	r2, [r7, #28]
 800381a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	69b9      	ldr	r1, [r7, #24]
 800381e:	69fa      	ldr	r2, [r7, #28]
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	617b      	str	r3, [r7, #20]
   return(result);
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e011      	b.n	8003864 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2200      	movs	r2, #0
 8003858:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003862:	2300      	movs	r3, #0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3758      	adds	r7, #88	@ 0x58
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	603b      	str	r3, [r7, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387c:	e04f      	b.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003884:	d04b      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003886:	f7fc ffb5 	bl	80007f4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	429a      	cmp	r2, r3
 8003894:	d302      	bcc.n	800389c <UART_WaitOnFlagUntilTimeout+0x30>
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	e04e      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d037      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b80      	cmp	r3, #128	@ 0x80
 80038b2:	d034      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	2b40      	cmp	r3, #64	@ 0x40
 80038b8:	d031      	beq.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d110      	bne.n	80038ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2208      	movs	r2, #8
 80038ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 f838 	bl	8003946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2208      	movs	r2, #8
 80038da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e029      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038f8:	d111      	bne.n	800391e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f81e 	bl	8003946 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2220      	movs	r2, #32
 800390e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e00f      	b.n	800393e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69da      	ldr	r2, [r3, #28]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	429a      	cmp	r2, r3
 800393a:	d0a0      	beq.n	800387e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003946:	b480      	push	{r7}
 8003948:	b095      	sub	sp, #84	@ 0x54
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003956:	e853 3f00 	ldrex	r3, [r3]
 800395a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800395c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800395e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	461a      	mov	r2, r3
 800396a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800396c:	643b      	str	r3, [r7, #64]	@ 0x40
 800396e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003970:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003972:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003974:	e841 2300 	strex	r3, r2, [r1]
 8003978:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800397a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e6      	bne.n	800394e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3308      	adds	r3, #8
 8003986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6a3b      	ldr	r3, [r7, #32]
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f023 0301 	bic.w	r3, r3, #1
 8003996:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80039a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e5      	bne.n	8003980 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d118      	bne.n	80039ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f023 0310 	bic.w	r3, r3, #16
 80039d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039da:	61bb      	str	r3, [r7, #24]
 80039dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	6979      	ldr	r1, [r7, #20]
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	e841 2300 	strex	r3, r2, [r1]
 80039e6:	613b      	str	r3, [r7, #16]
   return(result);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1e6      	bne.n	80039bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a02:	bf00      	nop
 8003a04:	3754      	adds	r7, #84	@ 0x54
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <memset>:
 8003a0e:	4402      	add	r2, r0
 8003a10:	4603      	mov	r3, r0
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d100      	bne.n	8003a18 <memset+0xa>
 8003a16:	4770      	bx	lr
 8003a18:	f803 1b01 	strb.w	r1, [r3], #1
 8003a1c:	e7f9      	b.n	8003a12 <memset+0x4>
	...

08003a20 <__libc_init_array>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	4d0d      	ldr	r5, [pc, #52]	@ (8003a58 <__libc_init_array+0x38>)
 8003a24:	4c0d      	ldr	r4, [pc, #52]	@ (8003a5c <__libc_init_array+0x3c>)
 8003a26:	1b64      	subs	r4, r4, r5
 8003a28:	10a4      	asrs	r4, r4, #2
 8003a2a:	2600      	movs	r6, #0
 8003a2c:	42a6      	cmp	r6, r4
 8003a2e:	d109      	bne.n	8003a44 <__libc_init_array+0x24>
 8003a30:	4d0b      	ldr	r5, [pc, #44]	@ (8003a60 <__libc_init_array+0x40>)
 8003a32:	4c0c      	ldr	r4, [pc, #48]	@ (8003a64 <__libc_init_array+0x44>)
 8003a34:	f000 f818 	bl	8003a68 <_init>
 8003a38:	1b64      	subs	r4, r4, r5
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	2600      	movs	r6, #0
 8003a3e:	42a6      	cmp	r6, r4
 8003a40:	d105      	bne.n	8003a4e <__libc_init_array+0x2e>
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a48:	4798      	blx	r3
 8003a4a:	3601      	adds	r6, #1
 8003a4c:	e7ee      	b.n	8003a2c <__libc_init_array+0xc>
 8003a4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a52:	4798      	blx	r3
 8003a54:	3601      	adds	r6, #1
 8003a56:	e7f2      	b.n	8003a3e <__libc_init_array+0x1e>
 8003a58:	08003ab8 	.word	0x08003ab8
 8003a5c:	08003ab8 	.word	0x08003ab8
 8003a60:	08003ab8 	.word	0x08003ab8
 8003a64:	08003abc 	.word	0x08003abc

08003a68 <_init>:
 8003a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a6a:	bf00      	nop
 8003a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a6e:	bc08      	pop	{r3}
 8003a70:	469e      	mov	lr, r3
 8003a72:	4770      	bx	lr

08003a74 <_fini>:
 8003a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a76:	bf00      	nop
 8003a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7a:	bc08      	pop	{r3}
 8003a7c:	469e      	mov	lr, r3
 8003a7e:	4770      	bx	lr
