
F3_CanWrite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003528  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080036b0  080036b0  000046b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036e8  080036e8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080036e8  080036e8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036e8  080036e8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036e8  080036e8  000046e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036ec  080036ec  000046ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036f0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000500c  2**0
                  CONTENTS
 10 .bss          0000012c  2000000c  2000000c  0000500c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000138  20000138  0000500c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009e20  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b9  00000000  00000000  0000ee5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000768  00000000  00000000  00010418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005ac  00000000  00000000  00010b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d3e  00000000  00000000  0001112c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000995b  00000000  00000000  0002ae6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009958a  00000000  00000000  000347c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cdd4f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001dbc  00000000  00000000  000cdd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000085  00000000  00000000  000cfb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003698 	.word	0x08003698

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003698 	.word	0x08003698

080001c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_CAN_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b08c      	sub	sp, #48	@ 0x30
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,RxData)==HAL_OK){
 80001d0:	f107 030c 	add.w	r3, r7, #12
 80001d4:	f107 0214 	add.w	r2, r7, #20
 80001d8:	2100      	movs	r1, #0
 80001da:	6878      	ldr	r0, [r7, #4]
 80001dc:	f000 fe36 	bl	8000e4c <HAL_CAN_GetRxMessage>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d122      	bne.n	800022c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
		id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 80001e6:	69fb      	ldr	r3, [r7, #28]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d101      	bne.n	80001f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 80001ec:	697b      	ldr	r3, [r7, #20]
 80001ee:	e000      	b.n	80001f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 80001f0:	69bb      	ldr	r3, [r7, #24]
 80001f2:	4a10      	ldr	r2, [pc, #64]	@ (8000234 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80001f4:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC;                                                     // DLC
 80001f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80001f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000238 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80001fa:	6013      	str	r3, [r2, #0]
		data[0] = RxData[0];                                                    // Data
 80001fc:	7b3a      	ldrb	r2, [r7, #12]
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000200:	701a      	strb	r2, [r3, #0]
		data[1] = RxData[1];
 8000202:	7b7a      	ldrb	r2, [r7, #13]
 8000204:	4b0d      	ldr	r3, [pc, #52]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000206:	705a      	strb	r2, [r3, #1]
		data[2] = RxData[2];
 8000208:	7bba      	ldrb	r2, [r7, #14]
 800020a:	4b0c      	ldr	r3, [pc, #48]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800020c:	709a      	strb	r2, [r3, #2]
		data[3] = RxData[3];
 800020e:	7bfa      	ldrb	r2, [r7, #15]
 8000210:	4b0a      	ldr	r3, [pc, #40]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000212:	70da      	strb	r2, [r3, #3]
		data[4] = RxData[4];
 8000214:	7c3a      	ldrb	r2, [r7, #16]
 8000216:	4b09      	ldr	r3, [pc, #36]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000218:	711a      	strb	r2, [r3, #4]
		data[5] = RxData[5];
 800021a:	7c7a      	ldrb	r2, [r7, #17]
 800021c:	4b07      	ldr	r3, [pc, #28]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800021e:	715a      	strb	r2, [r3, #5]
		data[6] = RxData[6];
 8000220:	7cba      	ldrb	r2, [r7, #18]
 8000222:	4b06      	ldr	r3, [pc, #24]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 8000224:	719a      	strb	r2, [r3, #6]
		data[7] = RxData[7];
 8000226:	7cfa      	ldrb	r2, [r7, #19]
 8000228:	4b04      	ldr	r3, [pc, #16]	@ (800023c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800022a:	71da      	strb	r2, [r3, #7]
	}
}
 800022c:	bf00      	nop
 800022e:	3730      	adds	r7, #48	@ 0x30
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000124 	.word	0x20000124
 8000238:	20000128 	.word	0x20000128
 800023c:	2000012c 	.word	0x2000012c

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fa8e 	bl	8000764 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f896 	bl	8000378 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f936 	bl	80004bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000250:	f000 f904 	bl	800045c <MX_USART2_UART_Init>
  MX_CAN_Init();
 8000254:	f000 f8cc 	bl	80003f0 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
//  TxHeader.StdId = 0x401;
  TxHeader.RTR = CAN_RTR_DATA;
 8000258:	4b42      	ldr	r3, [pc, #264]	@ (8000364 <main+0x124>)
 800025a:	2200      	movs	r2, #0
 800025c:	60da      	str	r2, [r3, #12]
  TxHeader.IDE = CAN_ID_STD;
 800025e:	4b41      	ldr	r3, [pc, #260]	@ (8000364 <main+0x124>)
 8000260:	2200      	movs	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
  TxHeader.DLC = 8;
 8000264:	4b3f      	ldr	r3, [pc, #252]	@ (8000364 <main+0x124>)
 8000266:	2208      	movs	r2, #8
 8000268:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 800026a:	4b3e      	ldr	r3, [pc, #248]	@ (8000364 <main+0x124>)
 800026c:	2200      	movs	r2, #0
 800026e:	751a      	strb	r2, [r3, #20]

  filter.FilterIdHigh = 0;
 8000270:	4b3d      	ldr	r3, [pc, #244]	@ (8000368 <main+0x128>)
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow = 0;
 8000276:	4b3c      	ldr	r3, [pc, #240]	@ (8000368 <main+0x128>)
 8000278:	2200      	movs	r2, #0
 800027a:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = 0;
 800027c:	4b3a      	ldr	r3, [pc, #232]	@ (8000368 <main+0x128>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0;
 8000282:	4b39      	ldr	r3, [pc, #228]	@ (8000368 <main+0x128>)
 8000284:	2200      	movs	r2, #0
 8000286:	60da      	str	r2, [r3, #12]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000288:	4b37      	ldr	r3, [pc, #220]	@ (8000368 <main+0x128>)
 800028a:	2201      	movs	r2, #1
 800028c:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800028e:	4b36      	ldr	r3, [pc, #216]	@ (8000368 <main+0x128>)
 8000290:	2200      	movs	r2, #0
 8000292:	611a      	str	r2, [r3, #16]
  filter.FilterBank = 0;
 8000294:	4b34      	ldr	r3, [pc, #208]	@ (8000368 <main+0x128>)
 8000296:	2200      	movs	r2, #0
 8000298:	615a      	str	r2, [r3, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 800029a:	4b33      	ldr	r3, [pc, #204]	@ (8000368 <main+0x128>)
 800029c:	2200      	movs	r2, #0
 800029e:	619a      	str	r2, [r3, #24]
  filter.SlaveStartFilterBank = 14;
 80002a0:	4b31      	ldr	r3, [pc, #196]	@ (8000368 <main+0x128>)
 80002a2:	220e      	movs	r2, #14
 80002a4:	625a      	str	r2, [r3, #36]	@ 0x24
  filter.FilterActivation = ENABLE;
 80002a6:	4b30      	ldr	r3, [pc, #192]	@ (8000368 <main+0x128>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan,&filter);
 80002ac:	492e      	ldr	r1, [pc, #184]	@ (8000368 <main+0x128>)
 80002ae:	482f      	ldr	r0, [pc, #188]	@ (800036c <main+0x12c>)
 80002b0:	f000 fbb9 	bl	8000a26 <HAL_CAN_ConfigFilter>

  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80002b4:	2102      	movs	r1, #2
 80002b6:	482d      	ldr	r0, [pc, #180]	@ (800036c <main+0x12c>)
 80002b8:	f000 feea 	bl	8001090 <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan);
 80002bc:	482b      	ldr	r0, [pc, #172]	@ (800036c <main+0x12c>)
 80002be:	f000 fc7c 	bl	8000bba <HAL_CAN_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  TxHeader.StdId = 0x401;
 80002c2:	4b28      	ldr	r3, [pc, #160]	@ (8000364 <main+0x124>)
 80002c4:	f240 4201 	movw	r2, #1025	@ 0x401
 80002c8:	601a      	str	r2, [r3, #0]
	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 80002ca:	4828      	ldr	r0, [pc, #160]	@ (800036c <main+0x12c>)
 80002cc:	f000 fd89 	bl	8000de2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d01d      	beq.n	8000312 <main+0xd2>
		  TxData[0] = 41;
 80002d6:	4b26      	ldr	r3, [pc, #152]	@ (8000370 <main+0x130>)
 80002d8:	2229      	movs	r2, #41	@ 0x29
 80002da:	701a      	strb	r2, [r3, #0]
  		  TxData[1] = 42;
 80002dc:	4b24      	ldr	r3, [pc, #144]	@ (8000370 <main+0x130>)
 80002de:	222a      	movs	r2, #42	@ 0x2a
 80002e0:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 43;
 80002e2:	4b23      	ldr	r3, [pc, #140]	@ (8000370 <main+0x130>)
 80002e4:	222b      	movs	r2, #43	@ 0x2b
 80002e6:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 44;
 80002e8:	4b21      	ldr	r3, [pc, #132]	@ (8000370 <main+0x130>)
 80002ea:	222c      	movs	r2, #44	@ 0x2c
 80002ec:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 45;
 80002ee:	4b20      	ldr	r3, [pc, #128]	@ (8000370 <main+0x130>)
 80002f0:	222d      	movs	r2, #45	@ 0x2d
 80002f2:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 46;
 80002f4:	4b1e      	ldr	r3, [pc, #120]	@ (8000370 <main+0x130>)
 80002f6:	222e      	movs	r2, #46	@ 0x2e
 80002f8:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 47;
 80002fa:	4b1d      	ldr	r3, [pc, #116]	@ (8000370 <main+0x130>)
 80002fc:	222f      	movs	r2, #47	@ 0x2f
 80002fe:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 48;
 8000300:	4b1b      	ldr	r3, [pc, #108]	@ (8000370 <main+0x130>)
 8000302:	2230      	movs	r2, #48	@ 0x30
 8000304:	71da      	strb	r2, [r3, #7]
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8000306:	4b1b      	ldr	r3, [pc, #108]	@ (8000374 <main+0x134>)
 8000308:	4a19      	ldr	r2, [pc, #100]	@ (8000370 <main+0x130>)
 800030a:	4916      	ldr	r1, [pc, #88]	@ (8000364 <main+0x124>)
 800030c:	4817      	ldr	r0, [pc, #92]	@ (800036c <main+0x12c>)
 800030e:	f000 fc98 	bl	8000c42 <HAL_CAN_AddTxMessage>
	  }
	  TxHeader.StdId = 0x201;
 8000312:	4b14      	ldr	r3, [pc, #80]	@ (8000364 <main+0x124>)
 8000314:	f240 2201 	movw	r2, #513	@ 0x201
 8000318:	601a      	str	r2, [r3, #0]
	  if(0<HAL_CAN_GetTxMailboxesFreeLevel(&hcan)){
 800031a:	4814      	ldr	r0, [pc, #80]	@ (800036c <main+0x12c>)
 800031c:	f000 fd61 	bl	8000de2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0cd      	beq.n	80002c2 <main+0x82>
		  TxData[0] = 21;
 8000326:	4b12      	ldr	r3, [pc, #72]	@ (8000370 <main+0x130>)
 8000328:	2215      	movs	r2, #21
 800032a:	701a      	strb	r2, [r3, #0]
  		  TxData[1] = 22;
 800032c:	4b10      	ldr	r3, [pc, #64]	@ (8000370 <main+0x130>)
 800032e:	2216      	movs	r2, #22
 8000330:	705a      	strb	r2, [r3, #1]
		  TxData[2] = 23;
 8000332:	4b0f      	ldr	r3, [pc, #60]	@ (8000370 <main+0x130>)
 8000334:	2217      	movs	r2, #23
 8000336:	709a      	strb	r2, [r3, #2]
		  TxData[3] = 24;
 8000338:	4b0d      	ldr	r3, [pc, #52]	@ (8000370 <main+0x130>)
 800033a:	2218      	movs	r2, #24
 800033c:	70da      	strb	r2, [r3, #3]
		  TxData[4] = 25;
 800033e:	4b0c      	ldr	r3, [pc, #48]	@ (8000370 <main+0x130>)
 8000340:	2219      	movs	r2, #25
 8000342:	711a      	strb	r2, [r3, #4]
		  TxData[5] = 26;
 8000344:	4b0a      	ldr	r3, [pc, #40]	@ (8000370 <main+0x130>)
 8000346:	221a      	movs	r2, #26
 8000348:	715a      	strb	r2, [r3, #5]
		  TxData[6] = 27;
 800034a:	4b09      	ldr	r3, [pc, #36]	@ (8000370 <main+0x130>)
 800034c:	221b      	movs	r2, #27
 800034e:	719a      	strb	r2, [r3, #6]
		  TxData[7] = 28;
 8000350:	4b07      	ldr	r3, [pc, #28]	@ (8000370 <main+0x130>)
 8000352:	221c      	movs	r2, #28
 8000354:	71da      	strb	r2, [r3, #7]
		  HAL_CAN_AddTxMessage(&hcan,&TxHeader,TxData,&TxMailbox);
 8000356:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <main+0x134>)
 8000358:	4a05      	ldr	r2, [pc, #20]	@ (8000370 <main+0x130>)
 800035a:	4902      	ldr	r1, [pc, #8]	@ (8000364 <main+0x124>)
 800035c:	4803      	ldr	r0, [pc, #12]	@ (800036c <main+0x12c>)
 800035e:	f000 fc70 	bl	8000c42 <HAL_CAN_AddTxMessage>
	  TxHeader.StdId = 0x401;
 8000362:	e7ae      	b.n	80002c2 <main+0x82>
 8000364:	200000d8 	.word	0x200000d8
 8000368:	200000fc 	.word	0x200000fc
 800036c:	20000028 	.word	0x20000028
 8000370:	200000f4 	.word	0x200000f4
 8000374:	200000f0 	.word	0x200000f0

08000378 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b090      	sub	sp, #64	@ 0x40
 800037c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800037e:	f107 0318 	add.w	r3, r7, #24
 8000382:	2228      	movs	r2, #40	@ 0x28
 8000384:	2100      	movs	r1, #0
 8000386:	4618      	mov	r0, r3
 8000388:	f003 f959 	bl	800363e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800038c:	1d3b      	adds	r3, r7, #4
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
 8000398:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800039a:	2302      	movs	r3, #2
 800039c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800039e:	2301      	movs	r3, #1
 80003a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a2:	2310      	movs	r3, #16
 80003a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003a6:	2300      	movs	r3, #0
 80003a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003aa:	f107 0318 	add.w	r3, r7, #24
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 fb48 	bl	8001a44 <HAL_RCC_OscConfig>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ba:	f000 f8a3 	bl	8000504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003be:	230f      	movs	r3, #15
 80003c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003d2:	1d3b      	adds	r3, r7, #4
 80003d4:	2100      	movs	r1, #0
 80003d6:	4618      	mov	r0, r3
 80003d8:	f002 fb72 	bl	8002ac0 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003e2:	f000 f88f 	bl	8000504 <Error_Handler>
  }
}
 80003e6:	bf00      	nop
 80003e8:	3740      	adds	r7, #64	@ 0x40
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
	...

080003f0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80003f4:	4b17      	ldr	r3, [pc, #92]	@ (8000454 <MX_CAN_Init+0x64>)
 80003f6:	4a18      	ldr	r2, [pc, #96]	@ (8000458 <MX_CAN_Init+0x68>)
 80003f8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 80003fa:	4b16      	ldr	r3, [pc, #88]	@ (8000454 <MX_CAN_Init+0x64>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000400:	4b14      	ldr	r3, [pc, #80]	@ (8000454 <MX_CAN_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <MX_CAN_Init+0x64>)
 8000408:	2200      	movs	r2, #0
 800040a:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_CAN_Init+0x64>)
 800040e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000412:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000414:	4b0f      	ldr	r3, [pc, #60]	@ (8000454 <MX_CAN_Init+0x64>)
 8000416:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800041a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <MX_CAN_Init+0x64>)
 800041e:	2200      	movs	r2, #0
 8000420:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000422:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_CAN_Init+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000428:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <MX_CAN_Init+0x64>)
 800042a:	2200      	movs	r2, #0
 800042c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800042e:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_CAN_Init+0x64>)
 8000430:	2200      	movs	r2, #0
 8000432:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000434:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <MX_CAN_Init+0x64>)
 8000436:	2200      	movs	r2, #0
 8000438:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_CAN_Init+0x64>)
 800043c:	2200      	movs	r2, #0
 800043e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000440:	4804      	ldr	r0, [pc, #16]	@ (8000454 <MX_CAN_Init+0x64>)
 8000442:	f000 f9f5 	bl	8000830 <HAL_CAN_Init>
 8000446:	4603      	mov	r3, r0
 8000448:	2b00      	cmp	r3, #0
 800044a:	d001      	beq.n	8000450 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 800044c:	f000 f85a 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000450:	bf00      	nop
 8000452:	bd80      	pop	{r7, pc}
 8000454:	20000028 	.word	0x20000028
 8000458:	40006400 	.word	0x40006400

0800045c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000460:	4b14      	ldr	r3, [pc, #80]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 8000462:	4a15      	ldr	r2, [pc, #84]	@ (80004b8 <MX_USART2_UART_Init+0x5c>)
 8000464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000466:	4b13      	ldr	r3, [pc, #76]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 8000468:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800046c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b11      	ldr	r3, [pc, #68]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b0f      	ldr	r3, [pc, #60]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800047a:	4b0e      	ldr	r3, [pc, #56]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b0b      	ldr	r3, [pc, #44]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b09      	ldr	r3, [pc, #36]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000492:	4b08      	ldr	r3, [pc, #32]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000498:	4b06      	ldr	r3, [pc, #24]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800049e:	4805      	ldr	r0, [pc, #20]	@ (80004b4 <MX_USART2_UART_Init+0x58>)
 80004a0:	f002 fd2e 	bl	8002f00 <HAL_UART_Init>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004aa:	f000 f82b 	bl	8000504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000050 	.word	0x20000050
 80004b8:	40004400 	.word	0x40004400

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <MX_GPIO_Init+0x44>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <MX_GPIO_Init+0x44>)
 80004c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004cc:	6153      	str	r3, [r2, #20]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_GPIO_Init+0x44>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_GPIO_Init+0x44>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <MX_GPIO_Init+0x44>)
 80004e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004e4:	6153      	str	r3, [r2, #20]
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <MX_GPIO_Init+0x44>)
 80004e8:	695b      	ldr	r3, [r3, #20]
 80004ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000508:	b672      	cpsid	i
}
 800050a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <Error_Handler+0x8>

08000510 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000516:	4b0f      	ldr	r3, [pc, #60]	@ (8000554 <HAL_MspInit+0x44>)
 8000518:	699b      	ldr	r3, [r3, #24]
 800051a:	4a0e      	ldr	r2, [pc, #56]	@ (8000554 <HAL_MspInit+0x44>)
 800051c:	f043 0301 	orr.w	r3, r3, #1
 8000520:	6193      	str	r3, [r2, #24]
 8000522:	4b0c      	ldr	r3, [pc, #48]	@ (8000554 <HAL_MspInit+0x44>)
 8000524:	699b      	ldr	r3, [r3, #24]
 8000526:	f003 0301 	and.w	r3, r3, #1
 800052a:	607b      	str	r3, [r7, #4]
 800052c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052e:	4b09      	ldr	r3, [pc, #36]	@ (8000554 <HAL_MspInit+0x44>)
 8000530:	69db      	ldr	r3, [r3, #28]
 8000532:	4a08      	ldr	r2, [pc, #32]	@ (8000554 <HAL_MspInit+0x44>)
 8000534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000538:	61d3      	str	r3, [r2, #28]
 800053a:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_MspInit+0x44>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	@ 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1c      	ldr	r2, [pc, #112]	@ (80005e8 <HAL_CAN_MspInit+0x90>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d131      	bne.n	80005de <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057a:	4b1c      	ldr	r3, [pc, #112]	@ (80005ec <HAL_CAN_MspInit+0x94>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	4a1b      	ldr	r2, [pc, #108]	@ (80005ec <HAL_CAN_MspInit+0x94>)
 8000580:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000584:	61d3      	str	r3, [r2, #28]
 8000586:	4b19      	ldr	r3, [pc, #100]	@ (80005ec <HAL_CAN_MspInit+0x94>)
 8000588:	69db      	ldr	r3, [r3, #28]
 800058a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800058e:	613b      	str	r3, [r7, #16]
 8000590:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000592:	4b16      	ldr	r3, [pc, #88]	@ (80005ec <HAL_CAN_MspInit+0x94>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <HAL_CAN_MspInit+0x94>)
 8000598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b13      	ldr	r3, [pc, #76]	@ (80005ec <HAL_CAN_MspInit+0x94>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80005aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80005ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005b8:	2303      	movs	r3, #3
 80005ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 80005bc:	2309      	movs	r3, #9
 80005be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ca:	f001 f8c9 	bl	8001760 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2014      	movs	r0, #20
 80005d4:	f001 f88d 	bl	80016f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 80005d8:	2014      	movs	r0, #20
 80005da:	f001 f8a6 	bl	800172a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 80005de:	bf00      	nop
 80005e0:	3728      	adds	r7, #40	@ 0x28
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40006400 	.word	0x40006400
 80005ec:	40021000 	.word	0x40021000

080005f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	@ 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <HAL_UART_MspInit+0x80>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d129      	bne.n	8000666 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000612:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <HAL_UART_MspInit+0x84>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <HAL_UART_MspInit+0x84>)
 8000618:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <HAL_UART_MspInit+0x84>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000626:	613b      	str	r3, [r7, #16]
 8000628:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800062a:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_UART_MspInit+0x84>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	4a11      	ldr	r2, [pc, #68]	@ (8000674 <HAL_UART_MspInit+0x84>)
 8000630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000634:	6153      	str	r3, [r2, #20]
 8000636:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <HAL_UART_MspInit+0x84>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8000642:	f248 0304 	movw	r3, #32772	@ 0x8004
 8000646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000650:	2303      	movs	r3, #3
 8000652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000654:	2307      	movs	r3, #7
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000662:	f001 f87d 	bl	8001760 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000666:	bf00      	nop
 8000668:	3728      	adds	r7, #40	@ 0x28
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40004400 	.word	0x40004400
 8000674:	40021000 	.word	0x40021000

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <NMI_Handler+0x4>

08000680 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <HardFault_Handler+0x4>

08000688 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <UsageFault_Handler+0x4>

080006a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a4:	bf00      	nop
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr

080006ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr

080006bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr

080006ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ce:	f000 f88f 	bl	80007f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80006dc:	4802      	ldr	r0, [pc, #8]	@ (80006e8 <CAN_RX0_IRQHandler+0x10>)
 80006de:	f000 fcfd 	bl	80010dc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000028 	.word	0x20000028

080006ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <SystemInit+0x20>)
 80006f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006f6:	4a05      	ldr	r2, [pc, #20]	@ (800070c <SystemInit+0x20>)
 80006f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000700:	bf00      	nop
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00

08000710 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000710:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000748 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000714:	f7ff ffea 	bl	80006ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	@ (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	@ (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	@ (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	@ (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800073e:	f002 ff87 	bl	8003650 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000742:	f7ff fd7d 	bl	8000240 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000748:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800074c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000750:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000754:	080036f0 	.word	0x080036f0
  ldr r2, =_sbss
 8000758:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800075c:	20000138 	.word	0x20000138

08000760 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_2_IRQHandler>
	...

08000764 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000768:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_Init+0x28>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a07      	ldr	r2, [pc, #28]	@ (800078c <HAL_Init+0x28>)
 800076e:	f043 0310 	orr.w	r3, r3, #16
 8000772:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000774:	2003      	movs	r0, #3
 8000776:	f000 ffb1 	bl	80016dc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077a:	2000      	movs	r0, #0
 800077c:	f000 f808 	bl	8000790 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000780:	f7ff fec6 	bl	8000510 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40022000 	.word	0x40022000

08000790 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <HAL_InitTick+0x54>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0x58>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 ffc9 	bl	8001746 <HAL_SYSTICK_Config>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00e      	b.n	80007dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b0f      	cmp	r3, #15
 80007c2:	d80a      	bhi.n	80007da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c4:	2200      	movs	r2, #0
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f000 ff91 	bl	80016f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d0:	4a06      	ldr	r2, [pc, #24]	@ (80007ec <HAL_InitTick+0x5c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000000 	.word	0x20000000
 80007e8:	20000008 	.word	0x20000008
 80007ec:	20000004 	.word	0x20000004

080007f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f4:	4b06      	ldr	r3, [pc, #24]	@ (8000810 <HAL_IncTick+0x20>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x24>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4413      	add	r3, r2
 8000800:	4a04      	ldr	r2, [pc, #16]	@ (8000814 <HAL_IncTick+0x24>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	20000008 	.word	0x20000008
 8000814:	20000134 	.word	0x20000134

08000818 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;  
 800081c:	4b03      	ldr	r3, [pc, #12]	@ (800082c <HAL_GetTick+0x14>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	20000134 	.word	0x20000134

08000830 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d101      	bne.n	8000842 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
 8000840:	e0ed      	b.n	8000a1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	2b00      	cmp	r3, #0
 800084c:	d102      	bne.n	8000854 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f7ff fe82 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	f042 0201 	orr.w	r2, r2, #1
 8000862:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000864:	f7ff ffd8 	bl	8000818 <HAL_GetTick>
 8000868:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800086a:	e012      	b.n	8000892 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800086c:	f7ff ffd4 	bl	8000818 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b0a      	cmp	r3, #10
 8000878:	d90b      	bls.n	8000892 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800087e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2205      	movs	r2, #5
 800088a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	e0c5      	b.n	8000a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0e5      	beq.n	800086c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f022 0202 	bic.w	r2, r2, #2
 80008ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80008b0:	f7ff ffb2 	bl	8000818 <HAL_GetTick>
 80008b4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008b6:	e012      	b.n	80008de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80008b8:	f7ff ffae 	bl	8000818 <HAL_GetTick>
 80008bc:	4602      	mov	r2, r0
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	2b0a      	cmp	r3, #10
 80008c4:	d90b      	bls.n	80008de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008ca:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2205      	movs	r2, #5
 80008d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e09f      	b.n	8000a1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1e5      	bne.n	80008b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	7e1b      	ldrb	r3, [r3, #24]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d108      	bne.n	8000906 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	e007      	b.n	8000916 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000914:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	7e5b      	ldrb	r3, [r3, #25]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d108      	bne.n	8000930 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	e007      	b.n	8000940 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800093e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	7e9b      	ldrb	r3, [r3, #26]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d108      	bne.n	800095a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f042 0220 	orr.w	r2, r2, #32
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	e007      	b.n	800096a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f022 0220 	bic.w	r2, r2, #32
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7edb      	ldrb	r3, [r3, #27]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d108      	bne.n	8000984 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f022 0210 	bic.w	r2, r2, #16
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	e007      	b.n	8000994 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 0210 	orr.w	r2, r2, #16
 8000992:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7f1b      	ldrb	r3, [r3, #28]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d108      	bne.n	80009ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f042 0208 	orr.w	r2, r2, #8
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	e007      	b.n	80009be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	f022 0208 	bic.w	r2, r2, #8
 80009bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7f5b      	ldrb	r3, [r3, #29]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d108      	bne.n	80009d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	681a      	ldr	r2, [r3, #0]
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f042 0204 	orr.w	r2, r2, #4
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	e007      	b.n	80009e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 0204 	bic.w	r2, r2, #4
 80009e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	431a      	orrs	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	691b      	ldr	r3, [r3, #16]
 80009f6:	431a      	orrs	r2, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695b      	ldr	r3, [r3, #20]
 80009fc:	ea42 0103 	orr.w	r1, r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685b      	ldr	r3, [r3, #4]
 8000a04:	1e5a      	subs	r2, r3, #1
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	430a      	orrs	r2, r1
 8000a0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2201      	movs	r2, #1
 8000a18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000a26:	b480      	push	{r7}
 8000a28:	b087      	sub	sp, #28
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
 8000a2e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a3c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000a3e:	7cfb      	ldrb	r3, [r7, #19]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d003      	beq.n	8000a4c <HAL_CAN_ConfigFilter+0x26>
 8000a44:	7cfb      	ldrb	r3, [r7, #19]
 8000a46:	2b02      	cmp	r3, #2
 8000a48:	f040 80aa 	bne.w	8000ba0 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000a52:	f043 0201 	orr.w	r2, r3, #1
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	f003 031f 	and.w	r3, r3, #31
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	43db      	mvns	r3, r3
 8000a76:	401a      	ands	r2, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	69db      	ldr	r3, [r3, #28]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d123      	bne.n	8000ace <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	401a      	ands	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aa4:	683a      	ldr	r2, [r7, #0]
 8000aa6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000aa8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	3248      	adds	r2, #72	@ 0x48
 8000aae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ac2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ac4:	6979      	ldr	r1, [r7, #20]
 8000ac6:	3348      	adds	r3, #72	@ 0x48
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	440b      	add	r3, r1
 8000acc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d122      	bne.n	8000b1c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000ad6:	697b      	ldr	r3, [r7, #20]
 8000ad8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af2:	683a      	ldr	r2, [r7, #0]
 8000af4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000af6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	3248      	adds	r2, #72	@ 0x48
 8000afc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000b10:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000b12:	6979      	ldr	r1, [r7, #20]
 8000b14:	3348      	adds	r3, #72	@ 0x48
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	440b      	add	r3, r1
 8000b1a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d109      	bne.n	8000b38 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	401a      	ands	r2, r3
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000b36:	e007      	b.n	8000b48 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	431a      	orrs	r2, r3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d109      	bne.n	8000b64 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	43db      	mvns	r3, r3
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000b62:	e007      	b.n	8000b74 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	431a      	orrs	r2, r3
 8000b6e:	697b      	ldr	r3, [r7, #20]
 8000b70:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d107      	bne.n	8000b8c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	431a      	orrs	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b92:	f023 0201 	bic.w	r2, r3, #1
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e006      	b.n	8000bae <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ba4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
  }
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	371c      	adds	r7, #28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr

08000bba <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b084      	sub	sp, #16
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d12e      	bne.n	8000c2c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 0201 	bic.w	r2, r2, #1
 8000be4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000be6:	f7ff fe17 	bl	8000818 <HAL_GetTick>
 8000bea:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bec:	e012      	b.n	8000c14 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bee:	f7ff fe13 	bl	8000818 <HAL_GetTick>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	1ad3      	subs	r3, r2, r3
 8000bf8:	2b0a      	cmp	r3, #10
 8000bfa:	d90b      	bls.n	8000c14 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c00:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	2205      	movs	r2, #5
 8000c0c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000c10:	2301      	movs	r3, #1
 8000c12:	e012      	b.n	8000c3a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1e5      	bne.n	8000bee <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e006      	b.n	8000c3a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c30:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c38:	2301      	movs	r3, #1
  }
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c42:	b480      	push	{r7}
 8000c44:	b089      	sub	sp, #36	@ 0x24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c56:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c60:	7ffb      	ldrb	r3, [r7, #31]
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d003      	beq.n	8000c6e <HAL_CAN_AddTxMessage+0x2c>
 8000c66:	7ffb      	ldrb	r3, [r7, #31]
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	f040 80ad 	bne.w	8000dc8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c6e:	69bb      	ldr	r3, [r7, #24]
 8000c70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10a      	bne.n	8000c8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d105      	bne.n	8000c8e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	f000 8095 	beq.w	8000db8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	0e1b      	lsrs	r3, r3, #24
 8000c92:	f003 0303 	and.w	r3, r3, #3
 8000c96:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c98:	2201      	movs	r2, #1
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10d      	bne.n	8000cc6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cb4:	68f9      	ldr	r1, [r7, #12]
 8000cb6:	6809      	ldr	r1, [r1, #0]
 8000cb8:	431a      	orrs	r2, r3
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3318      	adds	r3, #24
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	440b      	add	r3, r1
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e00f      	b.n	8000ce6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cd0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cd6:	68f9      	ldr	r1, [r7, #12]
 8000cd8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000cda:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3318      	adds	r3, #24
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	440b      	add	r3, r1
 8000ce4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6819      	ldr	r1, [r3, #0]
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3318      	adds	r3, #24
 8000cf2:	011b      	lsls	r3, r3, #4
 8000cf4:	440b      	add	r3, r1
 8000cf6:	3304      	adds	r3, #4
 8000cf8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	7d1b      	ldrb	r3, [r3, #20]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d111      	bne.n	8000d26 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	3318      	adds	r3, #24
 8000d0a:	011b      	lsls	r3, r3, #4
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3304      	adds	r3, #4
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	6811      	ldr	r1, [r2, #0]
 8000d16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	3318      	adds	r3, #24
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	440b      	add	r3, r1
 8000d22:	3304      	adds	r3, #4
 8000d24:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3307      	adds	r3, #7
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	061a      	lsls	r2, r3, #24
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	3306      	adds	r3, #6
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	041b      	lsls	r3, r3, #16
 8000d36:	431a      	orrs	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3305      	adds	r3, #5
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	021b      	lsls	r3, r3, #8
 8000d40:	4313      	orrs	r3, r2
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	3204      	adds	r2, #4
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	4610      	mov	r0, r2
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	6811      	ldr	r1, [r2, #0]
 8000d4e:	ea43 0200 	orr.w	r2, r3, r0
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	011b      	lsls	r3, r3, #4
 8000d56:	440b      	add	r3, r1
 8000d58:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000d5c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	3303      	adds	r3, #3
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	061a      	lsls	r2, r3, #24
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	3302      	adds	r3, #2
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	041b      	lsls	r3, r3, #16
 8000d6e:	431a      	orrs	r2, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3301      	adds	r3, #1
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	021b      	lsls	r3, r3, #8
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	7812      	ldrb	r2, [r2, #0]
 8000d7e:	4610      	mov	r0, r2
 8000d80:	68fa      	ldr	r2, [r7, #12]
 8000d82:	6811      	ldr	r1, [r2, #0]
 8000d84:	ea43 0200 	orr.w	r2, r3, r0
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	440b      	add	r3, r1
 8000d8e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d92:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	3318      	adds	r3, #24
 8000d9c:	011b      	lsls	r3, r3, #4
 8000d9e:	4413      	add	r3, r2
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	6811      	ldr	r1, [r2, #0]
 8000da6:	f043 0201 	orr.w	r2, r3, #1
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	3318      	adds	r3, #24
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	440b      	add	r3, r1
 8000db2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	e00e      	b.n	8000dd6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e006      	b.n	8000dd6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dcc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dd4:	2301      	movs	r3, #1
  }
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	@ 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr

08000de2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000de2:	b480      	push	{r7}
 8000de4:	b085      	sub	sp, #20
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000df4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8000df6:	7afb      	ldrb	r3, [r7, #11]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d002      	beq.n	8000e02 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8000dfc:	7afb      	ldrb	r3, [r7, #11]
 8000dfe:	2b02      	cmp	r3, #2
 8000e00:	d11d      	bne.n	8000e3e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	3301      	adds	r3, #1
 8000e14:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3301      	adds	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d002      	beq.n	8000e3e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
 8000e58:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e60:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e62:	7dfb      	ldrb	r3, [r7, #23]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d003      	beq.n	8000e70 <HAL_CAN_GetRxMessage+0x24>
 8000e68:	7dfb      	ldrb	r3, [r7, #23]
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	f040 8103 	bne.w	8001076 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10e      	bne.n	8000e94 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d116      	bne.n	8000eb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e0f7      	b.n	8001084 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	691b      	ldr	r3, [r3, #16]
 8000e9a:	f003 0303 	and.w	r3, r3, #3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d107      	bne.n	8000eb2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e0e8      	b.n	8001084 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	331b      	adds	r3, #27
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	4413      	add	r3, r2
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0204 	and.w	r2, r3, #4
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d10c      	bne.n	8000eea <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	331b      	adds	r3, #27
 8000ed8:	011b      	lsls	r3, r3, #4
 8000eda:	4413      	add	r3, r2
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	0d5b      	lsrs	r3, r3, #21
 8000ee0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	e00b      	b.n	8000f02 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	331b      	adds	r3, #27
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	4413      	add	r3, r2
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	08db      	lsrs	r3, r3, #3
 8000efa:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	331b      	adds	r3, #27
 8000f0a:	011b      	lsls	r3, r3, #4
 8000f0c:	4413      	add	r3, r2
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0202 	and.w	r2, r3, #2
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	331b      	adds	r3, #27
 8000f20:	011b      	lsls	r3, r3, #4
 8000f22:	4413      	add	r3, r2
 8000f24:	3304      	adds	r3, #4
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0308 	and.w	r3, r3, #8
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2208      	movs	r2, #8
 8000f34:	611a      	str	r2, [r3, #16]
 8000f36:	e00b      	b.n	8000f50 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	331b      	adds	r3, #27
 8000f40:	011b      	lsls	r3, r3, #4
 8000f42:	4413      	add	r3, r2
 8000f44:	3304      	adds	r3, #4
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 020f 	and.w	r2, r3, #15
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	331b      	adds	r3, #27
 8000f58:	011b      	lsls	r3, r3, #4
 8000f5a:	4413      	add	r3, r2
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	b2da      	uxtb	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	331b      	adds	r3, #27
 8000f70:	011b      	lsls	r3, r3, #4
 8000f72:	4413      	add	r3, r2
 8000f74:	3304      	adds	r3, #4
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	0c1b      	lsrs	r3, r3, #16
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	4413      	add	r3, r2
 8000fa0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0a1a      	lsrs	r2, r3, #8
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2d2      	uxtb	r2, r2
 8000fae:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	011b      	lsls	r3, r3, #4
 8000fb8:	4413      	add	r3, r2
 8000fba:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	0c1a      	lsrs	r2, r3, #16
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	b2d2      	uxtb	r2, r2
 8000fc8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	011b      	lsls	r3, r3, #4
 8000fd2:	4413      	add	r3, r2
 8000fd4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0e1a      	lsrs	r2, r3, #24
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	3303      	adds	r3, #3
 8000fe0:	b2d2      	uxtb	r2, r2
 8000fe2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	011b      	lsls	r3, r3, #4
 8000fec:	4413      	add	r3, r2
 8000fee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	4413      	add	r3, r2
 8001006:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	0a1a      	lsrs	r2, r3, #8
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	3305      	adds	r3, #5
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4413      	add	r3, r2
 8001020:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0c1a      	lsrs	r2, r3, #16
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	3306      	adds	r3, #6
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4413      	add	r3, r2
 800103a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	0e1a      	lsrs	r2, r3, #24
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	3307      	adds	r3, #7
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d108      	bne.n	8001062 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0220 	orr.w	r2, r2, #32
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	e007      	b.n	8001072 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0220 	orr.w	r2, r2, #32
 8001070:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e006      	b.n	8001084 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800107a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
  }
}
 8001084:	4618      	mov	r0, r3
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d002      	beq.n	80010ae <HAL_CAN_ActivateNotification+0x1e>
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d109      	bne.n	80010c2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6959      	ldr	r1, [r3, #20]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	430a      	orrs	r2, r1
 80010bc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010be:	2300      	movs	r3, #0
 80010c0:	e006      	b.n	80010d0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
  }
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d07c      	beq.n	800121c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	2b00      	cmp	r3, #0
 800112a:	d023      	beq.n	8001174 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2201      	movs	r2, #1
 8001132:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f983 	bl	800144a <HAL_CAN_TxMailbox0CompleteCallback>
 8001144:	e016      	b.n	8001174 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	2b00      	cmp	r3, #0
 800114e:	d004      	beq.n	800115a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001152:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
 8001158:	e00c      	b.n	8001174 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	f003 0308 	and.w	r3, r3, #8
 8001160:	2b00      	cmp	r3, #0
 8001162:	d004      	beq.n	800116e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
 800116c:	e002      	b.n	8001174 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f989 	bl	8001486 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117a:	2b00      	cmp	r3, #0
 800117c:	d024      	beq.n	80011c8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001186:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f963 	bl	800145e <HAL_CAN_TxMailbox1CompleteCallback>
 8001198:	e016      	b.n	80011c8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d004      	beq.n	80011ae <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ac:	e00c      	b.n	80011c8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d004      	beq.n	80011c2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c0:	e002      	b.n	80011c8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f969 	bl	800149a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d024      	beq.n	800121c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 f943 	bl	8001472 <HAL_CAN_TxMailbox2CompleteCallback>
 80011ec:	e016      	b.n	800121c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d004      	beq.n	8001202 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001200:	e00c      	b.n	800121c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d004      	beq.n	8001216 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001212:	627b      	str	r3, [r7, #36]	@ 0x24
 8001214:	e002      	b.n	800121c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 f949 	bl	80014ae <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800121c:	6a3b      	ldr	r3, [r7, #32]
 800121e:	f003 0308 	and.w	r3, r3, #8
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00c      	beq.n	8001240 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0310 	and.w	r3, r3, #16
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2210      	movs	r2, #16
 800123e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001240:	6a3b      	ldr	r3, [r7, #32]
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	f003 0308 	and.w	r3, r3, #8
 8001250:	2b00      	cmp	r3, #0
 8001252:	d006      	beq.n	8001262 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2208      	movs	r2, #8
 800125a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f930 	bl	80014c2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d009      	beq.n	8001280 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	f003 0303 	and.w	r3, r3, #3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7fe ffa4 	bl	80001c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00c      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d007      	beq.n	80012a4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2210      	movs	r2, #16
 80012a2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	f003 0308 	and.w	r3, r3, #8
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2208      	movs	r2, #8
 80012be:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f912 	bl	80014ea <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d009      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 f8f9 	bl	80014d6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2210      	movs	r2, #16
 80012fe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f8fc 	bl	80014fe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001306:	6a3b      	ldr	r3, [r7, #32]
 8001308:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00b      	beq.n	8001328 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	2b00      	cmp	r3, #0
 8001318:	d006      	beq.n	8001328 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2208      	movs	r2, #8
 8001320:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f8f5 	bl	8001512 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001328:	6a3b      	ldr	r3, [r7, #32]
 800132a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d07b      	beq.n	800142a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d072      	beq.n	8001422 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001342:	2b00      	cmp	r3, #0
 8001344:	d008      	beq.n	8001358 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800134c:	2b00      	cmp	r3, #0
 800134e:	d003      	beq.n	8001358 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800135e:	2b00      	cmp	r3, #0
 8001360:	d008      	beq.n	8001374 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800136c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800136e:	f043 0302 	orr.w	r3, r3, #2
 8001372:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137a:	2b00      	cmp	r3, #0
 800137c:	d008      	beq.n	8001390 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001390:	6a3b      	ldr	r3, [r7, #32]
 8001392:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001396:	2b00      	cmp	r3, #0
 8001398:	d043      	beq.n	8001422 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d03e      	beq.n	8001422 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013aa:	2b60      	cmp	r3, #96	@ 0x60
 80013ac:	d02b      	beq.n	8001406 <HAL_CAN_IRQHandler+0x32a>
 80013ae:	2b60      	cmp	r3, #96	@ 0x60
 80013b0:	d82e      	bhi.n	8001410 <HAL_CAN_IRQHandler+0x334>
 80013b2:	2b50      	cmp	r3, #80	@ 0x50
 80013b4:	d022      	beq.n	80013fc <HAL_CAN_IRQHandler+0x320>
 80013b6:	2b50      	cmp	r3, #80	@ 0x50
 80013b8:	d82a      	bhi.n	8001410 <HAL_CAN_IRQHandler+0x334>
 80013ba:	2b40      	cmp	r3, #64	@ 0x40
 80013bc:	d019      	beq.n	80013f2 <HAL_CAN_IRQHandler+0x316>
 80013be:	2b40      	cmp	r3, #64	@ 0x40
 80013c0:	d826      	bhi.n	8001410 <HAL_CAN_IRQHandler+0x334>
 80013c2:	2b30      	cmp	r3, #48	@ 0x30
 80013c4:	d010      	beq.n	80013e8 <HAL_CAN_IRQHandler+0x30c>
 80013c6:	2b30      	cmp	r3, #48	@ 0x30
 80013c8:	d822      	bhi.n	8001410 <HAL_CAN_IRQHandler+0x334>
 80013ca:	2b10      	cmp	r3, #16
 80013cc:	d002      	beq.n	80013d4 <HAL_CAN_IRQHandler+0x2f8>
 80013ce:	2b20      	cmp	r3, #32
 80013d0:	d005      	beq.n	80013de <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013d2:	e01d      	b.n	8001410 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013dc:	e019      	b.n	8001412 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013e6:	e014      	b.n	8001412 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013f0:	e00f      	b.n	8001412 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013fa:	e00a      	b.n	8001412 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001402:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001404:	e005      	b.n	8001412 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800140e:	e000      	b.n	8001412 <HAL_CAN_IRQHandler+0x336>
            break;
 8001410:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	699a      	ldr	r2, [r3, #24]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001420:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800142a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142c:	2b00      	cmp	r3, #0
 800142e:	d008      	beq.n	8001442 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001436:	431a      	orrs	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f872 	bl	8001526 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001442:	bf00      	nop
 8001444:	3728      	adds	r7, #40	@ 0x28
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014d6:	b480      	push	{r7}
 80014d8:	b083      	sub	sp, #12
 80014da:	af00      	add	r7, sp, #0
 80014dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014ea:	b480      	push	{r7}
 80014ec:	b083      	sub	sp, #12
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr

08001526 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001526:	b480      	push	{r7}
 8001528:	b083      	sub	sp, #12
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800154c:	4b0c      	ldr	r3, [pc, #48]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001558:	4013      	ands	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800156c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156e:	4a04      	ldr	r2, [pc, #16]	@ (8001580 <__NVIC_SetPriorityGrouping+0x44>)
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	60d3      	str	r3, [r2, #12]
}
 8001574:	bf00      	nop
 8001576:	3714      	adds	r7, #20
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001588:	4b04      	ldr	r3, [pc, #16]	@ (800159c <__NVIC_GetPriorityGrouping+0x18>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	0a1b      	lsrs	r3, r3, #8
 800158e:	f003 0307 	and.w	r3, r3, #7
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	db0b      	blt.n	80015ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	f003 021f 	and.w	r2, r3, #31
 80015b8:	4907      	ldr	r1, [pc, #28]	@ (80015d8 <__NVIC_EnableIRQ+0x38>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	095b      	lsrs	r3, r3, #5
 80015c0:	2001      	movs	r0, #1
 80015c2:	fa00 f202 	lsl.w	r2, r0, r2
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000e100 	.word	0xe000e100

080015dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	6039      	str	r1, [r7, #0]
 80015e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	db0a      	blt.n	8001606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	490c      	ldr	r1, [pc, #48]	@ (8001628 <__NVIC_SetPriority+0x4c>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	0112      	lsls	r2, r2, #4
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	440b      	add	r3, r1
 8001600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001604:	e00a      	b.n	800161c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	b2da      	uxtb	r2, r3
 800160a:	4908      	ldr	r1, [pc, #32]	@ (800162c <__NVIC_SetPriority+0x50>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	3b04      	subs	r3, #4
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	b2d2      	uxtb	r2, r2
 8001618:	440b      	add	r3, r1
 800161a:	761a      	strb	r2, [r3, #24]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr
 8001628:	e000e100 	.word	0xe000e100
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001630:	b480      	push	{r7}
 8001632:	b089      	sub	sp, #36	@ 0x24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f1c3 0307 	rsb	r3, r3, #7
 800164a:	2b04      	cmp	r3, #4
 800164c:	bf28      	it	cs
 800164e:	2304      	movcs	r3, #4
 8001650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	3304      	adds	r3, #4
 8001656:	2b06      	cmp	r3, #6
 8001658:	d902      	bls.n	8001660 <NVIC_EncodePriority+0x30>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3b03      	subs	r3, #3
 800165e:	e000      	b.n	8001662 <NVIC_EncodePriority+0x32>
 8001660:	2300      	movs	r3, #0
 8001662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	f04f 32ff 	mov.w	r2, #4294967295
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43da      	mvns	r2, r3
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	401a      	ands	r2, r3
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001678:	f04f 31ff 	mov.w	r1, #4294967295
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	43d9      	mvns	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001688:	4313      	orrs	r3, r2
         );
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a8:	d301      	bcc.n	80016ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016aa:	2301      	movs	r3, #1
 80016ac:	e00f      	b.n	80016ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ae:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <SysTick_Config+0x40>)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b6:	210f      	movs	r1, #15
 80016b8:	f04f 30ff 	mov.w	r0, #4294967295
 80016bc:	f7ff ff8e 	bl	80015dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c0:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <SysTick_Config+0x40>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c6:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <SysTick_Config+0x40>)
 80016c8:	2207      	movs	r2, #7
 80016ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	e000e010 	.word	0xe000e010

080016dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff ff29 	bl	800153c <__NVIC_SetPriorityGrouping>
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b086      	sub	sp, #24
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	4603      	mov	r3, r0
 80016fa:	60b9      	str	r1, [r7, #8]
 80016fc:	607a      	str	r2, [r7, #4]
 80016fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001704:	f7ff ff3e 	bl	8001584 <__NVIC_GetPriorityGrouping>
 8001708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	68b9      	ldr	r1, [r7, #8]
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff ff8e 	bl	8001630 <NVIC_EncodePriority>
 8001714:	4602      	mov	r2, r0
 8001716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171a:	4611      	mov	r1, r2
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff5d 	bl	80015dc <__NVIC_SetPriority>
}
 8001722:	bf00      	nop
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	4603      	mov	r3, r0
 8001732:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff ff31 	bl	80015a0 <__NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ffa2 	bl	8001698 <SysTick_Config>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e14e      	b.n	8001a0e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	2101      	movs	r1, #1
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	fa01 f303 	lsl.w	r3, r1, r3
 800177c:	4013      	ands	r3, r2
 800177e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	f000 8140 	beq.w	8001a08 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b01      	cmp	r3, #1
 8001792:	d005      	beq.n	80017a0 <HAL_GPIO_Init+0x40>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d130      	bne.n	8001802 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d6:	2201      	movs	r2, #1
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4013      	ands	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	f003 0201 	and.w	r2, r3, #1
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b03      	cmp	r3, #3
 800180c:	d017      	beq.n	800183e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2203      	movs	r2, #3
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d123      	bne.n	8001892 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	08da      	lsrs	r2, r3, #3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3208      	adds	r2, #8
 8001852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001856:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	6939      	ldr	r1, [r7, #16]
 800188e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	2203      	movs	r2, #3
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0203 	and.w	r2, r3, #3
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f000 809a 	beq.w	8001a08 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d4:	4b55      	ldr	r3, [pc, #340]	@ (8001a2c <HAL_GPIO_Init+0x2cc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a54      	ldr	r2, [pc, #336]	@ (8001a2c <HAL_GPIO_Init+0x2cc>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b52      	ldr	r3, [pc, #328]	@ (8001a2c <HAL_GPIO_Init+0x2cc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ec:	4a50      	ldr	r2, [pc, #320]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	220f      	movs	r2, #15
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001916:	d013      	beq.n	8001940 <HAL_GPIO_Init+0x1e0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a46      	ldr	r2, [pc, #280]	@ (8001a34 <HAL_GPIO_Init+0x2d4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d00d      	beq.n	800193c <HAL_GPIO_Init+0x1dc>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a45      	ldr	r2, [pc, #276]	@ (8001a38 <HAL_GPIO_Init+0x2d8>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d007      	beq.n	8001938 <HAL_GPIO_Init+0x1d8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a44      	ldr	r2, [pc, #272]	@ (8001a3c <HAL_GPIO_Init+0x2dc>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d101      	bne.n	8001934 <HAL_GPIO_Init+0x1d4>
 8001930:	2303      	movs	r3, #3
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x1e2>
 8001934:	2305      	movs	r3, #5
 8001936:	e004      	b.n	8001942 <HAL_GPIO_Init+0x1e2>
 8001938:	2302      	movs	r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x1e2>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_GPIO_Init+0x1e2>
 8001940:	2300      	movs	r3, #0
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	f002 0203 	and.w	r2, r2, #3
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	4093      	lsls	r3, r2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001952:	4937      	ldr	r1, [pc, #220]	@ (8001a30 <HAL_GPIO_Init+0x2d0>)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001960:	4b37      	ldr	r3, [pc, #220]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001984:	4a2e      	ldr	r2, [pc, #184]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800198a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019ae:	4a24      	ldr	r2, [pc, #144]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b4:	4b22      	ldr	r3, [pc, #136]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019d8:	4a19      	ldr	r2, [pc, #100]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019de:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a02:	4a0f      	ldr	r2, [pc, #60]	@ (8001a40 <HAL_GPIO_Init+0x2e0>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f aea9 	bne.w	8001770 <HAL_GPIO_Init+0x10>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a54:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a5a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	f001 b823 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a6e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 817d 	beq.w	8001d7a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001a80:	4bbc      	ldr	r3, [pc, #752]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a8c:	4bb9      	ldr	r3, [pc, #740]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d15c      	bne.n	8001b52 <HAL_RCC_OscConfig+0x10e>
 8001a98:	4bb6      	ldr	r3, [pc, #728]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001aa0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aa4:	d155      	bne.n	8001b52 <HAL_RCC_OscConfig+0x10e>
 8001aa6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aaa:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001aba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	fab3 f383 	clz	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	095b      	lsrs	r3, r3, #5
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d102      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x94>
 8001ad2:	4ba8      	ldr	r3, [pc, #672]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	e015      	b.n	8001b04 <HAL_RCC_OscConfig+0xc0>
 8001ad8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001adc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001aec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001af0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001af4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001b00:	4b9c      	ldr	r3, [pc, #624]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b04:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001b08:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001b0c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001b10:	fa92 f2a2 	rbit	r2, r2
 8001b14:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001b18:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001b1c:	fab2 f282 	clz	r2, r2
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	f002 021f 	and.w	r2, r2, #31
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b32:	4013      	ands	r3, r2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 811f 	beq.w	8001d78 <HAL_RCC_OscConfig+0x334>
 8001b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f040 8116 	bne.w	8001d78 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f000 bfaf 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x12e>
 8001b64:	4b83      	ldr	r3, [pc, #524]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a82      	ldr	r2, [pc, #520]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e036      	b.n	8001be0 <HAL_RCC_OscConfig+0x19c>
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x158>
 8001b82:	4b7c      	ldr	r3, [pc, #496]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a7b      	ldr	r2, [pc, #492]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b79      	ldr	r3, [pc, #484]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a78      	ldr	r2, [pc, #480]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001b94:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e021      	b.n	8001be0 <HAL_RCC_OscConfig+0x19c>
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bac:	d10c      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x184>
 8001bae:	4b71      	ldr	r3, [pc, #452]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a70      	ldr	r2, [pc, #448]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	4b6e      	ldr	r3, [pc, #440]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6d      	ldr	r2, [pc, #436]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	e00b      	b.n	8001be0 <HAL_RCC_OscConfig+0x19c>
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a69      	ldr	r2, [pc, #420]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b67      	ldr	r3, [pc, #412]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a66      	ldr	r2, [pc, #408]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bde:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001be0:	4b64      	ldr	r3, [pc, #400]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be4:	f023 020f 	bic.w	r2, r3, #15
 8001be8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	495f      	ldr	r1, [pc, #380]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d059      	beq.n	8001cbe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0a:	f7fe fe05 	bl	8000818 <HAL_GetTick>
 8001c0e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	e00a      	b.n	8001c2a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c14:	f7fe fe00 	bl	8000818 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b64      	cmp	r3, #100	@ 0x64
 8001c22:	d902      	bls.n	8001c2a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	f000 bf43 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001c2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c2e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001c3e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	f043 0301 	orr.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d102      	bne.n	8001c5c <HAL_RCC_OscConfig+0x218>
 8001c56:	4b47      	ldr	r3, [pc, #284]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	e015      	b.n	8001c88 <HAL_RCC_OscConfig+0x244>
 8001c5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c60:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c64:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001c68:	fa93 f3a3 	rbit	r3, r3
 8001c6c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001c70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c74:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001c78:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001c84:	4b3b      	ldr	r3, [pc, #236]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001c8c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001c90:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001c94:	fa92 f2a2 	rbit	r2, r2
 8001c98:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001c9c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ca0:	fab2 f282 	clz	r2, r2
 8001ca4:	b2d2      	uxtb	r2, r2
 8001ca6:	f042 0220 	orr.w	r2, r2, #32
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	f002 021f 	and.w	r2, r2, #31
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ab      	beq.n	8001c14 <HAL_RCC_OscConfig+0x1d0>
 8001cbc:	e05d      	b.n	8001d7a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7fe fdab 	bl	8000818 <HAL_GetTick>
 8001cc2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7fe fda6 	bl	8000818 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b64      	cmp	r3, #100	@ 0x64
 8001cd6:	d902      	bls.n	8001cde <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	f000 bee9 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001cde:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ce2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001cf2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	fab3 f383 	clz	r3, r3
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d102      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2cc>
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x2f8>
 8001d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d14:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001d1c:	fa93 f3a3 	rbit	r3, r3
 8001d20:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001d24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d28:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001d2c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001d30:	fa93 f3a3 	rbit	r3, r3
 8001d34:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001d38:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <HAL_RCC_OscConfig+0x330>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d3c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d40:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001d44:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001d48:	fa92 f2a2 	rbit	r2, r2
 8001d4c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001d50:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001d54:	fab2 f282 	clz	r2, r2
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	f042 0220 	orr.w	r2, r2, #32
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	f002 021f 	and.w	r2, r2, #31
 8001d64:	2101      	movs	r1, #1
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ab      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x284>
 8001d70:	e003      	b.n	8001d7a <HAL_RCC_OscConfig+0x336>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 817d 	beq.w	800208a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 030c 	and.w	r3, r3, #12
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d9c:	4ba3      	ldr	r3, [pc, #652]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 030c 	and.w	r3, r3, #12
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d172      	bne.n	8001e8e <HAL_RCC_OscConfig+0x44a>
 8001da8:	4ba0      	ldr	r3, [pc, #640]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d16c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x44a>
 8001db4:	2302      	movs	r3, #2
 8001db6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001dc6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	095b      	lsrs	r3, r3, #5
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d102      	bne.n	8001de4 <HAL_RCC_OscConfig+0x3a0>
 8001dde:	4b93      	ldr	r3, [pc, #588]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	e013      	b.n	8001e0c <HAL_RCC_OscConfig+0x3c8>
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dea:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001df6:	2302      	movs	r3, #2
 8001df8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001dfc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001e08:	4b88      	ldr	r3, [pc, #544]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001e12:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001e16:	fa92 f2a2 	rbit	r2, r2
 8001e1a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8001e1e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001e22:	fab2 f282 	clz	r2, r2
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	f042 0220 	orr.w	r2, r2, #32
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	f002 021f 	and.w	r2, r2, #31
 8001e32:	2101      	movs	r1, #1
 8001e34:	fa01 f202 	lsl.w	r2, r1, r2
 8001e38:	4013      	ands	r3, r2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00a      	beq.n	8001e54 <HAL_RCC_OscConfig+0x410>
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d002      	beq.n	8001e54 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	f000 be2e 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e54:	4b75      	ldr	r3, [pc, #468]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	21f8      	movs	r1, #248	@ 0xf8
 8001e6a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001e72:	fa91 f1a1 	rbit	r1, r1
 8001e76:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001e7a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001e7e:	fab1 f181 	clz	r1, r1
 8001e82:	b2c9      	uxtb	r1, r1
 8001e84:	408b      	lsls	r3, r1
 8001e86:	4969      	ldr	r1, [pc, #420]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8c:	e0fd      	b.n	800208a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8088 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x56c>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001eb2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb6:	fab3 f383 	clz	r3, r3
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001ec0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2301      	movs	r3, #1
 8001eca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ecc:	f7fe fca4 	bl	8000818 <HAL_GetTick>
 8001ed0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e00a      	b.n	8001eec <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7fe fc9f 	bl	8000818 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d902      	bls.n	8001eec <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	f000 bde2 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001eec:	2302      	movs	r3, #2
 8001eee:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8001efe:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x4d8>
 8001f16:	4b45      	ldr	r3, [pc, #276]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e013      	b.n	8001f44 <HAL_RCC_OscConfig+0x500>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001f2e:	2302      	movs	r3, #2
 8001f30:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001f34:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8001f38:	fa93 f3a3 	rbit	r3, r3
 8001f3c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001f40:	4b3a      	ldr	r3, [pc, #232]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	2202      	movs	r2, #2
 8001f46:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8001f4a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001f4e:	fa92 f2a2 	rbit	r2, r2
 8001f52:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001f56:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8001f5a:	fab2 f282 	clz	r2, r2
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	f042 0220 	orr.w	r2, r2, #32
 8001f64:	b2d2      	uxtb	r2, r2
 8001f66:	f002 021f 	and.w	r2, r2, #31
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f70:	4013      	ands	r3, r2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0af      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b2d      	ldr	r3, [pc, #180]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	21f8      	movs	r1, #248	@ 0xf8
 8001f8c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001f94:	fa91 f1a1 	rbit	r1, r1
 8001f98:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001f9c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001fa0:	fab1 f181 	clz	r1, r1
 8001fa4:	b2c9      	uxtb	r1, r1
 8001fa6:	408b      	lsls	r3, r1
 8001fa8:	4920      	ldr	r1, [pc, #128]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]
 8001fae:	e06c      	b.n	800208a <HAL_RCC_OscConfig+0x646>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001fc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	fab3 f383 	clz	r3, r3
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001fd0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	2300      	movs	r3, #0
 8001fda:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7fe fc1c 	bl	8000818 <HAL_GetTick>
 8001fe0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe4:	e00a      	b.n	8001ffc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe6:	f7fe fc17 	bl	8000818 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d902      	bls.n	8001ffc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	f000 bd5a 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800200e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d104      	bne.n	8002030 <HAL_RCC_OscConfig+0x5ec>
 8002026:	4b01      	ldr	r3, [pc, #4]	@ (800202c <HAL_RCC_OscConfig+0x5e8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e015      	b.n	8002058 <HAL_RCC_OscConfig+0x614>
 800202c:	40021000 	.word	0x40021000
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800203a:	fa93 f3a3 	rbit	r3, r3
 800203e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002042:	2302      	movs	r3, #2
 8002044:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002048:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002054:	4bc8      	ldr	r3, [pc, #800]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002058:	2202      	movs	r2, #2
 800205a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800205e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002062:	fa92 f2a2 	rbit	r2, r2
 8002066:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800206a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800206e:	fab2 f282 	clz	r2, r2
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	f042 0220 	orr.w	r2, r2, #32
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f002 021f 	and.w	r2, r2, #31
 800207e:	2101      	movs	r1, #1
 8002080:	fa01 f202 	lsl.w	r2, r1, r2
 8002084:	4013      	ands	r3, r2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ad      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0308 	and.w	r3, r3, #8
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 8110 	beq.w	80022c0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d079      	beq.n	80021a4 <HAL_RCC_OscConfig+0x760>
 80020b0:	2301      	movs	r3, #1
 80020b2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80020ba:	fa93 f3a3 	rbit	r3, r3
 80020be:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80020c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	4bab      	ldr	r3, [pc, #684]	@ (800237c <HAL_RCC_OscConfig+0x938>)
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	461a      	mov	r2, r3
 80020d6:	2301      	movs	r3, #1
 80020d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7fe fb9d 	bl	8000818 <HAL_GetTick>
 80020de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7fe fb98 	bl	8000818 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d902      	bls.n	80020fa <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	f000 bcdb 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 80020fa:	2302      	movs	r3, #2
 80020fc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002114:	2202      	movs	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	fa93 f2a3 	rbit	r2, r3
 8002126:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002134:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002138:	2202      	movs	r2, #2
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002140:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	fa93 f2a3 	rbit	r2, r3
 800214a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002152:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002154:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 8002156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002158:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002160:	2102      	movs	r1, #2
 8002162:	6019      	str	r1, [r3, #0]
 8002164:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002168:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	fa93 f1a3 	rbit	r1, r3
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800217a:	6019      	str	r1, [r3, #0]
  return result;
 800217c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002180:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fab3 f383 	clz	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	2101      	movs	r1, #1
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0a0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6a0>
 80021a2:	e08d      	b.n	80022c0 <HAL_RCC_OscConfig+0x87c>
 80021a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021ac:	2201      	movs	r2, #1
 80021ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	fa93 f2a3 	rbit	r2, r3
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021c6:	601a      	str	r2, [r3, #0]
  return result;
 80021c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80021d0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4b68      	ldr	r3, [pc, #416]	@ (800237c <HAL_RCC_OscConfig+0x938>)
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	461a      	mov	r2, r3
 80021e2:	2300      	movs	r3, #0
 80021e4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe fb17 	bl	8000818 <HAL_GetTick>
 80021ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ee:	e00a      	b.n	8002206 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f0:	f7fe fb12 	bl	8000818 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d902      	bls.n	8002206 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	f000 bc55 	b.w	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002216:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	fa93 f2a3 	rbit	r2, r3
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800222e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002232:	2202      	movs	r2, #2
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	fa93 f2a3 	rbit	r2, r3
 8002244:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002248:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002252:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002256:	2202      	movs	r2, #2
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800225e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	fa93 f2a3 	rbit	r2, r3
 8002268:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800226c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002270:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002272:	4b41      	ldr	r3, [pc, #260]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 8002274:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800227e:	2102      	movs	r1, #2
 8002280:	6019      	str	r1, [r3, #0]
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f1a3 	rbit	r1, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002298:	6019      	str	r1, [r3, #0]
  return result;
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f003 031f 	and.w	r3, r3, #31
 80022b4:	2101      	movs	r1, #1
 80022b6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ba:	4013      	ands	r3, r2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d197      	bne.n	80021f0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 81a1 	beq.w	8002618 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022dc:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d116      	bne.n	8002316 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b23      	ldr	r3, [pc, #140]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	4a22      	ldr	r2, [pc, #136]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 80022ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f2:	61d3      	str	r3, [r2, #28]
 80022f4:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80022fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002300:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800230a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800230e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002310:	2301      	movs	r3, #1
 8002312:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b1a      	ldr	r3, [pc, #104]	@ (8002380 <HAL_RCC_OscConfig+0x93c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d11a      	bne.n	8002358 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b17      	ldr	r3, [pc, #92]	@ (8002380 <HAL_RCC_OscConfig+0x93c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a16      	ldr	r2, [pc, #88]	@ (8002380 <HAL_RCC_OscConfig+0x93c>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800232c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7fe fa73 	bl	8000818 <HAL_GetTick>
 8002332:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002336:	e009      	b.n	800234c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002338:	f7fe fa6e 	bl	8000818 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	@ 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e3b1      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <HAL_RCC_OscConfig+0x93c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0ef      	beq.n	8002338 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10d      	bne.n	8002384 <HAL_RCC_OscConfig+0x940>
 8002368:	4b03      	ldr	r3, [pc, #12]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	4a02      	ldr	r2, [pc, #8]	@ (8002378 <HAL_RCC_OscConfig+0x934>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6213      	str	r3, [r2, #32]
 8002374:	e03c      	b.n	80023f0 <HAL_RCC_OscConfig+0x9ac>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	10908120 	.word	0x10908120
 8002380:	40007000 	.word	0x40007000
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10c      	bne.n	80023ae <HAL_RCC_OscConfig+0x96a>
 8002394:	4bc1      	ldr	r3, [pc, #772]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	4ac0      	ldr	r2, [pc, #768]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 800239a:	f023 0301 	bic.w	r3, r3, #1
 800239e:	6213      	str	r3, [r2, #32]
 80023a0:	4bbe      	ldr	r3, [pc, #760]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	4abd      	ldr	r2, [pc, #756]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023a6:	f023 0304 	bic.w	r3, r3, #4
 80023aa:	6213      	str	r3, [r2, #32]
 80023ac:	e020      	b.n	80023f0 <HAL_RCC_OscConfig+0x9ac>
 80023ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b05      	cmp	r3, #5
 80023bc:	d10c      	bne.n	80023d8 <HAL_RCC_OscConfig+0x994>
 80023be:	4bb7      	ldr	r3, [pc, #732]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4ab6      	ldr	r2, [pc, #728]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023c4:	f043 0304 	orr.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	4bb4      	ldr	r3, [pc, #720]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	4ab3      	ldr	r2, [pc, #716]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6213      	str	r3, [r2, #32]
 80023d6:	e00b      	b.n	80023f0 <HAL_RCC_OscConfig+0x9ac>
 80023d8:	4bb0      	ldr	r3, [pc, #704]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	4aaf      	ldr	r2, [pc, #700]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6213      	str	r3, [r2, #32]
 80023e4:	4bad      	ldr	r3, [pc, #692]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4aac      	ldr	r2, [pc, #688]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80023ea:	f023 0304 	bic.w	r3, r3, #4
 80023ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8081 	beq.w	8002504 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002402:	f7fe fa09 	bl	8000818 <HAL_GetTick>
 8002406:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fa04 	bl	8000818 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241c:	4293      	cmp	r3, r2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e345      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002428:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800242c:	2202      	movs	r2, #2
 800242e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002434:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	fa93 f2a3 	rbit	r2, r3
 800243e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002442:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800244c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002450:	2202      	movs	r2, #2
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002458:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	fa93 f2a3 	rbit	r2, r3
 8002462:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002466:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800246a:	601a      	str	r2, [r3, #0]
  return result;
 800246c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002470:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002474:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002476:	fab3 f383 	clz	r3, r3
 800247a:	b2db      	uxtb	r3, r3
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	b2db      	uxtb	r3, r3
 8002480:	f043 0302 	orr.w	r3, r3, #2
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d102      	bne.n	8002490 <HAL_RCC_OscConfig+0xa4c>
 800248a:	4b84      	ldr	r3, [pc, #528]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	e013      	b.n	80024b8 <HAL_RCC_OscConfig+0xa74>
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002498:	2202      	movs	r2, #2
 800249a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	fa93 f2a3 	rbit	r2, r3
 80024aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ae:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	4b79      	ldr	r3, [pc, #484]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024bc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024c0:	2102      	movs	r1, #2
 80024c2:	6011      	str	r1, [r2, #0]
 80024c4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024c8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	fa92 f1a2 	rbit	r1, r2
 80024d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024da:	6011      	str	r1, [r2, #0]
  return result;
 80024dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024e0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	fab2 f282 	clz	r2, r2
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	f002 021f 	and.w	r2, r2, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f202 	lsl.w	r2, r1, r2
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d084      	beq.n	800240c <HAL_RCC_OscConfig+0x9c8>
 8002502:	e07f      	b.n	8002604 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002504:	f7fe f988 	bl	8000818 <HAL_GetTick>
 8002508:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250c:	e00b      	b.n	8002526 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250e:	f7fe f983 	bl	8000818 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e2c4      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002526:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800252a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800252e:	2202      	movs	r2, #2
 8002530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002536:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002544:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800254e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002552:	2202      	movs	r2, #2
 8002554:	601a      	str	r2, [r3, #0]
 8002556:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800255a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002568:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800256c:	601a      	str	r2, [r3, #0]
  return result;
 800256e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002572:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002576:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002578:	fab3 f383 	clz	r3, r3
 800257c:	b2db      	uxtb	r3, r3
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f043 0302 	orr.w	r3, r3, #2
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d102      	bne.n	8002592 <HAL_RCC_OscConfig+0xb4e>
 800258c:	4b43      	ldr	r3, [pc, #268]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	e013      	b.n	80025ba <HAL_RCC_OscConfig+0xb76>
 8002592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002596:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800259a:	2202      	movs	r2, #2
 800259c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	fa93 f2a3 	rbit	r2, r3
 80025ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025b0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	4b39      	ldr	r3, [pc, #228]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025be:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025c2:	2102      	movs	r1, #2
 80025c4:	6011      	str	r1, [r2, #0]
 80025c6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025ca:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	fa92 f1a2 	rbit	r1, r2
 80025d4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025d8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025dc:	6011      	str	r1, [r2, #0]
  return result;
 80025de:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80025e2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	fab2 f282 	clz	r2, r2
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	f002 021f 	and.w	r2, r2, #31
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f202 	lsl.w	r2, r1, r2
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d184      	bne.n	800250e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002604:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002608:	2b01      	cmp	r3, #1
 800260a:	d105      	bne.n	8002618 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800260c:	4b23      	ldr	r3, [pc, #140]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	4a22      	ldr	r2, [pc, #136]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 8002612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002616:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002618:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800261c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8242 	beq.w	8002aae <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800262a:	4b1c      	ldr	r3, [pc, #112]	@ (800269c <HAL_RCC_OscConfig+0xc58>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	2b08      	cmp	r3, #8
 8002634:	f000 8213 	beq.w	8002a5e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	2b02      	cmp	r3, #2
 8002646:	f040 8162 	bne.w	800290e <HAL_RCC_OscConfig+0xeca>
 800264a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800264e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002652:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002656:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800265c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	fa93 f2a3 	rbit	r2, r3
 8002666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800266a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800266e:	601a      	str	r2, [r3, #0]
  return result;
 8002670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002674:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002678:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267a:	fab3 f383 	clz	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002684:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	461a      	mov	r2, r3
 800268c:	2300      	movs	r3, #0
 800268e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7fe f8c2 	bl	8000818 <HAL_GetTick>
 8002694:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002698:	e00c      	b.n	80026b4 <HAL_RCC_OscConfig+0xc70>
 800269a:	bf00      	nop
 800269c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026a0:	f7fe f8ba 	bl	8000818 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e1fd      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026c6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	fa93 f2a3 	rbit	r2, r3
 80026d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026d4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026d8:	601a      	str	r2, [r3, #0]
  return result;
 80026da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026de:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80026e2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_RCC_OscConfig+0xcba>
 80026f8:	4bb0      	ldr	r3, [pc, #704]	@ (80029bc <HAL_RCC_OscConfig+0xf78>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	e027      	b.n	800274e <HAL_RCC_OscConfig+0xd0a>
 80026fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002702:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002706:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800270a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002710:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	fa93 f2a3 	rbit	r2, r3
 800271a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800271e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002728:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800272c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002736:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fa93 f2a3 	rbit	r2, r3
 8002740:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002744:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	4b9c      	ldr	r3, [pc, #624]	@ (80029bc <HAL_RCC_OscConfig+0xf78>)
 800274c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002752:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002756:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800275a:	6011      	str	r1, [r2, #0]
 800275c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002760:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	fa92 f1a2 	rbit	r1, r2
 800276a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800276e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002772:	6011      	str	r1, [r2, #0]
  return result;
 8002774:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002778:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	f042 0220 	orr.w	r2, r2, #32
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	f002 021f 	and.w	r2, r2, #31
 800278e:	2101      	movs	r1, #1
 8002790:	fa01 f202 	lsl.w	r2, r1, r2
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d182      	bne.n	80026a0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800279a:	4b88      	ldr	r3, [pc, #544]	@ (80029bc <HAL_RCC_OscConfig+0xf78>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80027ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6a1b      	ldr	r3, [r3, #32]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	497f      	ldr	r1, [pc, #508]	@ (80029bc <HAL_RCC_OscConfig+0xf78>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	604b      	str	r3, [r1, #4]
 80027c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027c6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027ca:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80027ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027d4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	fa93 f2a3 	rbit	r2, r3
 80027de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027e2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027e6:	601a      	str	r2, [r3, #0]
  return result;
 80027e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ec:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80027f0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f2:	fab3 f383 	clz	r3, r3
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80027fc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	461a      	mov	r2, r3
 8002804:	2301      	movs	r3, #1
 8002806:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002808:	f7fe f806 	bl	8000818 <HAL_GetTick>
 800280c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002810:	e009      	b.n	8002826 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe f801 	bl	8000818 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e144      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800282e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002832:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002838:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	fa93 f2a3 	rbit	r2, r3
 8002842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002846:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800284a:	601a      	str	r2, [r3, #0]
  return result;
 800284c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002850:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002854:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	095b      	lsrs	r3, r3, #5
 800285e:	b2db      	uxtb	r3, r3
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b01      	cmp	r3, #1
 8002868:	d102      	bne.n	8002870 <HAL_RCC_OscConfig+0xe2c>
 800286a:	4b54      	ldr	r3, [pc, #336]	@ (80029bc <HAL_RCC_OscConfig+0xf78>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	e027      	b.n	80028c0 <HAL_RCC_OscConfig+0xe7c>
 8002870:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002874:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002878:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800287c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002882:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	fa93 f2a3 	rbit	r2, r3
 800288c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002890:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800289a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800289e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	4b3f      	ldr	r3, [pc, #252]	@ (80029bc <HAL_RCC_OscConfig+0xf78>)
 80028be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028c4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028c8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80028cc:	6011      	str	r1, [r2, #0]
 80028ce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028d2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	fa92 f1a2 	rbit	r1, r2
 80028dc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028e0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028e4:	6011      	str	r1, [r2, #0]
  return result;
 80028e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80028ea:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b2d2      	uxtb	r2, r2
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	f002 021f 	and.w	r2, r2, #31
 8002900:	2101      	movs	r1, #1
 8002902:	fa01 f202 	lsl.w	r2, r1, r2
 8002906:	4013      	ands	r3, r2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d082      	beq.n	8002812 <HAL_RCC_OscConfig+0xdce>
 800290c:	e0cf      	b.n	8002aae <HAL_RCC_OscConfig+0x106a>
 800290e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002912:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002916:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800291a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002920:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	fa93 f2a3 	rbit	r2, r3
 800292a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800292e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002932:	601a      	str	r2, [r3, #0]
  return result;
 8002934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002938:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800293c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	b2db      	uxtb	r3, r3
 8002944:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002948:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	461a      	mov	r2, r3
 8002950:	2300      	movs	r3, #0
 8002952:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002954:	f7fd ff60 	bl	8000818 <HAL_GetTick>
 8002958:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800295c:	e009      	b.n	8002972 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295e:	f7fd ff5b 	bl	8000818 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e09e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
 8002972:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002976:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800297a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002980:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002984:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	fa93 f2a3 	rbit	r2, r3
 800298e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002992:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002996:	601a      	str	r2, [r3, #0]
  return result;
 8002998:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800299c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80029a0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	fab3 f383 	clz	r3, r3
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	095b      	lsrs	r3, r3, #5
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d104      	bne.n	80029c0 <HAL_RCC_OscConfig+0xf7c>
 80029b6:	4b01      	ldr	r3, [pc, #4]	@ (80029bc <HAL_RCC_OscConfig+0xf78>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e029      	b.n	8002a10 <HAL_RCC_OscConfig+0xfcc>
 80029bc:	40021000 	.word	0x40021000
 80029c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029c4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029d2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fa93 f2a3 	rbit	r2, r3
 80029dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029e0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ea:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029ee:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029f8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	fa93 f2a3 	rbit	r2, r3
 8002a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a06:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8002abc <HAL_RCC_OscConfig+0x1078>)
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a14:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a18:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002a1c:	6011      	str	r1, [r2, #0]
 8002a1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a22:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	fa92 f1a2 	rbit	r1, r2
 8002a2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a30:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a34:	6011      	str	r1, [r2, #0]
  return result;
 8002a36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002a3a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002a3e:	6812      	ldr	r2, [r2, #0]
 8002a40:	fab2 f282 	clz	r2, r2
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	f042 0220 	orr.w	r2, r2, #32
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d180      	bne.n	800295e <HAL_RCC_OscConfig+0xf1a>
 8002a5c:	e027      	b.n	8002aae <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e01e      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a72:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <HAL_RCC_OscConfig+0x1078>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a7a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a7e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d10b      	bne.n	8002aaa <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a92:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002a96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d001      	beq.n	8002aae <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b09e      	sub	sp, #120	@ 0x78
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e162      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad8:	4b90      	ldr	r3, [pc, #576]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0307 	and.w	r3, r3, #7
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d910      	bls.n	8002b08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 0207 	bic.w	r2, r3, #7
 8002aee:	498b      	ldr	r1, [pc, #556]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af6:	4b89      	ldr	r3, [pc, #548]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d001      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e14a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d008      	beq.n	8002b26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b14:	4b82      	ldr	r3, [pc, #520]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	497f      	ldr	r1, [pc, #508]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80dc 	beq.w	8002cec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d13c      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xf6>
 8002b3c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b40:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4c:	fab3 f383 	clz	r3, r3
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	095b      	lsrs	r3, r3, #5
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xa6>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	e00f      	b.n	8002b86 <HAL_RCC_ClockConfig+0xc6>
 8002b66:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b6e:	fa93 f3a3 	rbit	r3, r3
 8002b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b74:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b78:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b82:	4b67      	ldr	r3, [pc, #412]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b86:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002b8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002b8e:	fa92 f2a2 	rbit	r2, r2
 8002b92:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002b94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002b96:	fab2 f282 	clz	r2, r2
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	f042 0220 	orr.w	r2, r2, #32
 8002ba0:	b2d2      	uxtb	r2, r2
 8002ba2:	f002 021f 	and.w	r2, r2, #31
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d17b      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e0f3      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d13c      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x178>
 8002bbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bc2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bc6:	fa93 f3a3 	rbit	r3, r3
 8002bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002bcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	095b      	lsrs	r3, r3, #5
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	f043 0301 	orr.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d102      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x128>
 8002be2:	4b4f      	ldr	r3, [pc, #316]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	e00f      	b.n	8002c08 <HAL_RCC_ClockConfig+0x148>
 8002be8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bec:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bf6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bfc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bfe:	fa93 f3a3 	rbit	r3, r3
 8002c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c04:	4b46      	ldr	r3, [pc, #280]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c0c:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002c0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002c10:	fa92 f2a2 	rbit	r2, r2
 8002c14:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002c16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c18:	fab2 f282 	clz	r2, r2
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	b2d2      	uxtb	r2, r2
 8002c24:	f002 021f 	and.w	r2, r2, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d13a      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e0b2      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002c38:	2302      	movs	r3, #2
 8002c3a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	095b      	lsrs	r3, r3, #5
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x1a0>
 8002c5a:	4b31      	ldr	r3, [pc, #196]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	e00d      	b.n	8002c7c <HAL_RCC_ClockConfig+0x1bc>
 8002c60:	2302      	movs	r3, #2
 8002c62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c66:	fa93 f3a3 	rbit	r3, r3
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4b29      	ldr	r3, [pc, #164]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	61ba      	str	r2, [r7, #24]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	fa92 f2a2 	rbit	r2, r2
 8002c86:	617a      	str	r2, [r7, #20]
  return result;
 8002c88:	697a      	ldr	r2, [r7, #20]
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f042 0220 	orr.w	r2, r2, #32
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	f002 021f 	and.w	r2, r2, #31
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e079      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	491a      	ldr	r1, [pc, #104]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fd fdac 	bl	8000818 <HAL_GetTick>
 8002cc0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fd fda8 	bl	8000818 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e061      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b11      	ldr	r3, [pc, #68]	@ (8002d20 <HAL_RCC_ClockConfig+0x260>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b0b      	ldr	r3, [pc, #44]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d214      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b08      	ldr	r3, [pc, #32]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f023 0207 	bic.w	r2, r3, #7
 8002d02:	4906      	ldr	r1, [pc, #24]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <HAL_RCC_ClockConfig+0x25c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d005      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e040      	b.n	8002d9e <HAL_RCC_ClockConfig+0x2de>
 8002d1c:	40022000 	.word	0x40022000
 8002d20:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d008      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d30:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	491a      	ldr	r1, [pc, #104]	@ (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d009      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4e:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4912      	ldr	r1, [pc, #72]	@ (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d62:	f000 f829 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d66:	4601      	mov	r1, r0
 8002d68:	4b0f      	ldr	r3, [pc, #60]	@ (8002da8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d70:	22f0      	movs	r2, #240	@ 0xf0
 8002d72:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	40d3      	lsrs	r3, r2
 8002d86:	4a09      	ldr	r2, [pc, #36]	@ (8002dac <HAL_RCC_ClockConfig+0x2ec>)
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d8e:	4a08      	ldr	r2, [pc, #32]	@ (8002db0 <HAL_RCC_ClockConfig+0x2f0>)
 8002d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <HAL_RCC_ClockConfig+0x2f4>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fcfa 	bl	8000790 <HAL_InitTick>
  
  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3778      	adds	r7, #120	@ 0x78
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40021000 	.word	0x40021000
 8002dac:	080036b0 	.word	0x080036b0
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b087      	sub	sp, #28
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d002      	beq.n	8002de8 <HAL_RCC_GetSysClockFreq+0x30>
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d003      	beq.n	8002dee <HAL_RCC_GetSysClockFreq+0x36>
 8002de6:	e026      	b.n	8002e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002de8:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002dea:	613b      	str	r3, [r7, #16]
      break;
 8002dec:	e026      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0c9b      	lsrs	r3, r3, #18
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a17      	ldr	r2, [pc, #92]	@ (8002e54 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002dfc:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <HAL_RCC_GetSysClockFreq+0x94>)
 8002dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4a14      	ldr	r2, [pc, #80]	@ (8002e58 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e14:	4a0e      	ldr	r2, [pc, #56]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	e004      	b.n	8002e30 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a0c      	ldr	r2, [pc, #48]	@ (8002e5c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
      break;
 8002e34:	e002      	b.n	8002e3c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e38:	613b      	str	r3, [r7, #16]
      break;
 8002e3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3c:	693b      	ldr	r3, [r7, #16]
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	371c      	adds	r7, #28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	007a1200 	.word	0x007a1200
 8002e54:	080036c8 	.word	0x080036c8
 8002e58:	080036d8 	.word	0x080036d8
 8002e5c:	003d0900 	.word	0x003d0900

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	@ (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002e7e:	f7ff ffef 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002e82:	4601      	mov	r1, r0
 8002e84:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e8c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	fa92 f2a2 	rbit	r2, r2
 8002e98:	603a      	str	r2, [r7, #0]
  return result;
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	fab2 f282 	clz	r2, r2
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	40d3      	lsrs	r3, r2
 8002ea4:	4a04      	ldr	r2, [pc, #16]	@ (8002eb8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002ea6:	5cd3      	ldrb	r3, [r2, r3]
 8002ea8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	080036c0 	.word	0x080036c0

08002ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ec2:	f7ff ffcd 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8002ec6:	4601      	mov	r1, r0
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002ed0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002ed4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	fa92 f2a2 	rbit	r2, r2
 8002edc:	603a      	str	r2, [r7, #0]
  return result;
 8002ede:	683a      	ldr	r2, [r7, #0]
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	40d3      	lsrs	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <HAL_RCC_GetPCLK2Freq+0x40>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	080036c0 	.word	0x080036c0

08002f00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e040      	b.n	8002f94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd fb64 	bl	80005f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0201 	bic.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d002      	beq.n	8002f4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f95e 	bl	8003208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 f825 	bl	8002f9c <UART_SetConfig>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e01b      	b.n	8002f94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0201 	orr.w	r2, r2, #1
 8002f8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f9dd 	bl	800334c <UART_CheckIdleState>
 8002f92:	4603      	mov	r3, r0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4b8a      	ldr	r3, [pc, #552]	@ (80031f0 <UART_SetConfig+0x254>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6812      	ldr	r2, [r2, #0]
 8002fce:	6979      	ldr	r1, [r7, #20]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	430a      	orrs	r2, r1
 800300c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a78      	ldr	r2, [pc, #480]	@ (80031f4 <UART_SetConfig+0x258>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d120      	bne.n	800305a <UART_SetConfig+0xbe>
 8003018:	4b77      	ldr	r3, [pc, #476]	@ (80031f8 <UART_SetConfig+0x25c>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	2b03      	cmp	r3, #3
 8003022:	d817      	bhi.n	8003054 <UART_SetConfig+0xb8>
 8003024:	a201      	add	r2, pc, #4	@ (adr r2, 800302c <UART_SetConfig+0x90>)
 8003026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302a:	bf00      	nop
 800302c:	0800303d 	.word	0x0800303d
 8003030:	08003049 	.word	0x08003049
 8003034:	0800304f 	.word	0x0800304f
 8003038:	08003043 	.word	0x08003043
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
 8003040:	e01d      	b.n	800307e <UART_SetConfig+0xe2>
 8003042:	2302      	movs	r3, #2
 8003044:	77fb      	strb	r3, [r7, #31]
 8003046:	e01a      	b.n	800307e <UART_SetConfig+0xe2>
 8003048:	2304      	movs	r3, #4
 800304a:	77fb      	strb	r3, [r7, #31]
 800304c:	e017      	b.n	800307e <UART_SetConfig+0xe2>
 800304e:	2308      	movs	r3, #8
 8003050:	77fb      	strb	r3, [r7, #31]
 8003052:	e014      	b.n	800307e <UART_SetConfig+0xe2>
 8003054:	2310      	movs	r3, #16
 8003056:	77fb      	strb	r3, [r7, #31]
 8003058:	e011      	b.n	800307e <UART_SetConfig+0xe2>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a67      	ldr	r2, [pc, #412]	@ (80031fc <UART_SetConfig+0x260>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d102      	bne.n	800306a <UART_SetConfig+0xce>
 8003064:	2300      	movs	r3, #0
 8003066:	77fb      	strb	r3, [r7, #31]
 8003068:	e009      	b.n	800307e <UART_SetConfig+0xe2>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a64      	ldr	r2, [pc, #400]	@ (8003200 <UART_SetConfig+0x264>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d102      	bne.n	800307a <UART_SetConfig+0xde>
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e001      	b.n	800307e <UART_SetConfig+0xe2>
 800307a:	2310      	movs	r3, #16
 800307c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003086:	d15a      	bne.n	800313e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003088:	7ffb      	ldrb	r3, [r7, #31]
 800308a:	2b08      	cmp	r3, #8
 800308c:	d827      	bhi.n	80030de <UART_SetConfig+0x142>
 800308e:	a201      	add	r2, pc, #4	@ (adr r2, 8003094 <UART_SetConfig+0xf8>)
 8003090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003094:	080030b9 	.word	0x080030b9
 8003098:	080030c1 	.word	0x080030c1
 800309c:	080030c9 	.word	0x080030c9
 80030a0:	080030df 	.word	0x080030df
 80030a4:	080030cf 	.word	0x080030cf
 80030a8:	080030df 	.word	0x080030df
 80030ac:	080030df 	.word	0x080030df
 80030b0:	080030df 	.word	0x080030df
 80030b4:	080030d7 	.word	0x080030d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7ff fede 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 80030bc:	61b8      	str	r0, [r7, #24]
        break;
 80030be:	e013      	b.n	80030e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c0:	f7ff fefc 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 80030c4:	61b8      	str	r0, [r7, #24]
        break;
 80030c6:	e00f      	b.n	80030e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003204 <UART_SetConfig+0x268>)
 80030ca:	61bb      	str	r3, [r7, #24]
        break;
 80030cc:	e00c      	b.n	80030e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030ce:	f7ff fe73 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 80030d2:	61b8      	str	r0, [r7, #24]
        break;
 80030d4:	e008      	b.n	80030e8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030da:	61bb      	str	r3, [r7, #24]
        break;
 80030dc:	e004      	b.n	80030e8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	77bb      	strb	r3, [r7, #30]
        break;
 80030e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d074      	beq.n	80031d8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	005a      	lsls	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	441a      	add	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003102:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b0f      	cmp	r3, #15
 8003108:	d916      	bls.n	8003138 <UART_SetConfig+0x19c>
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003110:	d212      	bcs.n	8003138 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	b29b      	uxth	r3, r3
 8003116:	f023 030f 	bic.w	r3, r3, #15
 800311a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	b29b      	uxth	r3, r3
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	b29a      	uxth	r2, r3
 8003128:	89fb      	ldrh	r3, [r7, #14]
 800312a:	4313      	orrs	r3, r2
 800312c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	89fa      	ldrh	r2, [r7, #14]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	e04f      	b.n	80031d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	77bb      	strb	r3, [r7, #30]
 800313c:	e04c      	b.n	80031d8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800313e:	7ffb      	ldrb	r3, [r7, #31]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d828      	bhi.n	8003196 <UART_SetConfig+0x1fa>
 8003144:	a201      	add	r2, pc, #4	@ (adr r2, 800314c <UART_SetConfig+0x1b0>)
 8003146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314a:	bf00      	nop
 800314c:	08003171 	.word	0x08003171
 8003150:	08003179 	.word	0x08003179
 8003154:	08003181 	.word	0x08003181
 8003158:	08003197 	.word	0x08003197
 800315c:	08003187 	.word	0x08003187
 8003160:	08003197 	.word	0x08003197
 8003164:	08003197 	.word	0x08003197
 8003168:	08003197 	.word	0x08003197
 800316c:	0800318f 	.word	0x0800318f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003170:	f7ff fe82 	bl	8002e78 <HAL_RCC_GetPCLK1Freq>
 8003174:	61b8      	str	r0, [r7, #24]
        break;
 8003176:	e013      	b.n	80031a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003178:	f7ff fea0 	bl	8002ebc <HAL_RCC_GetPCLK2Freq>
 800317c:	61b8      	str	r0, [r7, #24]
        break;
 800317e:	e00f      	b.n	80031a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003180:	4b20      	ldr	r3, [pc, #128]	@ (8003204 <UART_SetConfig+0x268>)
 8003182:	61bb      	str	r3, [r7, #24]
        break;
 8003184:	e00c      	b.n	80031a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003186:	f7ff fe17 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 800318a:	61b8      	str	r0, [r7, #24]
        break;
 800318c:	e008      	b.n	80031a0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003192:	61bb      	str	r3, [r7, #24]
        break;
 8003194:	e004      	b.n	80031a0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	77bb      	strb	r3, [r7, #30]
        break;
 800319e:	bf00      	nop
    }

    if (pclk != 0U)
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d018      	beq.n	80031d8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	085a      	lsrs	r2, r3, #1
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	441a      	add	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	d909      	bls.n	80031d4 <UART_SetConfig+0x238>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c6:	d205      	bcs.n	80031d4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	60da      	str	r2, [r3, #12]
 80031d2:	e001      	b.n	80031d8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80031e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3720      	adds	r7, #32
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	efff69f3 	.word	0xefff69f3
 80031f4:	40013800 	.word	0x40013800
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40004400 	.word	0x40004400
 8003200:	40004800 	.word	0x40004800
 8003204:	007a1200 	.word	0x007a1200

08003208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003258:	f003 0302 	and.w	r3, r3, #2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00a      	beq.n	80032ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00a      	beq.n	80032dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01a      	beq.n	800331e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003306:	d10a      	bne.n	800331e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00a      	beq.n	8003340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	605a      	str	r2, [r3, #4]
  }
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b098      	sub	sp, #96	@ 0x60
 8003350:	af02      	add	r7, sp, #8
 8003352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800335c:	f7fd fa5c 	bl	8000818 <HAL_GetTick>
 8003360:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b08      	cmp	r3, #8
 800336e:	d12e      	bne.n	80033ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f88c 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d021      	beq.n	80033ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800339a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800339e:	653b      	str	r3, [r7, #80]	@ 0x50
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033aa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80033ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e6      	bne.n	800338a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2220      	movs	r2, #32
 80033c0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e062      	b.n	8003494 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0304 	and.w	r3, r3, #4
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d149      	bne.n	8003470 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80033e0:	9300      	str	r3, [sp, #0]
 80033e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e4:	2200      	movs	r2, #0
 80033e6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f856 	bl	800349c <UART_WaitOnFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d03c      	beq.n	8003470 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fe:	e853 3f00 	ldrex	r3, [r3]
 8003402:	623b      	str	r3, [r7, #32]
   return(result);
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800340a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	461a      	mov	r2, r3
 8003412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003414:	633b      	str	r3, [r7, #48]	@ 0x30
 8003416:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003418:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800341a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800341c:	e841 2300 	strex	r3, r2, [r1]
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e6      	bne.n	80033f6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3308      	adds	r3, #8
 800342e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	60fb      	str	r3, [r7, #12]
   return(result);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0301 	bic.w	r3, r3, #1
 800343e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	3308      	adds	r3, #8
 8003446:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003448:	61fa      	str	r2, [r7, #28]
 800344a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	69b9      	ldr	r1, [r7, #24]
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	617b      	str	r3, [r7, #20]
   return(result);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e5      	bne.n	8003428 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2220      	movs	r2, #32
 8003460:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e011      	b.n	8003494 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3758      	adds	r7, #88	@ 0x58
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	603b      	str	r3, [r7, #0]
 80034a8:	4613      	mov	r3, r2
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ac:	e04f      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d04b      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b6:	f7fd f9af 	bl	8000818 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d302      	bcc.n	80034cc <UART_WaitOnFlagUntilTimeout+0x30>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e04e      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0304 	and.w	r3, r3, #4
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d037      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b80      	cmp	r3, #128	@ 0x80
 80034e2:	d034      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	2b40      	cmp	r3, #64	@ 0x40
 80034e8:	d031      	beq.n	800354e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d110      	bne.n	800351a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2208      	movs	r2, #8
 80034fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f838 	bl	8003576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2208      	movs	r2, #8
 800350a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e029      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003528:	d111      	bne.n	800354e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003532:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f81e 	bl	8003576 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e00f      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	429a      	cmp	r2, r3
 800355c:	bf0c      	ite	eq
 800355e:	2301      	moveq	r3, #1
 8003560:	2300      	movne	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	429a      	cmp	r2, r3
 800356a:	d0a0      	beq.n	80034ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003576:	b480      	push	{r7}
 8003578:	b095      	sub	sp, #84	@ 0x54
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003592:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800359c:	643b      	str	r3, [r7, #64]	@ 0x40
 800359e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e6      	bne.n	800357e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3308      	adds	r3, #8
 80035b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	61fb      	str	r3, [r7, #28]
   return(result);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f023 0301 	bic.w	r3, r3, #1
 80035c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	3308      	adds	r3, #8
 80035ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e5      	bne.n	80035b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d118      	bne.n	800361e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f023 0310 	bic.w	r3, r3, #16
 8003600:	647b      	str	r3, [r7, #68]	@ 0x44
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	461a      	mov	r2, r3
 8003608:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800360a:	61bb      	str	r3, [r7, #24]
 800360c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360e:	6979      	ldr	r1, [r7, #20]
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	e841 2300 	strex	r3, r2, [r1]
 8003616:	613b      	str	r3, [r7, #16]
   return(result);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1e6      	bne.n	80035ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2220      	movs	r2, #32
 8003622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003632:	bf00      	nop
 8003634:	3754      	adds	r7, #84	@ 0x54
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <memset>:
 800363e:	4402      	add	r2, r0
 8003640:	4603      	mov	r3, r0
 8003642:	4293      	cmp	r3, r2
 8003644:	d100      	bne.n	8003648 <memset+0xa>
 8003646:	4770      	bx	lr
 8003648:	f803 1b01 	strb.w	r1, [r3], #1
 800364c:	e7f9      	b.n	8003642 <memset+0x4>
	...

08003650 <__libc_init_array>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	4d0d      	ldr	r5, [pc, #52]	@ (8003688 <__libc_init_array+0x38>)
 8003654:	4c0d      	ldr	r4, [pc, #52]	@ (800368c <__libc_init_array+0x3c>)
 8003656:	1b64      	subs	r4, r4, r5
 8003658:	10a4      	asrs	r4, r4, #2
 800365a:	2600      	movs	r6, #0
 800365c:	42a6      	cmp	r6, r4
 800365e:	d109      	bne.n	8003674 <__libc_init_array+0x24>
 8003660:	4d0b      	ldr	r5, [pc, #44]	@ (8003690 <__libc_init_array+0x40>)
 8003662:	4c0c      	ldr	r4, [pc, #48]	@ (8003694 <__libc_init_array+0x44>)
 8003664:	f000 f818 	bl	8003698 <_init>
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	2600      	movs	r6, #0
 800366e:	42a6      	cmp	r6, r4
 8003670:	d105      	bne.n	800367e <__libc_init_array+0x2e>
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	f855 3b04 	ldr.w	r3, [r5], #4
 8003678:	4798      	blx	r3
 800367a:	3601      	adds	r6, #1
 800367c:	e7ee      	b.n	800365c <__libc_init_array+0xc>
 800367e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003682:	4798      	blx	r3
 8003684:	3601      	adds	r6, #1
 8003686:	e7f2      	b.n	800366e <__libc_init_array+0x1e>
 8003688:	080036e8 	.word	0x080036e8
 800368c:	080036e8 	.word	0x080036e8
 8003690:	080036e8 	.word	0x080036e8
 8003694:	080036ec 	.word	0x080036ec

08003698 <_init>:
 8003698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800369a:	bf00      	nop
 800369c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800369e:	bc08      	pop	{r3}
 80036a0:	469e      	mov	lr, r3
 80036a2:	4770      	bx	lr

080036a4 <_fini>:
 80036a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036a6:	bf00      	nop
 80036a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036aa:	bc08      	pop	{r3}
 80036ac:	469e      	mov	lr, r3
 80036ae:	4770      	bx	lr
