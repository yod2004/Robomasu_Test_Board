
F3_ADC_CanReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005948  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08005ad8  08005ad8  00006ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b6c  08005b6c  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005b6c  08005b6c  00006b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b74  08005b74  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b74  08005b74  00006b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b78  08005b78  00006b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005b7c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          000002fc  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000364  20000364  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e216  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002058  00000000  00000000  000152ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b18  00000000  00000000  00017308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000087f  00000000  00000000  00017e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c6f0  00000000  00000000  0001869f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e44f  00000000  00000000  00034d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a6918  00000000  00000000  000431de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e9af6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003564  00000000  00000000  000e9b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000ed0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005ac0 	.word	0x08005ac0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08005ac0 	.word	0x08005ac0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_CAN_RxFifo0MsgPendingCallback>:
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC2_Init(void);
static void MX_CAN_Init(void);
/* USER CODE BEGIN PFP */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000270:	b580      	push	{r7, lr}
 8000272:	b08c      	sub	sp, #48	@ 0x30
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8];
	if(HAL_CAN_GetRxMessage(hcan,CAN_RX_FIFO0,&RxHeader,RxData)==HAL_OK){
 8000278:	f107 030c 	add.w	r3, r7, #12
 800027c:	f107 0214 	add.w	r2, r7, #20
 8000280:	2100      	movs	r1, #0
 8000282:	6878      	ldr	r0, [r7, #4]
 8000284:	f001 fe0f 	bl	8001ea6 <HAL_CAN_GetRxMessage>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d14e      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
		id = (RxHeader.IDE == CAN_ID_STD)? RxHeader.StdId : RxHeader.ExtId;     // ID
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d101      	bne.n	8000298 <HAL_CAN_RxFifo0MsgPendingCallback+0x28>
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	e000      	b.n	800029a <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
 8000298:	69bb      	ldr	r3, [r7, #24]
 800029a:	4a26      	ldr	r2, [pc, #152]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800029c:	6013      	str	r3, [r2, #0]
		dlc = RxHeader.DLC;// DLC
 800029e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80002a0:	4a25      	ldr	r2, [pc, #148]	@ (8000338 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80002a2:	6013      	str	r3, [r2, #0]
		CanId[0]=(id&0xF00)>>8;
 80002a4:	4b23      	ldr	r3, [pc, #140]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	0a1b      	lsrs	r3, r3, #8
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	b2da      	uxtb	r2, r3
 80002b2:	4b22      	ldr	r3, [pc, #136]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002b4:	701a      	strb	r2, [r3, #0]
		CanId[1]=(id&0x0F0)>>4;
 80002b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	091b      	lsrs	r3, r3, #4
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	f003 030f 	and.w	r3, r3, #15
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	4b1d      	ldr	r3, [pc, #116]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002c6:	705a      	strb	r2, [r3, #1]
		CanId[2]=(id&0x00F);
 80002c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000334 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	f003 030f 	and.w	r3, r3, #15
 80002d2:	b2da      	uxtb	r2, r3
 80002d4:	4b19      	ldr	r3, [pc, #100]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002d6:	709a      	strb	r2, [r3, #2]
		if((myId[0]==CanId[0])&&(myId[1]==CanId[1])&&(myId[2]==CanId[2])){
 80002d8:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	4b17      	ldr	r3, [pc, #92]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	429a      	cmp	r2, r3
 80002e2:	d123      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 80002e4:	4b16      	ldr	r3, [pc, #88]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80002e6:	785a      	ldrb	r2, [r3, #1]
 80002e8:	4b14      	ldr	r3, [pc, #80]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002ea:	785b      	ldrb	r3, [r3, #1]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	d11d      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
 80002f0:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80002f2:	789a      	ldrb	r2, [r3, #2]
 80002f4:	4b11      	ldr	r3, [pc, #68]	@ (800033c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80002f6:	789b      	ldrb	r3, [r3, #2]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d117      	bne.n	800032c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>
			data[0] = RxData[0];                                                    // Data
 80002fc:	7b3a      	ldrb	r2, [r7, #12]
 80002fe:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000300:	701a      	strb	r2, [r3, #0]
			data[1] = RxData[1];
 8000302:	7b7a      	ldrb	r2, [r7, #13]
 8000304:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000306:	705a      	strb	r2, [r3, #1]
			data[2] = RxData[2];
 8000308:	7bba      	ldrb	r2, [r7, #14]
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800030c:	709a      	strb	r2, [r3, #2]
			data[3] = RxData[3];
 800030e:	7bfa      	ldrb	r2, [r7, #15]
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000312:	70da      	strb	r2, [r3, #3]
			data[4] = RxData[4];
 8000314:	7c3a      	ldrb	r2, [r7, #16]
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000318:	711a      	strb	r2, [r3, #4]
			data[5] = RxData[5];
 800031a:	7c7a      	ldrb	r2, [r7, #17]
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800031e:	715a      	strb	r2, [r3, #5]
			data[6] = RxData[6];
 8000320:	7cba      	ldrb	r2, [r7, #18]
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8000324:	719a      	strb	r2, [r3, #6]
			data[7] = RxData[7];
 8000326:	7cfa      	ldrb	r2, [r7, #19]
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 800032a:	71da      	strb	r2, [r3, #7]
		}
	}
}
 800032c:	bf00      	nop
 800032e:	3730      	adds	r7, #48	@ 0x30
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	20000200 	.word	0x20000200
 8000338:	20000204 	.word	0x20000204
 800033c:	200001cc 	.word	0x200001cc
 8000340:	200001c8 	.word	0x200001c8
 8000344:	20000208 	.word	0x20000208

08000348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800034c:	b08c      	sub	sp, #48	@ 0x30
 800034e:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */
    setbuf(stdout, NULL);
 8000350:	4b51      	ldr	r3, [pc, #324]	@ (8000498 <main+0x150>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	689b      	ldr	r3, [r3, #8]
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f004 fc91 	bl	8004c80 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035e:	f000 fc49 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000362:	f000 f8a9 	bl	80004b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000366:	f000 f9e1 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 800036a:	f000 f9c1 	bl	80006f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800036e:	f000 f98f 	bl	8000690 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000372:	f000 f8dd 	bl	8000530 <MX_ADC2_Init>
  MX_CAN_Init();
 8000376:	f000 f955 	bl	8000624 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 800037a:	2100      	movs	r1, #0
 800037c:	4847      	ldr	r0, [pc, #284]	@ (800049c <main+0x154>)
 800037e:	f000 ff29 	bl	80011d4 <HAL_ADCEx_Calibration_Start>


  HAL_ADC_Start_DMA(&hadc2, (uint32_t *)&result, 3);
 8000382:	2203      	movs	r2, #3
 8000384:	4946      	ldr	r1, [pc, #280]	@ (80004a0 <main+0x158>)
 8000386:	4845      	ldr	r0, [pc, #276]	@ (800049c <main+0x154>)
 8000388:	f000 fe4a 	bl	8001020 <HAL_ADC_Start_DMA>

  filter.FilterIdHigh = 0;
 800038c:	4b45      	ldr	r3, [pc, #276]	@ (80004a4 <main+0x15c>)
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
  filter.FilterIdLow = 0;
 8000392:	4b44      	ldr	r3, [pc, #272]	@ (80004a4 <main+0x15c>)
 8000394:	2200      	movs	r2, #0
 8000396:	605a      	str	r2, [r3, #4]
  filter.FilterMaskIdHigh = 0;
 8000398:	4b42      	ldr	r3, [pc, #264]	@ (80004a4 <main+0x15c>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  filter.FilterMaskIdLow = 0;
 800039e:	4b41      	ldr	r3, [pc, #260]	@ (80004a4 <main+0x15c>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	60da      	str	r2, [r3, #12]
  filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80003a4:	4b3f      	ldr	r3, [pc, #252]	@ (80004a4 <main+0x15c>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	61da      	str	r2, [r3, #28]
  filter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80003aa:	4b3e      	ldr	r3, [pc, #248]	@ (80004a4 <main+0x15c>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	611a      	str	r2, [r3, #16]
  filter.FilterBank = 0;
 80003b0:	4b3c      	ldr	r3, [pc, #240]	@ (80004a4 <main+0x15c>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	615a      	str	r2, [r3, #20]
  filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80003b6:	4b3b      	ldr	r3, [pc, #236]	@ (80004a4 <main+0x15c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	619a      	str	r2, [r3, #24]
  filter.SlaveStartFilterBank = 14;
 80003bc:	4b39      	ldr	r3, [pc, #228]	@ (80004a4 <main+0x15c>)
 80003be:	220e      	movs	r2, #14
 80003c0:	625a      	str	r2, [r3, #36]	@ 0x24
  filter.FilterActivation = ENABLE;
 80003c2:	4b38      	ldr	r3, [pc, #224]	@ (80004a4 <main+0x15c>)
 80003c4:	2201      	movs	r2, #1
 80003c6:	621a      	str	r2, [r3, #32]
  HAL_CAN_ConfigFilter(&hcan,&filter);
 80003c8:	4936      	ldr	r1, [pc, #216]	@ (80004a4 <main+0x15c>)
 80003ca:	4837      	ldr	r0, [pc, #220]	@ (80004a8 <main+0x160>)
 80003cc:	f001 fc5d 	bl	8001c8a <HAL_CAN_ConfigFilter>

  HAL_CAN_ActivateNotification(&hcan,CAN_IT_RX_FIFO0_MSG_PENDING);
 80003d0:	2102      	movs	r1, #2
 80003d2:	4835      	ldr	r0, [pc, #212]	@ (80004a8 <main+0x160>)
 80003d4:	f001 fe89 	bl	80020ea <HAL_CAN_ActivateNotification>
  HAL_CAN_Start(&hcan);
 80003d8:	4833      	ldr	r0, [pc, #204]	@ (80004a8 <main+0x160>)
 80003da:	f001 fd20 	bl	8001e1e <HAL_CAN_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i = 0 ; i<3 ; i++){
 80003de:	2300      	movs	r3, #0
 80003e0:	73fb      	strb	r3, [r7, #15]
 80003e2:	e00c      	b.n	80003fe <main+0xb6>
		  myId[i]=result[i]/256;//0~4095 -> 0~15
 80003e4:	7bfb      	ldrb	r3, [r7, #15]
 80003e6:	4a2e      	ldr	r2, [pc, #184]	@ (80004a0 <main+0x158>)
 80003e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003ec:	0a1b      	lsrs	r3, r3, #8
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	7bfb      	ldrb	r3, [r7, #15]
 80003f2:	b2d1      	uxtb	r1, r2
 80003f4:	4a2d      	ldr	r2, [pc, #180]	@ (80004ac <main+0x164>)
 80003f6:	54d1      	strb	r1, [r2, r3]
	  for(uint8_t i = 0 ; i<3 ; i++){
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	3301      	adds	r3, #1
 80003fc:	73fb      	strb	r3, [r7, #15]
 80003fe:	7bfb      	ldrb	r3, [r7, #15]
 8000400:	2b02      	cmp	r3, #2
 8000402:	d9ef      	bls.n	80003e4 <main+0x9c>
	  }
	  printf("id[%d%d%d]-->%d,%d,%d,%d,%d,%d,%d,%d\r\n",myId[0],myId[1],myId[2],data[0],data[1],data[2],data[3],data[4],data[5],data[6],data[7]);
 8000404:	4b29      	ldr	r3, [pc, #164]	@ (80004ac <main+0x164>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	469c      	mov	ip, r3
 800040a:	4b28      	ldr	r3, [pc, #160]	@ (80004ac <main+0x164>)
 800040c:	785b      	ldrb	r3, [r3, #1]
 800040e:	469e      	mov	lr, r3
 8000410:	4b26      	ldr	r3, [pc, #152]	@ (80004ac <main+0x164>)
 8000412:	789b      	ldrb	r3, [r3, #2]
 8000414:	4698      	mov	r8, r3
 8000416:	4b26      	ldr	r3, [pc, #152]	@ (80004b0 <main+0x168>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	461a      	mov	r2, r3
 800041c:	4b24      	ldr	r3, [pc, #144]	@ (80004b0 <main+0x168>)
 800041e:	785b      	ldrb	r3, [r3, #1]
 8000420:	4619      	mov	r1, r3
 8000422:	4b23      	ldr	r3, [pc, #140]	@ (80004b0 <main+0x168>)
 8000424:	789b      	ldrb	r3, [r3, #2]
 8000426:	4618      	mov	r0, r3
 8000428:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <main+0x168>)
 800042a:	78db      	ldrb	r3, [r3, #3]
 800042c:	461c      	mov	r4, r3
 800042e:	4b20      	ldr	r3, [pc, #128]	@ (80004b0 <main+0x168>)
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	461d      	mov	r5, r3
 8000434:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <main+0x168>)
 8000436:	795b      	ldrb	r3, [r3, #5]
 8000438:	461e      	mov	r6, r3
 800043a:	4b1d      	ldr	r3, [pc, #116]	@ (80004b0 <main+0x168>)
 800043c:	799b      	ldrb	r3, [r3, #6]
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	4b1b      	ldr	r3, [pc, #108]	@ (80004b0 <main+0x168>)
 8000442:	79db      	ldrb	r3, [r3, #7]
 8000444:	9307      	str	r3, [sp, #28]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	9306      	str	r3, [sp, #24]
 800044a:	9605      	str	r6, [sp, #20]
 800044c:	9504      	str	r5, [sp, #16]
 800044e:	9403      	str	r4, [sp, #12]
 8000450:	9002      	str	r0, [sp, #8]
 8000452:	9101      	str	r1, [sp, #4]
 8000454:	9200      	str	r2, [sp, #0]
 8000456:	4643      	mov	r3, r8
 8000458:	4672      	mov	r2, lr
 800045a:	4661      	mov	r1, ip
 800045c:	4815      	ldr	r0, [pc, #84]	@ (80004b4 <main+0x16c>)
 800045e:	f004 fbfd 	bl	8004c5c <iprintf>
	  if((myId[0]==0) && (myId[1]==0) && (myId[2]==0)){
 8000462:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <main+0x164>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1b9      	bne.n	80003de <main+0x96>
 800046a:	4b10      	ldr	r3, [pc, #64]	@ (80004ac <main+0x164>)
 800046c:	785b      	ldrb	r3, [r3, #1]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d1b5      	bne.n	80003de <main+0x96>
 8000472:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <main+0x164>)
 8000474:	789b      	ldrb	r3, [r3, #2]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1b1      	bne.n	80003de <main+0x96>
		  for(uint8_t j = 0 ; j<8; j++){
 800047a:	2300      	movs	r3, #0
 800047c:	73bb      	strb	r3, [r7, #14]
 800047e:	e006      	b.n	800048e <main+0x146>
			  data[j]=0;
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	4a0b      	ldr	r2, [pc, #44]	@ (80004b0 <main+0x168>)
 8000484:	2100      	movs	r1, #0
 8000486:	54d1      	strb	r1, [r2, r3]
		  for(uint8_t j = 0 ; j<8; j++){
 8000488:	7bbb      	ldrb	r3, [r7, #14]
 800048a:	3301      	adds	r3, #1
 800048c:	73bb      	strb	r3, [r7, #14]
 800048e:	7bbb      	ldrb	r3, [r7, #14]
 8000490:	2b07      	cmp	r3, #7
 8000492:	d9f5      	bls.n	8000480 <main+0x138>
	  for(uint8_t i = 0 ; i<3 ; i++){
 8000494:	e7a3      	b.n	80003de <main+0x96>
 8000496:	bf00      	nop
 8000498:	20000018 	.word	0x20000018
 800049c:	20000084 	.word	0x20000084
 80004a0:	200001d0 	.word	0x200001d0
 80004a4:	200001d8 	.word	0x200001d8
 80004a8:	20000118 	.word	0x20000118
 80004ac:	200001c8 	.word	0x200001c8
 80004b0:	20000208 	.word	0x20000208
 80004b4:	08005ad8 	.word	0x08005ad8

080004b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b090      	sub	sp, #64	@ 0x40
 80004bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004be:	f107 0318 	add.w	r3, r7, #24
 80004c2:	2228      	movs	r2, #40	@ 0x28
 80004c4:	2100      	movs	r1, #0
 80004c6:	4618      	mov	r0, r3
 80004c8:	f004 fcd9 	bl	8004e7e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004cc:	1d3b      	adds	r3, r7, #4
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004da:	2302      	movs	r3, #2
 80004dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004de:	2301      	movs	r3, #1
 80004e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004e2:	2310      	movs	r3, #16
 80004e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004e6:	2300      	movs	r3, #0
 80004e8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ea:	f107 0318 	add.w	r3, r7, #24
 80004ee:	4618      	mov	r0, r3
 80004f0:	f002 fc6a 	bl	8002dc8 <HAL_RCC_OscConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004fa:	f000 f94f 	bl	800079c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004fe:	230f      	movs	r3, #15
 8000500:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800050a:	2300      	movs	r3, #0
 800050c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800050e:	2300      	movs	r3, #0
 8000510:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f003 fc94 	bl	8003e44 <HAL_RCC_ClockConfig>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d001      	beq.n	8000526 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000522:	f000 f93b 	bl	800079c <Error_Handler>
  }
}
 8000526:	bf00      	nop
 8000528:	3740      	adds	r7, #64	@ 0x40
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000536:	463b      	mov	r3, r7
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
 8000544:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000546:	4b35      	ldr	r3, [pc, #212]	@ (800061c <MX_ADC2_Init+0xec>)
 8000548:	4a35      	ldr	r2, [pc, #212]	@ (8000620 <MX_ADC2_Init+0xf0>)
 800054a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800054c:	4b33      	ldr	r3, [pc, #204]	@ (800061c <MX_ADC2_Init+0xec>)
 800054e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000552:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000554:	4b31      	ldr	r3, [pc, #196]	@ (800061c <MX_ADC2_Init+0xec>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800055a:	4b30      	ldr	r3, [pc, #192]	@ (800061c <MX_ADC2_Init+0xec>)
 800055c:	2201      	movs	r2, #1
 800055e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000560:	4b2e      	ldr	r3, [pc, #184]	@ (800061c <MX_ADC2_Init+0xec>)
 8000562:	2201      	movs	r2, #1
 8000564:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b2d      	ldr	r3, [pc, #180]	@ (800061c <MX_ADC2_Init+0xec>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056e:	4b2b      	ldr	r3, [pc, #172]	@ (800061c <MX_ADC2_Init+0xec>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000574:	4b29      	ldr	r3, [pc, #164]	@ (800061c <MX_ADC2_Init+0xec>)
 8000576:	2201      	movs	r2, #1
 8000578:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057a:	4b28      	ldr	r3, [pc, #160]	@ (800061c <MX_ADC2_Init+0xec>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 3;
 8000580:	4b26      	ldr	r3, [pc, #152]	@ (800061c <MX_ADC2_Init+0xec>)
 8000582:	2203      	movs	r2, #3
 8000584:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000586:	4b25      	ldr	r3, [pc, #148]	@ (800061c <MX_ADC2_Init+0xec>)
 8000588:	2201      	movs	r2, #1
 800058a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800058e:	4b23      	ldr	r3, [pc, #140]	@ (800061c <MX_ADC2_Init+0xec>)
 8000590:	2204      	movs	r2, #4
 8000592:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000594:	4b21      	ldr	r3, [pc, #132]	@ (800061c <MX_ADC2_Init+0xec>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800059a:	4b20      	ldr	r3, [pc, #128]	@ (800061c <MX_ADC2_Init+0xec>)
 800059c:	2200      	movs	r2, #0
 800059e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005a0:	481e      	ldr	r0, [pc, #120]	@ (800061c <MX_ADC2_Init+0xec>)
 80005a2:	f000 fbab 	bl	8000cfc <HAL_ADC_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80005ac:	f000 f8f6 	bl	800079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005b8:	2300      	movs	r3, #0
 80005ba:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_61CYCLES_5;
 80005bc:	2305      	movs	r3, #5
 80005be:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	4813      	ldr	r0, [pc, #76]	@ (800061c <MX_ADC2_Init+0xec>)
 80005ce:	f000 fe73 	bl	80012b8 <HAL_ADC_ConfigChannel>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80005d8:	f000 f8e0 	bl	800079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005dc:	2303      	movs	r3, #3
 80005de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005e0:	2302      	movs	r3, #2
 80005e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005e4:	463b      	mov	r3, r7
 80005e6:	4619      	mov	r1, r3
 80005e8:	480c      	ldr	r0, [pc, #48]	@ (800061c <MX_ADC2_Init+0xec>)
 80005ea:	f000 fe65 	bl	80012b8 <HAL_ADC_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80005f4:	f000 f8d2 	bl	800079c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80005fc:	2303      	movs	r3, #3
 80005fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000600:	463b      	mov	r3, r7
 8000602:	4619      	mov	r1, r3
 8000604:	4805      	ldr	r0, [pc, #20]	@ (800061c <MX_ADC2_Init+0xec>)
 8000606:	f000 fe57 	bl	80012b8 <HAL_ADC_ConfigChannel>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8000610:	f000 f8c4 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000614:	bf00      	nop
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20000084 	.word	0x20000084
 8000620:	50000100 	.word	0x50000100

08000624 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000628:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <MX_CAN_Init+0x64>)
 800062a:	4a18      	ldr	r2, [pc, #96]	@ (800068c <MX_CAN_Init+0x68>)
 800062c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 1;
 800062e:	4b16      	ldr	r3, [pc, #88]	@ (8000688 <MX_CAN_Init+0x64>)
 8000630:	2201      	movs	r2, #1
 8000632:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <MX_CAN_Init+0x64>)
 8000636:	2200      	movs	r2, #0
 8000638:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800063a:	4b13      	ldr	r3, [pc, #76]	@ (8000688 <MX_CAN_Init+0x64>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_11TQ;
 8000640:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <MX_CAN_Init+0x64>)
 8000642:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8000646:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000648:	4b0f      	ldr	r3, [pc, #60]	@ (8000688 <MX_CAN_Init+0x64>)
 800064a:	f44f 1240 	mov.w	r2, #3145728	@ 0x300000
 800064e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000650:	4b0d      	ldr	r3, [pc, #52]	@ (8000688 <MX_CAN_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000656:	4b0c      	ldr	r3, [pc, #48]	@ (8000688 <MX_CAN_Init+0x64>)
 8000658:	2200      	movs	r2, #0
 800065a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <MX_CAN_Init+0x64>)
 800065e:	2200      	movs	r2, #0
 8000660:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000662:	4b09      	ldr	r3, [pc, #36]	@ (8000688 <MX_CAN_Init+0x64>)
 8000664:	2200      	movs	r2, #0
 8000666:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	@ (8000688 <MX_CAN_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	@ (8000688 <MX_CAN_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <MX_CAN_Init+0x64>)
 8000676:	f001 fa0d 	bl	8001a94 <HAL_CAN_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000680:	f000 f88c 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000118 	.word	0x20000118
 800068c:	40006400 	.word	0x40006400

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b14      	ldr	r3, [pc, #80]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	@ (80006ec <MX_USART2_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800069a:	4b13      	ldr	r3, [pc, #76]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 800069c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	@ (80006e8 <MX_USART2_UART_Init+0x58>)
 80006d4:	f003 fdd6 	bl	8004284 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f85d 	bl	800079c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000140 	.word	0x20000140
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_DMA_Init+0x38>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	@ (8000728 <MX_DMA_Init+0x38>)
 80006fc:	f043 0301 	orr.w	r3, r3, #1
 8000700:	6153      	str	r3, [r2, #20]
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_DMA_Init+0x38>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	200c      	movs	r0, #12
 8000714:	f002 f819 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000718:	200c      	movs	r0, #12
 800071a:	f002 f832 	bl	8002782 <HAL_NVIC_EnableIRQ>

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000732:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_GPIO_Init+0x44>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a0e      	ldr	r2, [pc, #56]	@ (8000770 <MX_GPIO_Init+0x44>)
 8000738:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_GPIO_Init+0x44>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_GPIO_Init+0x44>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <MX_GPIO_Init+0x44>)
 8000750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_GPIO_Init+0x44>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	b29a      	uxth	r2, r3
 8000784:	230a      	movs	r3, #10
 8000786:	68b9      	ldr	r1, [r7, #8]
 8000788:	4803      	ldr	r0, [pc, #12]	@ (8000798 <_write+0x24>)
 800078a:	f003 fdc9 	bl	8004320 <HAL_UART_Transmit>
  return len;
 800078e:	687b      	ldr	r3, [r7, #4]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000140 	.word	0x20000140

0800079c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a0:	b672      	cpsid	i
}
 80007a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a4:	bf00      	nop
 80007a6:	e7fd      	b.n	80007a4 <Error_Handler+0x8>

080007a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <HAL_MspInit+0x44>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a0e      	ldr	r2, [pc, #56]	@ (80007ec <HAL_MspInit+0x44>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	6193      	str	r3, [r2, #24]
 80007ba:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <HAL_MspInit+0x44>)
 80007bc:	699b      	ldr	r3, [r3, #24]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <HAL_MspInit+0x44>)
 80007c8:	69db      	ldr	r3, [r3, #28]
 80007ca:	4a08      	ldr	r2, [pc, #32]	@ (80007ec <HAL_MspInit+0x44>)
 80007cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007d0:	61d3      	str	r3, [r2, #28]
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <HAL_MspInit+0x44>)
 80007d4:	69db      	ldr	r3, [r3, #28]
 80007d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a29      	ldr	r2, [pc, #164]	@ (80008b4 <HAL_ADC_MspInit+0xc4>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d14c      	bne.n	80008ac <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000812:	4b29      	ldr	r3, [pc, #164]	@ (80008b8 <HAL_ADC_MspInit+0xc8>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a28      	ldr	r2, [pc, #160]	@ (80008b8 <HAL_ADC_MspInit+0xc8>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b26      	ldr	r3, [pc, #152]	@ (80008b8 <HAL_ADC_MspInit+0xc8>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	4b23      	ldr	r3, [pc, #140]	@ (80008b8 <HAL_ADC_MspInit+0xc8>)
 800082c:	695b      	ldr	r3, [r3, #20]
 800082e:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <HAL_ADC_MspInit+0xc8>)
 8000830:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_ADC_MspInit+0xc8>)
 8000838:	695b      	ldr	r3, [r3, #20]
 800083a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PA5     ------> ADC2_IN2
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000842:	23e0      	movs	r3, #224	@ 0xe0
 8000844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000846:	2303      	movs	r3, #3
 8000848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000858:	f002 f944 	bl	8002ae4 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel2;
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 800085e:	4a18      	ldr	r2, [pc, #96]	@ (80008c0 <HAL_ADC_MspInit+0xd0>)
 8000860:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 8000864:	2200      	movs	r2, #0
 8000866:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 8000870:	2280      	movs	r2, #128	@ 0x80
 8000872:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000874:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 8000876:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800087a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 800087e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000882:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000884:	4b0d      	ldr	r3, [pc, #52]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 8000886:	2220      	movs	r2, #32
 8000888:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800088a:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000890:	480a      	ldr	r0, [pc, #40]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 8000892:	f001 ff90 	bl	80027b6 <HAL_DMA_Init>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800089c:	f7ff ff7e 	bl	800079c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 80008a4:	639a      	str	r2, [r3, #56]	@ 0x38
 80008a6:	4a05      	ldr	r2, [pc, #20]	@ (80008bc <HAL_ADC_MspInit+0xcc>)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END ADC2_MspInit 1 */

  }

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	50000100 	.word	0x50000100
 80008b8:	40021000 	.word	0x40021000
 80008bc:	200000d4 	.word	0x200000d4
 80008c0:	4002001c 	.word	0x4002001c

080008c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	@ 0x28
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a1c      	ldr	r2, [pc, #112]	@ (8000954 <HAL_CAN_MspInit+0x90>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d131      	bne.n	800094a <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <HAL_CAN_MspInit+0x94>)
 80008e8:	69db      	ldr	r3, [r3, #28]
 80008ea:	4a1b      	ldr	r2, [pc, #108]	@ (8000958 <HAL_CAN_MspInit+0x94>)
 80008ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80008f0:	61d3      	str	r3, [r2, #28]
 80008f2:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <HAL_CAN_MspInit+0x94>)
 80008f4:	69db      	ldr	r3, [r3, #28]
 80008f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b16      	ldr	r3, [pc, #88]	@ (8000958 <HAL_CAN_MspInit+0x94>)
 8000900:	695b      	ldr	r3, [r3, #20]
 8000902:	4a15      	ldr	r2, [pc, #84]	@ (8000958 <HAL_CAN_MspInit+0x94>)
 8000904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000908:	6153      	str	r3, [r2, #20]
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <HAL_CAN_MspInit+0x94>)
 800090c:	695b      	ldr	r3, [r3, #20]
 800090e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000916:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800091a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000928:	2309      	movs	r3, #9
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000936:	f002 f8d5 	bl	8002ae4 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX0_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2014      	movs	r0, #20
 8000940:	f001 ff03 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX0_IRQn);
 8000944:	2014      	movs	r0, #20
 8000946:	f001 ff1c 	bl	8002782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN_MspInit 1 */

  }

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	@ 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40006400 	.word	0x40006400
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a18      	ldr	r2, [pc, #96]	@ (80009dc <HAL_UART_MspInit+0x80>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d129      	bne.n	80009d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <HAL_UART_MspInit+0x84>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	4a17      	ldr	r2, [pc, #92]	@ (80009e0 <HAL_UART_MspInit+0x84>)
 8000984:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000988:	61d3      	str	r3, [r2, #28]
 800098a:	4b15      	ldr	r3, [pc, #84]	@ (80009e0 <HAL_UART_MspInit+0x84>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_UART_MspInit+0x84>)
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_UART_MspInit+0x84>)
 800099c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a0:	6153      	str	r3, [r2, #20]
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_UART_MspInit+0x84>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009ae:	f248 0304 	movw	r3, #32772	@ 0x8004
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c0:	2307      	movs	r3, #7
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009ce:	f002 f889 	bl	8002ae4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	@ 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40004400 	.word	0x40004400
 80009e0:	40021000 	.word	0x40021000

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <NMI_Handler+0x4>

080009ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <MemManage_Handler+0x4>

080009fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <BusFault_Handler+0x4>

08000a04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a08:	bf00      	nop
 8000a0a:	e7fd      	b.n	8000a08 <UsageFault_Handler+0x4>

08000a0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr

08000a36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3a:	f000 f921 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <DMA1_Channel2_IRQHandler+0x10>)
 8000a4a:	f001 ff5a 	bl	8002902 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000d4 	.word	0x200000d4

08000a58 <CAN_RX0_IRQHandler>:

/**
  * @brief This function handles CAN RX0 interrupt.
  */
void CAN_RX0_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX0_IRQn 0 */

  /* USER CODE END CAN_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a5c:	4802      	ldr	r0, [pc, #8]	@ (8000a68 <CAN_RX0_IRQHandler+0x10>)
 8000a5e:	f001 fb6a 	bl	8002136 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX0_IRQn 1 */

  /* USER CODE END CAN_RX0_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000118 	.word	0x20000118

08000a6c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	e00a      	b.n	8000a94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7e:	f3af 8000 	nop.w
 8000a82:	4601      	mov	r1, r0
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	1c5a      	adds	r2, r3, #1
 8000a88:	60ba      	str	r2, [r7, #8]
 8000a8a:	b2ca      	uxtb	r2, r1
 8000a8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	3301      	adds	r3, #1
 8000a92:	617b      	str	r3, [r7, #20]
 8000a94:	697a      	ldr	r2, [r7, #20]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	dbf0      	blt.n	8000a7e <_read+0x12>
  }

  return len;
 8000a9c:	687b      	ldr	r3, [r7, #4]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ace:	605a      	str	r2, [r3, #4]
  return 0;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_isatty>:

int _isatty(int file)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
	...

08000b10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b18:	4a14      	ldr	r2, [pc, #80]	@ (8000b6c <_sbrk+0x5c>)
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <_sbrk+0x60>)
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d102      	bne.n	8000b32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b2c:	4b11      	ldr	r3, [pc, #68]	@ (8000b74 <_sbrk+0x64>)
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <_sbrk+0x68>)
 8000b30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b32:	4b10      	ldr	r3, [pc, #64]	@ (8000b74 <_sbrk+0x64>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	693a      	ldr	r2, [r7, #16]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d207      	bcs.n	8000b50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b40:	f004 f9ec 	bl	8004f1c <__errno>
 8000b44:	4603      	mov	r3, r0
 8000b46:	220c      	movs	r2, #12
 8000b48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4e:	e009      	b.n	8000b64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b50:	4b08      	ldr	r3, [pc, #32]	@ (8000b74 <_sbrk+0x64>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b56:	4b07      	ldr	r3, [pc, #28]	@ (8000b74 <_sbrk+0x64>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	4a05      	ldr	r2, [pc, #20]	@ (8000b74 <_sbrk+0x64>)
 8000b60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b62:	68fb      	ldr	r3, [r7, #12]
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20003000 	.word	0x20003000
 8000b70:	00000400 	.word	0x00000400
 8000b74:	20000210 	.word	0x20000210
 8000b78:	20000368 	.word	0x20000368

08000b7c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <SystemInit+0x20>)
 8000b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b86:	4a05      	ldr	r2, [pc, #20]	@ (8000b9c <SystemInit+0x20>)
 8000b88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ba4:	f7ff ffea 	bl	8000b7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	@ (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	@ (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	@ (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bce:	f004 f9ab 	bl	8004f28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bd2:	f7ff fbb9 	bl	8000348 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bd8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000be4:	08005b7c 	.word	0x08005b7c
  ldr r2, =_sbss
 8000be8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bec:	20000364 	.word	0x20000364

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <HAL_Init+0x28>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a07      	ldr	r2, [pc, #28]	@ (8000c1c <HAL_Init+0x28>)
 8000bfe:	f043 0310 	orr.w	r3, r3, #16
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c04:	2003      	movs	r0, #3
 8000c06:	f001 fd95 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f808 	bl	8000c20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c10:	f7ff fdca 	bl	80007a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40022000 	.word	0x40022000

08000c20 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c28:	4b12      	ldr	r3, [pc, #72]	@ (8000c74 <HAL_InitTick+0x54>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_InitTick+0x58>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	4619      	mov	r1, r3
 8000c32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 fdad 	bl	800279e <HAL_SYSTICK_Config>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e00e      	b.n	8000c6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d80a      	bhi.n	8000c6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c54:	2200      	movs	r2, #0
 8000c56:	6879      	ldr	r1, [r7, #4]
 8000c58:	f04f 30ff 	mov.w	r0, #4294967295
 8000c5c:	f001 fd75 	bl	800274a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c60:	4a06      	ldr	r2, [pc, #24]	@ (8000c7c <HAL_InitTick+0x5c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
 8000c68:	e000      	b.n	8000c6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20000000 	.word	0x20000000
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	20000214 	.word	0x20000214

08000ca8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;  
 8000cac:	4b03      	ldr	r3, [pc, #12]	@ (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20000214 	.word	0x20000214

08000cc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b09a      	sub	sp, #104	@ 0x68
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d101      	bne.n	8000d1c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e172      	b.n	8001002 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d176      	bne.n	8000e1c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d152      	bne.n	8000ddc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2200      	movs	r2, #0
 8000d3a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2200      	movs	r2, #0
 8000d46:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f7ff fd4d 	bl	80007f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d13b      	bne.n	8000ddc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000d64:	6878      	ldr	r0, [r7, #4]
 8000d66:	f000 fe2f 	bl	80019c8 <ADC_Disable>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d74:	f003 0310 	and.w	r3, r3, #16
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d12f      	bne.n	8000ddc <HAL_ADC_Init+0xe0>
 8000d7c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d12b      	bne.n	8000ddc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d8c:	f023 0302 	bic.w	r3, r3, #2
 8000d90:	f043 0202 	orr.w	r2, r3, #2
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	689a      	ldr	r2, [r3, #8]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000da6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	689a      	ldr	r2, [r3, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000db6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000db8:	4b94      	ldr	r3, [pc, #592]	@ (800100c <HAL_ADC_Init+0x310>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a94      	ldr	r2, [pc, #592]	@ (8001010 <HAL_ADC_Init+0x314>)
 8000dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc2:	0c9a      	lsrs	r2, r3, #18
 8000dc4:	4613      	mov	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dce:	e002      	b.n	8000dd6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1f9      	bne.n	8000dd0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d007      	beq.n	8000dfa <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000df4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000df8:	d110      	bne.n	8000e1c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfe:	f023 0312 	bic.w	r3, r3, #18
 8000e02:	f043 0210 	orr.w	r2, r3, #16
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	f040 80df 	bne.w	8000fe8 <HAL_ADC_Init+0x2ec>
 8000e2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f040 80da 	bne.w	8000fe8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 80d2 	bne.w	8000fe8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000e4c:	f043 0202 	orr.w	r2, r3, #2
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e54:	4b6f      	ldr	r3, [pc, #444]	@ (8001014 <HAL_ADC_Init+0x318>)
 8000e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000e60:	d102      	bne.n	8000e68 <HAL_ADC_Init+0x16c>
 8000e62:	4b6d      	ldr	r3, [pc, #436]	@ (8001018 <HAL_ADC_Init+0x31c>)
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	e002      	b.n	8000e6e <HAL_ADC_Init+0x172>
 8000e68:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000e6c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f003 0303 	and.w	r3, r3, #3
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d108      	bne.n	8000e8e <HAL_ADC_Init+0x192>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d101      	bne.n	8000e8e <HAL_ADC_Init+0x192>
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e000      	b.n	8000e90 <HAL_ADC_Init+0x194>
 8000e8e:	2300      	movs	r3, #0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d11c      	bne.n	8000ece <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000e94:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d010      	beq.n	8000ebc <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d107      	bne.n	8000eb6 <HAL_ADC_Init+0x1ba>
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0301 	and.w	r3, r3, #1
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d101      	bne.n	8000eb6 <HAL_ADC_Init+0x1ba>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <HAL_ADC_Init+0x1bc>
 8000eb6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d108      	bne.n	8000ece <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ebc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	431a      	orrs	r2, r3
 8000eca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ecc:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7e5b      	ldrb	r3, [r3, #25]
 8000ed2:	035b      	lsls	r3, r3, #13
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000ed8:	2a01      	cmp	r2, #1
 8000eda:	d002      	beq.n	8000ee2 <HAL_ADC_Init+0x1e6>
 8000edc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ee0:	e000      	b.n	8000ee4 <HAL_ADC_Init+0x1e8>
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	431a      	orrs	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d11b      	bne.n	8000f3a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	7e5b      	ldrb	r3, [r3, #25]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d109      	bne.n	8000f1e <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	045a      	lsls	r2, r3, #17
 8000f12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000f14:	4313      	orrs	r3, r2
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000f1c:	e00d      	b.n	8000f3a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f22:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000f26:	f043 0220 	orr.w	r2, r3, #32
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	f043 0201 	orr.w	r2, r3, #1
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d007      	beq.n	8000f52 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 030c 	and.w	r3, r3, #12
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d114      	bne.n	8000f8a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	6812      	ldr	r2, [r2, #0]
 8000f6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000f6e:	f023 0302 	bic.w	r3, r3, #2
 8000f72:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7e1b      	ldrb	r3, [r3, #24]
 8000f78:	039a      	lsls	r2, r3, #14
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4313      	orrs	r3, r2
 8000f84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000f86:	4313      	orrs	r3, r2
 8000f88:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68da      	ldr	r2, [r3, #12]
 8000f90:	4b22      	ldr	r3, [pc, #136]	@ (800101c <HAL_ADC_Init+0x320>)
 8000f92:	4013      	ands	r3, r2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000f9a:	430b      	orrs	r3, r1
 8000f9c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fac:	f023 010f 	bic.w	r1, r3, #15
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	1e5a      	subs	r2, r3, #1
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fbe:	e007      	b.n	8000fd0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 020f 	bic.w	r2, r2, #15
 8000fce:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	f023 0303 	bic.w	r3, r3, #3
 8000fde:	f043 0201 	orr.w	r2, r3, #1
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fe6:	e00a      	b.n	8000ffe <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	f023 0312 	bic.w	r3, r3, #18
 8000ff0:	f043 0210 	orr.w	r2, r3, #16
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ffe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001002:	4618      	mov	r0, r3
 8001004:	3768      	adds	r7, #104	@ 0x68
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000000 	.word	0x20000000
 8001010:	431bde83 	.word	0x431bde83
 8001014:	50000300 	.word	0x50000300
 8001018:	50000100 	.word	0x50000100
 800101c:	fff0c007 	.word	0xfff0c007

08001020 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80b9 	bne.w	80011b2 <HAL_ADC_Start_DMA+0x192>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001046:	2b01      	cmp	r3, #1
 8001048:	d101      	bne.n	800104e <HAL_ADC_Start_DMA+0x2e>
 800104a:	2302      	movs	r3, #2
 800104c:	e0b4      	b.n	80011b8 <HAL_ADC_Start_DMA+0x198>
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001056:	4b5a      	ldr	r3, [pc, #360]	@ (80011c0 <HAL_ADC_Start_DMA+0x1a0>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 80a0 	bne.w	80011a4 <HAL_ADC_Start_DMA+0x184>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f000 fc4b 	bl	8001900 <ADC_Enable>
 800106a:	4603      	mov	r3, r0
 800106c:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	2b00      	cmp	r3, #0
 8001072:	f040 8092 	bne.w	800119a <HAL_ADC_Start_DMA+0x17a>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800107e:	f023 0301 	bic.w	r3, r3, #1
 8001082:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800108a:	4b4d      	ldr	r3, [pc, #308]	@ (80011c0 <HAL_ADC_Start_DMA+0x1a0>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 031f 	and.w	r3, r3, #31
 8001092:	2b00      	cmp	r3, #0
 8001094:	d004      	beq.n	80010a0 <HAL_ADC_Start_DMA+0x80>
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800109e:	d115      	bne.n	80010cc <HAL_ADC_Start_DMA+0xac>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d027      	beq.n	800110a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010be:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80010c2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010ca:	e01e      	b.n	800110a <HAL_ADC_Start_DMA+0xea>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010e0:	d004      	beq.n	80010ec <HAL_ADC_Start_DMA+0xcc>
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a37      	ldr	r2, [pc, #220]	@ (80011c4 <HAL_ADC_Start_DMA+0x1a4>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d10e      	bne.n	800110a <HAL_ADC_Start_DMA+0xea>
 80010ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d007      	beq.n	800110a <HAL_ADC_Start_DMA+0xea>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001102:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001112:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001116:	d106      	bne.n	8001126 <HAL_ADC_Start_DMA+0x106>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111c:	f023 0206 	bic.w	r2, r3, #6
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	645a      	str	r2, [r3, #68]	@ 0x44
 8001124:	e002      	b.n	800112c <HAL_ADC_Start_DMA+0x10c>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001138:	4a23      	ldr	r2, [pc, #140]	@ (80011c8 <HAL_ADC_Start_DMA+0x1a8>)
 800113a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001140:	4a22      	ldr	r2, [pc, #136]	@ (80011cc <HAL_ADC_Start_DMA+0x1ac>)
 8001142:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001148:	4a21      	ldr	r2, [pc, #132]	@ (80011d0 <HAL_ADC_Start_DMA+0x1b0>)
 800114a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	221c      	movs	r2, #28
 8001152:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f042 0210 	orr.w	r2, r2, #16
 8001162:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68da      	ldr	r2, [r3, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 0201 	orr.w	r2, r2, #1
 8001172:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3340      	adds	r3, #64	@ 0x40
 800117e:	4619      	mov	r1, r3
 8001180:	68ba      	ldr	r2, [r7, #8]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f001 fb5e 	bl	8002844 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0204 	orr.w	r2, r2, #4
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	e00d      	b.n	80011b6 <HAL_ADC_Start_DMA+0x196>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80011a2:	e008      	b.n	80011b6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80011b0:	e001      	b.n	80011b6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011b2:	2302      	movs	r3, #2
 80011b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	50000300 	.word	0x50000300
 80011c4:	50000100 	.word	0x50000100
 80011c8:	08001835 	.word	0x08001835
 80011cc:	080018af 	.word	0x080018af
 80011d0:	080018cb 	.word	0x080018cb

080011d4 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d101      	bne.n	80011f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e05f      	b.n	80012b0 <HAL_ADCEx_Calibration_Start+0xdc>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fbe5 	bl	80019c8 <ADC_Disable>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d14e      	bne.n	80012a6 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 800121c:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d107      	bne.n	8001234 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001232:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001242:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001244:	f7ff fd30 	bl	8000ca8 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800124a:	e01c      	b.n	8001286 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800124c:	f7ff fd2c 	bl	8000ca8 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b0a      	cmp	r3, #10
 8001258:	d915      	bls.n	8001286 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001264:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001268:	d10d      	bne.n	8001286 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f023 0312 	bic.w	r3, r3, #18
 8001272:	f043 0210 	orr.w	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e014      	b.n	80012b0 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001290:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001294:	d0da      	beq.n	800124c <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f023 0303 	bic.w	r3, r3, #3
 800129e:	f043 0201 	orr.w	r2, r3, #1
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b09b      	sub	sp, #108	@ 0x6c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_ADC_ConfigChannel+0x22>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e2a1      	b.n	800181e <HAL_ADC_ConfigChannel+0x566>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f040 8285 	bne.w	80017fc <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d81c      	bhi.n	8001334 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685a      	ldr	r2, [r3, #4]
 8001304:	4613      	mov	r3, r2
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	4413      	add	r3, r2
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	461a      	mov	r2, r3
 800130e:	231f      	movs	r3, #31
 8001310:	4093      	lsls	r3, r2
 8001312:	43db      	mvns	r3, r3
 8001314:	4019      	ands	r1, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	005b      	lsls	r3, r3, #1
 8001326:	fa00 f203 	lsl.w	r2, r0, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	631a      	str	r2, [r3, #48]	@ 0x30
 8001332:	e063      	b.n	80013fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b09      	cmp	r3, #9
 800133a:	d81e      	bhi.n	800137a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	4413      	add	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	3b1e      	subs	r3, #30
 8001350:	221f      	movs	r2, #31
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	4019      	ands	r1, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685a      	ldr	r2, [r3, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	005b      	lsls	r3, r3, #1
 800136a:	3b1e      	subs	r3, #30
 800136c:	fa00 f203 	lsl.w	r2, r0, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	635a      	str	r2, [r3, #52]	@ 0x34
 8001378:	e040      	b.n	80013fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b0e      	cmp	r3, #14
 8001380:	d81e      	bhi.n	80013c0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	4413      	add	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	3b3c      	subs	r3, #60	@ 0x3c
 8001396:	221f      	movs	r2, #31
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	4019      	ands	r1, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	6818      	ldr	r0, [r3, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	4413      	add	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	3b3c      	subs	r3, #60	@ 0x3c
 80013b2:	fa00 f203 	lsl.w	r2, r0, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80013be:	e01d      	b.n	80013fc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685a      	ldr	r2, [r3, #4]
 80013ca:	4613      	mov	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	3b5a      	subs	r3, #90	@ 0x5a
 80013d4:	221f      	movs	r2, #31
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	4019      	ands	r1, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	3b5a      	subs	r3, #90	@ 0x5a
 80013f0:	fa00 f203 	lsl.w	r2, r0, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	430a      	orrs	r2, r1
 80013fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b00      	cmp	r3, #0
 8001408:	f040 80e5 	bne.w	80015d6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2b09      	cmp	r3, #9
 8001412:	d91c      	bls.n	800144e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6999      	ldr	r1, [r3, #24]
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	3b1e      	subs	r3, #30
 8001426:	2207      	movs	r2, #7
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	43db      	mvns	r3, r3
 800142e:	4019      	ands	r1, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	6898      	ldr	r0, [r3, #8]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	3b1e      	subs	r3, #30
 8001440:	fa00 f203 	lsl.w	r2, r0, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	430a      	orrs	r2, r1
 800144a:	619a      	str	r2, [r3, #24]
 800144c:	e019      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6959      	ldr	r1, [r3, #20]
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	2207      	movs	r2, #7
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	4019      	ands	r1, r3
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	6898      	ldr	r0, [r3, #8]
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	fa00 f203 	lsl.w	r2, r0, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	08db      	lsrs	r3, r3, #3
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	3b01      	subs	r3, #1
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d84f      	bhi.n	8001544 <HAL_ADC_ConfigChannel+0x28c>
 80014a4:	a201      	add	r2, pc, #4	@ (adr r2, 80014ac <HAL_ADC_ConfigChannel+0x1f4>)
 80014a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014aa:	bf00      	nop
 80014ac:	080014bd 	.word	0x080014bd
 80014b0:	080014df 	.word	0x080014df
 80014b4:	08001501 	.word	0x08001501
 80014b8:	08001523 	.word	0x08001523
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014c2:	4b9c      	ldr	r3, [pc, #624]	@ (8001734 <HAL_ADC_ConfigChannel+0x47c>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	0691      	lsls	r1, r2, #26
 80014cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014ce:	430a      	orrs	r2, r1
 80014d0:	431a      	orrs	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014da:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014dc:	e07b      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80014e4:	4b93      	ldr	r3, [pc, #588]	@ (8001734 <HAL_ADC_ConfigChannel+0x47c>)
 80014e6:	4013      	ands	r3, r2
 80014e8:	683a      	ldr	r2, [r7, #0]
 80014ea:	6812      	ldr	r2, [r2, #0]
 80014ec:	0691      	lsls	r1, r2, #26
 80014ee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014f0:	430a      	orrs	r2, r1
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80014fc:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80014fe:	e06a      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001506:	4b8b      	ldr	r3, [pc, #556]	@ (8001734 <HAL_ADC_ConfigChannel+0x47c>)
 8001508:	4013      	ands	r3, r2
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	0691      	lsls	r1, r2, #26
 8001510:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001512:	430a      	orrs	r2, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800151e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001520:	e059      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001528:	4b82      	ldr	r3, [pc, #520]	@ (8001734 <HAL_ADC_ConfigChannel+0x47c>)
 800152a:	4013      	ands	r3, r2
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	6812      	ldr	r2, [r2, #0]
 8001530:	0691      	lsls	r1, r2, #26
 8001532:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001534:	430a      	orrs	r2, r1
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001540:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001542:	e048      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	069b      	lsls	r3, r3, #26
 8001554:	429a      	cmp	r2, r3
 8001556:	d107      	bne.n	8001568 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001566:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800156e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	069b      	lsls	r3, r3, #26
 8001578:	429a      	cmp	r2, r3
 800157a:	d107      	bne.n	800158c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800158a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001592:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	069b      	lsls	r3, r3, #26
 800159c:	429a      	cmp	r2, r3
 800159e:	d107      	bne.n	80015b0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015ae:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	069b      	lsls	r3, r3, #26
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d107      	bne.n	80015d4 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80015d2:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80015d4:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d108      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x33e>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d101      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x33e>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_ADC_ConfigChannel+0x340>
 80015f6:	2300      	movs	r3, #0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 810a 	bne.w	8001812 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d00f      	beq.n	8001626 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2201      	movs	r2, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43da      	mvns	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	400a      	ands	r2, r1
 8001620:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001624:	e049      	b.n	80016ba <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2201      	movs	r2, #1
 8001634:	409a      	lsls	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b09      	cmp	r3, #9
 8001646:	d91c      	bls.n	8001682 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6999      	ldr	r1, [r3, #24]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	3b1b      	subs	r3, #27
 800165a:	2207      	movs	r2, #7
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	43db      	mvns	r3, r3
 8001662:	4019      	ands	r1, r3
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	6898      	ldr	r0, [r3, #8]
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	3b1b      	subs	r3, #27
 8001674:	fa00 f203 	lsl.w	r2, r0, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	619a      	str	r2, [r3, #24]
 8001680:	e01b      	b.n	80016ba <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6959      	ldr	r1, [r3, #20]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	2207      	movs	r2, #7
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	4019      	ands	r1, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6898      	ldr	r0, [r3, #8]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	4613      	mov	r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4413      	add	r3, r2
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <HAL_ADC_ConfigChannel+0x480>)
 80016bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d105      	bne.n	80016d2 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d015      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80016d6:	2b11      	cmp	r3, #17
 80016d8:	d105      	bne.n	80016e6 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d00b      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	f040 8091 	bne.w	8001812 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80016f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f040 808a 	bne.w	8001812 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001706:	d102      	bne.n	800170e <HAL_ADC_ConfigChannel+0x456>
 8001708:	4b0c      	ldr	r3, [pc, #48]	@ (800173c <HAL_ADC_ConfigChannel+0x484>)
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	e002      	b.n	8001714 <HAL_ADC_ConfigChannel+0x45c>
 800170e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001712:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d10e      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x488>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0301 	and.w	r3, r3, #1
 800172c:	2b01      	cmp	r3, #1
 800172e:	d107      	bne.n	8001740 <HAL_ADC_ConfigChannel+0x488>
 8001730:	2301      	movs	r3, #1
 8001732:	e006      	b.n	8001742 <HAL_ADC_ConfigChannel+0x48a>
 8001734:	83fff000 	.word	0x83fff000
 8001738:	50000300 	.word	0x50000300
 800173c:	50000100 	.word	0x50000100
 8001740:	2300      	movs	r3, #0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d150      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001746:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001748:	2b00      	cmp	r3, #0
 800174a:	d010      	beq.n	800176e <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d107      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x4b0>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d101      	bne.n	8001768 <HAL_ADC_ConfigChannel+0x4b0>
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_ADC_ConfigChannel+0x4b2>
 8001768:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800176a:	2b00      	cmp	r3, #0
 800176c:	d13c      	bne.n	80017e8 <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2b10      	cmp	r3, #16
 8001774:	d11d      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x4fa>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800177e:	d118      	bne.n	80017b2 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001780:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001788:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800178a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <HAL_ADC_ConfigChannel+0x574>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a27      	ldr	r2, [pc, #156]	@ (8001830 <HAL_ADC_ConfigChannel+0x578>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0c9a      	lsrs	r2, r3, #18
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017a2:	e002      	b.n	80017aa <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f9      	bne.n	80017a4 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017b0:	e02e      	b.n	8001810 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2b11      	cmp	r3, #17
 80017b8:	d10b      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x51a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017c2:	d106      	bne.n	80017d2 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80017c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80017cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017d0:	e01e      	b.n	8001810 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d11a      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80017da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80017e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80017e6:	e013      	b.n	8001810 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ec:	f043 0220 	orr.w	r2, r3, #32
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80017fa:	e00a      	b.n	8001812 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	f043 0220 	orr.w	r2, r3, #32
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800180e:	e000      	b.n	8001812 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001810:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800181a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800181e:	4618      	mov	r0, r3
 8001820:	376c      	adds	r7, #108	@ 0x6c
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000
 8001830:	431bde83 	.word	0x431bde83

08001834 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001840:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800184a:	2b00      	cmp	r3, #0
 800184c:	d126      	bne.n	800189c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001864:	2b00      	cmp	r3, #0
 8001866:	d115      	bne.n	8001894 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800186c:	2b00      	cmp	r3, #0
 800186e:	d111      	bne.n	8001894 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	f043 0201 	orr.w	r2, r3, #1
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f7ff fa13 	bl	8000cc0 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800189a:	e004      	b.n	80018a6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b084      	sub	sp, #16
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80018bc:	68f8      	ldr	r0, [r7, #12]
 80018be:	f7ff fa09 	bl	8000cd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e8:	f043 0204 	orr.w	r2, r3, #4
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff f9f9 	bl	8000ce8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018f6:	bf00      	nop
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
	...

08001900 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <ADC_Enable+0x2c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <ADC_Enable+0x2c>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <ADC_Enable+0x2e>
 800192c:	2300      	movs	r3, #0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d143      	bne.n	80019ba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <ADC_Enable+0xc4>)
 800193a:	4013      	ands	r3, r2
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001944:	f043 0210 	orr.w	r2, r3, #16
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001950:	f043 0201 	orr.w	r2, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e02f      	b.n	80019bc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0201 	orr.w	r2, r2, #1
 800196a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800196c:	f7ff f99c 	bl	8000ca8 <HAL_GetTick>
 8001970:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001972:	e01b      	b.n	80019ac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001974:	f7ff f998 	bl	8000ca8 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d914      	bls.n	80019ac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	2b01      	cmp	r3, #1
 800198e:	d00d      	beq.n	80019ac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001994:	f043 0210 	orr.w	r2, r3, #16
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a0:	f043 0201 	orr.w	r2, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e007      	b.n	80019bc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d1dc      	bne.n	8001974 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	8000003f 	.word	0x8000003f

080019c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <ADC_Disable+0x2c>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0301 	and.w	r3, r3, #1
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d101      	bne.n	80019f4 <ADC_Disable+0x2c>
 80019f0:	2301      	movs	r3, #1
 80019f2:	e000      	b.n	80019f6 <ADC_Disable+0x2e>
 80019f4:	2300      	movs	r3, #0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d047      	beq.n	8001a8a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	f003 030d 	and.w	r3, r3, #13
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d10f      	bne.n	8001a28 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689a      	ldr	r2, [r3, #8]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f042 0202 	orr.w	r2, r2, #2
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001a20:	f7ff f942 	bl	8000ca8 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a26:	e029      	b.n	8001a7c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f043 0210 	orr.w	r2, r3, #16
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a38:	f043 0201 	orr.w	r2, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e023      	b.n	8001a8c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a44:	f7ff f930 	bl	8000ca8 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d914      	bls.n	8001a7c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10d      	bne.n	8001a7c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a64:	f043 0210 	orr.w	r2, r3, #16
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a70:	f043 0201 	orr.w	r2, r3, #1
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e007      	b.n	8001a8c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d0dc      	beq.n	8001a44 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0ed      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7fe ff06 	bl	80008c4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac8:	f7ff f8ee 	bl	8000ca8 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ace:	e012      	b.n	8001af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad0:	f7ff f8ea 	bl	8000ca8 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b0a      	cmp	r3, #10
 8001adc:	d90b      	bls.n	8001af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2205      	movs	r2, #5
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0c5      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0e5      	beq.n	8001ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f022 0202 	bic.w	r2, r2, #2
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b14:	f7ff f8c8 	bl	8000ca8 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b1a:	e012      	b.n	8001b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b1c:	f7ff f8c4 	bl	8000ca8 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b0a      	cmp	r3, #10
 8001b28:	d90b      	bls.n	8001b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e09f      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1e5      	bne.n	8001b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e1b      	ldrb	r3, [r3, #24]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7e5b      	ldrb	r3, [r3, #25]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e9b      	ldrb	r3, [r3, #26]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0220 	bic.w	r2, r2, #32
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7edb      	ldrb	r3, [r3, #27]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0210 	bic.w	r2, r2, #16
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0210 	orr.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7f1b      	ldrb	r3, [r3, #28]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d108      	bne.n	8001c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0208 	orr.w	r2, r2, #8
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e007      	b.n	8001c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0208 	bic.w	r2, r2, #8
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7f5b      	ldrb	r3, [r3, #29]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0204 	orr.w	r2, r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0204 	bic.w	r2, r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	ea42 0103 	orr.w	r1, r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	1e5a      	subs	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b087      	sub	sp, #28
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca2:	7cfb      	ldrb	r3, [r7, #19]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d003      	beq.n	8001cb0 <HAL_CAN_ConfigFilter+0x26>
 8001ca8:	7cfb      	ldrb	r3, [r7, #19]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	f040 80aa 	bne.w	8001e04 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	695b      	ldr	r3, [r3, #20]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	2201      	movs	r2, #1
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d123      	bne.n	8001d32 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d0c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3248      	adds	r2, #72	@ 0x48
 8001d12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d26:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	3348      	adds	r3, #72	@ 0x48
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d122      	bne.n	8001d80 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	431a      	orrs	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d5a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	3248      	adds	r2, #72	@ 0x48
 8001d60:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d74:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d76:	6979      	ldr	r1, [r7, #20]
 8001d78:	3348      	adds	r3, #72	@ 0x48
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	440b      	add	r3, r1
 8001d7e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d109      	bne.n	8001d9c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001d9a:	e007      	b.n	8001dac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d109      	bne.n	8001dc8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001dc6:	e007      	b.n	8001dd8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d107      	bne.n	8001df0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001df6:	f023 0201 	bic.w	r2, r3, #1
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e006      	b.n	8001e12 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e08:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
  }
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	371c      	adds	r7, #28
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d12e      	bne.n	8001e90 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2202      	movs	r2, #2
 8001e36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0201 	bic.w	r2, r2, #1
 8001e48:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e4a:	f7fe ff2d 	bl	8000ca8 <HAL_GetTick>
 8001e4e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e50:	e012      	b.n	8001e78 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e52:	f7fe ff29 	bl	8000ca8 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b0a      	cmp	r3, #10
 8001e5e:	d90b      	bls.n	8001e78 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e64:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2205      	movs	r2, #5
 8001e70:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e012      	b.n	8001e9e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1e5      	bne.n	8001e52 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e006      	b.n	8001e9e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e94:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
  }
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b087      	sub	sp, #28
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ebc:	7dfb      	ldrb	r3, [r7, #23]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d003      	beq.n	8001eca <HAL_CAN_GetRxMessage+0x24>
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	f040 8103 	bne.w	80020d0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d10e      	bne.n	8001eee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d116      	bne.n	8001f0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e0f7      	b.n	80020de <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	691b      	ldr	r3, [r3, #16]
 8001ef4:	f003 0303 	and.w	r3, r3, #3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f00:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0e8      	b.n	80020de <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	331b      	adds	r3, #27
 8001f14:	011b      	lsls	r3, r3, #4
 8001f16:	4413      	add	r3, r2
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0204 	and.w	r2, r3, #4
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10c      	bne.n	8001f44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	331b      	adds	r3, #27
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0d5b      	lsrs	r3, r3, #21
 8001f3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	e00b      	b.n	8001f5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	331b      	adds	r3, #27
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4413      	add	r3, r2
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	08db      	lsrs	r3, r3, #3
 8001f54:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	331b      	adds	r3, #27
 8001f64:	011b      	lsls	r3, r3, #4
 8001f66:	4413      	add	r3, r2
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0202 	and.w	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	331b      	adds	r3, #27
 8001f7a:	011b      	lsls	r3, r3, #4
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3304      	adds	r3, #4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	e00b      	b.n	8001faa <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	331b      	adds	r3, #27
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 020f 	and.w	r2, r3, #15
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	331b      	adds	r3, #27
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	331b      	adds	r3, #27
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	4413      	add	r3, r2
 8001fce:	3304      	adds	r3, #4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0a1a      	lsrs	r2, r3, #8
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	3301      	adds	r3, #1
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	011b      	lsls	r3, r3, #4
 8002012:	4413      	add	r3, r2
 8002014:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0c1a      	lsrs	r2, r3, #16
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3302      	adds	r3, #2
 8002020:	b2d2      	uxtb	r2, r2
 8002022:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	4413      	add	r3, r2
 800202e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0e1a      	lsrs	r2, r3, #24
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	3303      	adds	r3, #3
 800203a:	b2d2      	uxtb	r2, r2
 800203c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4413      	add	r3, r2
 8002048:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	3304      	adds	r3, #4
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	011b      	lsls	r3, r3, #4
 800205e:	4413      	add	r3, r2
 8002060:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	0a1a      	lsrs	r2, r3, #8
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	3305      	adds	r3, #5
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	4413      	add	r3, r2
 800207a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	0c1a      	lsrs	r2, r3, #16
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	3306      	adds	r3, #6
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	011b      	lsls	r3, r3, #4
 8002092:	4413      	add	r3, r2
 8002094:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	0e1a      	lsrs	r2, r3, #24
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	3307      	adds	r3, #7
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d108      	bne.n	80020bc <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68da      	ldr	r2, [r3, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	e007      	b.n	80020cc <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0220 	orr.w	r2, r2, #32
 80020ca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e006      	b.n	80020de <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
  }
}
 80020de:	4618      	mov	r0, r3
 80020e0:	371c      	adds	r7, #28
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020fa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d002      	beq.n	8002108 <HAL_CAN_ActivateNotification+0x1e>
 8002102:	7bfb      	ldrb	r3, [r7, #15]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d109      	bne.n	800211c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6959      	ldr	r1, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002118:	2300      	movs	r3, #0
 800211a:	e006      	b.n	800212a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b08a      	sub	sp, #40	@ 0x28
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	695b      	ldr	r3, [r3, #20]
 8002148:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d07c      	beq.n	8002276 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d023      	beq.n	80021ce <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2201      	movs	r2, #1
 800218c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f983 	bl	80024a4 <HAL_CAN_TxMailbox0CompleteCallback>
 800219e:	e016      	b.n	80021ce <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021b2:	e00c      	b.n	80021ce <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021c6:	e002      	b.n	80021ce <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f989 	bl	80024e0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d024      	beq.n	8002222 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80021e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 f963 	bl	80024b8 <HAL_CAN_TxMailbox1CompleteCallback>
 80021f2:	e016      	b.n	8002222 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
 8002206:	e00c      	b.n	8002222 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800220e:	2b00      	cmp	r3, #0
 8002210:	d004      	beq.n	800221c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
 800221a:	e002      	b.n	8002222 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f000 f969 	bl	80024f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d024      	beq.n	8002276 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002234:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f943 	bl	80024cc <HAL_CAN_TxMailbox2CompleteCallback>
 8002246:	e016      	b.n	8002276 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
 800225a:	e00c      	b.n	8002276 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d004      	beq.n	8002270 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800226c:	627b      	str	r3, [r7, #36]	@ 0x24
 800226e:	e002      	b.n	8002276 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 f949 	bl	8002508 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00c      	beq.n	800229a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f003 0310 	and.w	r3, r3, #16
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800228a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2210      	movs	r2, #16
 8002298:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	f003 0304 	and.w	r3, r3, #4
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d00b      	beq.n	80022bc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2208      	movs	r2, #8
 80022b4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 f930 	bl	800251c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f7fd ffcb 	bl	8000270 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00c      	beq.n	80022fe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d007      	beq.n	80022fe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2210      	movs	r2, #16
 80022fc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80022fe:	6a3b      	ldr	r3, [r7, #32]
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	2b00      	cmp	r3, #0
 8002306:	d00b      	beq.n	8002320 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2208      	movs	r2, #8
 8002318:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f912 	bl	8002544 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0303 	and.w	r3, r3, #3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d002      	beq.n	800233e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f8f9 	bl	8002530 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00b      	beq.n	8002360 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0310 	and.w	r3, r3, #16
 800234e:	2b00      	cmp	r3, #0
 8002350:	d006      	beq.n	8002360 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2210      	movs	r2, #16
 8002358:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f8fc 	bl	8002558 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00b      	beq.n	8002382 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d006      	beq.n	8002382 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2208      	movs	r2, #8
 800237a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f8f5 	bl	800256c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d07b      	beq.n	8002484 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b00      	cmp	r3, #0
 8002394:	d072      	beq.n	800247c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d008      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d003      	beq.n	80023ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d003      	beq.n	80023ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	f043 0304 	orr.w	r3, r3, #4
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d043      	beq.n	800247c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d03e      	beq.n	800247c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002404:	2b60      	cmp	r3, #96	@ 0x60
 8002406:	d02b      	beq.n	8002460 <HAL_CAN_IRQHandler+0x32a>
 8002408:	2b60      	cmp	r3, #96	@ 0x60
 800240a:	d82e      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 800240c:	2b50      	cmp	r3, #80	@ 0x50
 800240e:	d022      	beq.n	8002456 <HAL_CAN_IRQHandler+0x320>
 8002410:	2b50      	cmp	r3, #80	@ 0x50
 8002412:	d82a      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 8002414:	2b40      	cmp	r3, #64	@ 0x40
 8002416:	d019      	beq.n	800244c <HAL_CAN_IRQHandler+0x316>
 8002418:	2b40      	cmp	r3, #64	@ 0x40
 800241a:	d826      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 800241c:	2b30      	cmp	r3, #48	@ 0x30
 800241e:	d010      	beq.n	8002442 <HAL_CAN_IRQHandler+0x30c>
 8002420:	2b30      	cmp	r3, #48	@ 0x30
 8002422:	d822      	bhi.n	800246a <HAL_CAN_IRQHandler+0x334>
 8002424:	2b10      	cmp	r3, #16
 8002426:	d002      	beq.n	800242e <HAL_CAN_IRQHandler+0x2f8>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d005      	beq.n	8002438 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800242c:	e01d      	b.n	800246a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	f043 0308 	orr.w	r3, r3, #8
 8002434:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002436:	e019      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002440:	e014      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002444:	f043 0320 	orr.w	r3, r3, #32
 8002448:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800244a:	e00f      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002452:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002454:	e00a      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800245c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800245e:	e005      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002466:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002468:	e000      	b.n	800246c <HAL_CAN_IRQHandler+0x336>
            break;
 800246a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	699a      	ldr	r2, [r3, #24]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800247a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2204      	movs	r2, #4
 8002482:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 f872 	bl	8002580 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	@ 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr

0800251c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	@ (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	@ (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	@ (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	@ (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	@ 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	@ 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	@ (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b084      	sub	sp, #16
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e037      	b.n	800283c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80027e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80027e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f940 	bl	8002aa4 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2201      	movs	r2, #1
 800282e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 3020 	ldrb.w	r3, [r3, #32]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_DMA_Start_IT+0x20>
 8002860:	2302      	movs	r3, #2
 8002862:	e04a      	b.n	80028fa <HAL_DMA_Start_IT+0xb6>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002872:	2b01      	cmp	r3, #1
 8002874:	d13a      	bne.n	80028ec <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f8d4 	bl	8002a48 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d008      	beq.n	80028ba <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 020e 	orr.w	r2, r2, #14
 80028b6:	601a      	str	r2, [r3, #0]
 80028b8:	e00f      	b.n	80028da <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 020a 	orr.w	r2, r2, #10
 80028c8:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0204 	bic.w	r2, r2, #4
 80028d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
 80028ea:	e005      	b.n	80028f8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
 80028f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b084      	sub	sp, #16
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	2204      	movs	r2, #4
 8002920:	409a      	lsls	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4013      	ands	r3, r2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d024      	beq.n	8002974 <HAL_DMA_IRQHandler+0x72>
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01f      	beq.n	8002974 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0320 	and.w	r3, r3, #32
 800293e:	2b00      	cmp	r3, #0
 8002940:	d107      	bne.n	8002952 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0204 	bic.w	r2, r2, #4
 8002950:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295a:	2104      	movs	r1, #4
 800295c:	fa01 f202 	lsl.w	r2, r1, r2
 8002960:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002966:	2b00      	cmp	r3, #0
 8002968:	d06a      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002972:	e065      	b.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	2202      	movs	r2, #2
 800297a:	409a      	lsls	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d02c      	beq.n	80029de <HAL_DMA_IRQHandler+0xdc>
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d027      	beq.n	80029de <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0320 	and.w	r3, r3, #32
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10b      	bne.n	80029b4 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 020a 	bic.w	r2, r2, #10
 80029aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029bc:	2102      	movs	r1, #2
 80029be:	fa01 f202 	lsl.w	r2, r1, r2
 80029c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d035      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80029dc:	e030      	b.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	2208      	movs	r2, #8
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d028      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d023      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 020e 	bic.w	r2, r2, #14
 8002a06:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a10:	2101      	movs	r1, #1
 8002a12:	fa01 f202 	lsl.w	r2, r1, r2
 8002a16:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2201      	movs	r2, #1
 8002a22:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
    }
  }
}
 8002a3e:	e7ff      	b.n	8002a40 <HAL_DMA_IRQHandler+0x13e>
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a5e:	2101      	movs	r1, #1
 8002a60:	fa01 f202 	lsl.w	r2, r1, r2
 8002a64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	683a      	ldr	r2, [r7, #0]
 8002a6c:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d108      	bne.n	8002a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a86:	e007      	b.n	8002a98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	60da      	str	r2, [r3, #12]
}
 8002a98:	bf00      	nop
 8002a9a:	3714      	adds	r7, #20
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4b09      	ldr	r3, [pc, #36]	@ (8002ad8 <DMA_CalcBaseAndBitshift+0x34>)
 8002ab4:	4413      	add	r3, r2
 8002ab6:	4a09      	ldr	r2, [pc, #36]	@ (8002adc <DMA_CalcBaseAndBitshift+0x38>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	009a      	lsls	r2, r3, #2
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a06      	ldr	r2, [pc, #24]	@ (8002ae0 <DMA_CalcBaseAndBitshift+0x3c>)
 8002ac8:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	bffdfff8 	.word	0xbffdfff8
 8002adc:	cccccccd 	.word	0xcccccccd
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b087      	sub	sp, #28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002af2:	e14e      	b.n	8002d92 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2101      	movs	r1, #1
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	fa01 f303 	lsl.w	r3, r1, r3
 8002b00:	4013      	ands	r3, r2
 8002b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 8140 	beq.w	8002d8c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d005      	beq.n	8002b24 <HAL_GPIO_Init+0x40>
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d130      	bne.n	8002b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	2203      	movs	r2, #3
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	68da      	ldr	r2, [r3, #12]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 0201 	and.w	r2, r3, #1
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d017      	beq.n	8002bc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0303 	and.w	r3, r3, #3
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d123      	bne.n	8002c16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	08da      	lsrs	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3208      	adds	r2, #8
 8002bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	220f      	movs	r2, #15
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	08da      	lsrs	r2, r3, #3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3208      	adds	r2, #8
 8002c10:	6939      	ldr	r1, [r7, #16]
 8002c12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0203 	and.w	r2, r3, #3
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 809a 	beq.w	8002d8c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c58:	4b55      	ldr	r3, [pc, #340]	@ (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	4a54      	ldr	r2, [pc, #336]	@ (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	6193      	str	r3, [r2, #24]
 8002c64:	4b52      	ldr	r3, [pc, #328]	@ (8002db0 <HAL_GPIO_Init+0x2cc>)
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c70:	4a50      	ldr	r2, [pc, #320]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002c9a:	d013      	beq.n	8002cc4 <HAL_GPIO_Init+0x1e0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a46      	ldr	r2, [pc, #280]	@ (8002db8 <HAL_GPIO_Init+0x2d4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00d      	beq.n	8002cc0 <HAL_GPIO_Init+0x1dc>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a45      	ldr	r2, [pc, #276]	@ (8002dbc <HAL_GPIO_Init+0x2d8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <HAL_GPIO_Init+0x1d8>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a44      	ldr	r2, [pc, #272]	@ (8002dc0 <HAL_GPIO_Init+0x2dc>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d101      	bne.n	8002cb8 <HAL_GPIO_Init+0x1d4>
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e006      	b.n	8002cc6 <HAL_GPIO_Init+0x1e2>
 8002cb8:	2305      	movs	r3, #5
 8002cba:	e004      	b.n	8002cc6 <HAL_GPIO_Init+0x1e2>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e002      	b.n	8002cc6 <HAL_GPIO_Init+0x1e2>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_GPIO_Init+0x1e2>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	f002 0203 	and.w	r2, r2, #3
 8002ccc:	0092      	lsls	r2, r2, #2
 8002cce:	4093      	lsls	r3, r2
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cd6:	4937      	ldr	r1, [pc, #220]	@ (8002db4 <HAL_GPIO_Init+0x2d0>)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	089b      	lsrs	r3, r3, #2
 8002cdc:	3302      	adds	r3, #2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce4:	4b37      	ldr	r3, [pc, #220]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d08:	4a2e      	ldr	r2, [pc, #184]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d0e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d32:	4a24      	ldr	r2, [pc, #144]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d38:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d5c:	4a19      	ldr	r2, [pc, #100]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d86:	4a0f      	ldr	r2, [pc, #60]	@ (8002dc4 <HAL_GPIO_Init+0x2e0>)
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f47f aea9 	bne.w	8002af4 <HAL_GPIO_Init+0x10>
  }
}
 8002da2:	bf00      	nop
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40010000 	.word	0x40010000
 8002db8:	48000400 	.word	0x48000400
 8002dbc:	48000800 	.word	0x48000800
 8002dc0:	48000c00 	.word	0x48000c00
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dd4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002dde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f001 b823 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f000 817d 	beq.w	80030fe <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e04:	4bbc      	ldr	r3, [pc, #752]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d00c      	beq.n	8002e2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e10:	4bb9      	ldr	r3, [pc, #740]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 030c 	and.w	r3, r3, #12
 8002e18:	2b08      	cmp	r3, #8
 8002e1a:	d15c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x10e>
 8002e1c:	4bb6      	ldr	r3, [pc, #728]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e28:	d155      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x10e>
 8002e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e2e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002e36:	fa93 f3a3 	rbit	r3, r3
 8002e3a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e3e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d102      	bne.n	8002e5c <HAL_RCC_OscConfig+0x94>
 8002e56:	4ba8      	ldr	r3, [pc, #672]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	e015      	b.n	8002e88 <HAL_RCC_OscConfig+0xc0>
 8002e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e60:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e74:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002e78:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002e84:	4b9c      	ldr	r3, [pc, #624]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e8c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002e90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002e94:	fa92 f2a2 	rbit	r2, r2
 8002e98:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002e9c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ea0:	fab2 f282 	clz	r2, r2
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	f042 0220 	orr.w	r2, r2, #32
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	f002 021f 	and.w	r2, r2, #31
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 811f 	beq.w	80030fc <HAL_RCC_OscConfig+0x334>
 8002ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ec2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 8116 	bne.w	80030fc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f000 bfaf 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x12e>
 8002ee8:	4b83      	ldr	r3, [pc, #524]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a82      	ldr	r2, [pc, #520]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	e036      	b.n	8002f64 <HAL_RCC_OscConfig+0x19c>
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x158>
 8002f06:	4b7c      	ldr	r3, [pc, #496]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a7b      	ldr	r2, [pc, #492]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b79      	ldr	r3, [pc, #484]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a78      	ldr	r2, [pc, #480]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e021      	b.n	8002f64 <HAL_RCC_OscConfig+0x19c>
 8002f20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f30:	d10c      	bne.n	8002f4c <HAL_RCC_OscConfig+0x184>
 8002f32:	4b71      	ldr	r3, [pc, #452]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a70      	ldr	r2, [pc, #448]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a6d      	ldr	r2, [pc, #436]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCC_OscConfig+0x19c>
 8002f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a69      	ldr	r2, [pc, #420]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	4b67      	ldr	r3, [pc, #412]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a66      	ldr	r2, [pc, #408]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f62:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f64:	4b64      	ldr	r3, [pc, #400]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f68:	f023 020f 	bic.w	r2, r3, #15
 8002f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	495f      	ldr	r1, [pc, #380]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f82:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d059      	beq.n	8003042 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fd fe8b 	bl	8000ca8 <HAL_GetTick>
 8002f92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	e00a      	b.n	8002fae <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fd fe86 	bl	8000ca8 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	@ 0x64
 8002fa6:	d902      	bls.n	8002fae <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	f000 bf43 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
 8002fae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fb2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002fba:	fa93 f3a3 	rbit	r3, r3
 8002fbe:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002fc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	fab3 f383 	clz	r3, r3
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	095b      	lsrs	r3, r3, #5
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f043 0301 	orr.w	r3, r3, #1
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d102      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x218>
 8002fda:	4b47      	ldr	r3, [pc, #284]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	e015      	b.n	800300c <HAL_RCC_OscConfig+0x244>
 8002fe0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fe4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002ff4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ff8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002ffc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8003000:	fa93 f3a3 	rbit	r3, r3
 8003004:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8003008:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 800300a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003010:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8003014:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003018:	fa92 f2a2 	rbit	r2, r2
 800301c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003020:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003024:	fab2 f282 	clz	r2, r2
 8003028:	b2d2      	uxtb	r2, r2
 800302a:	f042 0220 	orr.w	r2, r2, #32
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f002 021f 	and.w	r2, r2, #31
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	4013      	ands	r3, r2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0ab      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1d0>
 8003040:	e05d      	b.n	80030fe <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fd fe31 	bl	8000ca8 <HAL_GetTick>
 8003046:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304a:	e00a      	b.n	8003062 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fd fe2c 	bl	8000ca8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b64      	cmp	r3, #100	@ 0x64
 800305a:	d902      	bls.n	8003062 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	f000 bee9 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
 8003062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003066:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003076:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307a:	fab3 f383 	clz	r3, r3
 800307e:	b2db      	uxtb	r3, r3
 8003080:	095b      	lsrs	r3, r3, #5
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <HAL_RCC_OscConfig+0x2cc>
 800308e:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	e015      	b.n	80030c0 <HAL_RCC_OscConfig+0x2f8>
 8003094:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003098:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80030a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80030ac:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80030b0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80030b4:	fa93 f3a3 	rbit	r3, r3
 80030b8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <HAL_RCC_OscConfig+0x330>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80030c4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80030c8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80030cc:	fa92 f2a2 	rbit	r2, r2
 80030d0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80030d4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80030d8:	fab2 f282 	clz	r2, r2
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	f042 0220 	orr.w	r2, r2, #32
 80030e2:	b2d2      	uxtb	r2, r2
 80030e4:	f002 021f 	and.w	r2, r2, #31
 80030e8:	2101      	movs	r1, #1
 80030ea:	fa01 f202 	lsl.w	r2, r1, r2
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1ab      	bne.n	800304c <HAL_RCC_OscConfig+0x284>
 80030f4:	e003      	b.n	80030fe <HAL_RCC_OscConfig+0x336>
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003102:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 817d 	beq.w	800340e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003114:	4ba6      	ldr	r3, [pc, #664]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00b      	beq.n	8003138 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003120:	4ba3      	ldr	r3, [pc, #652]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d172      	bne.n	8003212 <HAL_RCC_OscConfig+0x44a>
 800312c:	4ba0      	ldr	r3, [pc, #640]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d16c      	bne.n	8003212 <HAL_RCC_OscConfig+0x44a>
 8003138:	2302      	movs	r3, #2
 800313a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003142:	fa93 f3a3 	rbit	r3, r3
 8003146:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800314a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800314e:	fab3 f383 	clz	r3, r3
 8003152:	b2db      	uxtb	r3, r3
 8003154:	095b      	lsrs	r3, r3, #5
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b01      	cmp	r3, #1
 8003160:	d102      	bne.n	8003168 <HAL_RCC_OscConfig+0x3a0>
 8003162:	4b93      	ldr	r3, [pc, #588]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	e013      	b.n	8003190 <HAL_RCC_OscConfig+0x3c8>
 8003168:	2302      	movs	r3, #2
 800316a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003172:	fa93 f3a3 	rbit	r3, r3
 8003176:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800317a:	2302      	movs	r3, #2
 800317c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003180:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800318c:	4b88      	ldr	r3, [pc, #544]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003190:	2202      	movs	r2, #2
 8003192:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003196:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800319a:	fa92 f2a2 	rbit	r2, r2
 800319e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80031a2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80031a6:	fab2 f282 	clz	r2, r2
 80031aa:	b2d2      	uxtb	r2, r2
 80031ac:	f042 0220 	orr.w	r2, r2, #32
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	f002 021f 	and.w	r2, r2, #31
 80031b6:	2101      	movs	r1, #1
 80031b8:	fa01 f202 	lsl.w	r2, r1, r2
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <HAL_RCC_OscConfig+0x410>
 80031c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f000 be2e 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d8:	4b75      	ldr	r3, [pc, #468]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	21f8      	movs	r1, #248	@ 0xf8
 80031ee:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80031f6:	fa91 f1a1 	rbit	r1, r1
 80031fa:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80031fe:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003202:	fab1 f181 	clz	r1, r1
 8003206:	b2c9      	uxtb	r1, r1
 8003208:	408b      	lsls	r3, r1
 800320a:	4969      	ldr	r1, [pc, #420]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003210:	e0fd      	b.n	800340e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003212:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003216:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	f000 8088 	beq.w	8003334 <HAL_RCC_OscConfig+0x56c>
 8003224:	2301      	movs	r3, #1
 8003226:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800322e:	fa93 f3a3 	rbit	r3, r3
 8003232:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003236:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003244:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	461a      	mov	r2, r3
 800324c:	2301      	movs	r3, #1
 800324e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003250:	f7fd fd2a 	bl	8000ca8 <HAL_GetTick>
 8003254:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003258:	e00a      	b.n	8003270 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800325a:	f7fd fd25 	bl	8000ca8 <HAL_GetTick>
 800325e:	4602      	mov	r2, r0
 8003260:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b02      	cmp	r3, #2
 8003268:	d902      	bls.n	8003270 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	f000 bde2 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
 8003270:	2302      	movs	r3, #2
 8003272:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003276:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800327a:	fa93 f3a3 	rbit	r3, r3
 800327e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003282:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	fab3 f383 	clz	r3, r3
 800328a:	b2db      	uxtb	r3, r3
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f043 0301 	orr.w	r3, r3, #1
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d102      	bne.n	80032a0 <HAL_RCC_OscConfig+0x4d8>
 800329a:	4b45      	ldr	r3, [pc, #276]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	e013      	b.n	80032c8 <HAL_RCC_OscConfig+0x500>
 80032a0:	2302      	movs	r3, #2
 80032a2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80032b2:	2302      	movs	r3, #2
 80032b4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80032b8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80032c4:	4b3a      	ldr	r3, [pc, #232]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 80032c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c8:	2202      	movs	r2, #2
 80032ca:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80032ce:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80032d2:	fa92 f2a2 	rbit	r2, r2
 80032d6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80032da:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80032de:	fab2 f282 	clz	r2, r2
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	f042 0220 	orr.w	r2, r2, #32
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	f002 021f 	and.w	r2, r2, #31
 80032ee:	2101      	movs	r1, #1
 80032f0:	fa01 f202 	lsl.w	r2, r1, r2
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0af      	beq.n	800325a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fa:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	21f8      	movs	r1, #248	@ 0xf8
 8003310:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003318:	fa91 f1a1 	rbit	r1, r1
 800331c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003320:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003324:	fab1 f181 	clz	r1, r1
 8003328:	b2c9      	uxtb	r1, r1
 800332a:	408b      	lsls	r3, r1
 800332c:	4920      	ldr	r1, [pc, #128]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 800332e:	4313      	orrs	r3, r2
 8003330:	600b      	str	r3, [r1, #0]
 8003332:	e06c      	b.n	800340e <HAL_RCC_OscConfig+0x646>
 8003334:	2301      	movs	r3, #1
 8003336:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800333e:	fa93 f3a3 	rbit	r3, r3
 8003342:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003346:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800334a:	fab3 f383 	clz	r3, r3
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003354:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	461a      	mov	r2, r3
 800335c:	2300      	movs	r3, #0
 800335e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003360:	f7fd fca2 	bl	8000ca8 <HAL_GetTick>
 8003364:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003368:	e00a      	b.n	8003380 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800336a:	f7fd fc9d 	bl	8000ca8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	f000 bd5a 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003392:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	fab3 f383 	clz	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d104      	bne.n	80033b4 <HAL_RCC_OscConfig+0x5ec>
 80033aa:	4b01      	ldr	r3, [pc, #4]	@ (80033b0 <HAL_RCC_OscConfig+0x5e8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	e015      	b.n	80033dc <HAL_RCC_OscConfig+0x614>
 80033b0:	40021000 	.word	0x40021000
 80033b4:	2302      	movs	r3, #2
 80033b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80033be:	fa93 f3a3 	rbit	r3, r3
 80033c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80033c6:	2302      	movs	r3, #2
 80033c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80033cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80033d0:	fa93 f3a3 	rbit	r3, r3
 80033d4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80033d8:	4bc8      	ldr	r3, [pc, #800]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	2202      	movs	r2, #2
 80033de:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80033e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80033e6:	fa92 f2a2 	rbit	r2, r2
 80033ea:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80033ee:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80033f2:	fab2 f282 	clz	r2, r2
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	f042 0220 	orr.w	r2, r2, #32
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	f002 021f 	and.w	r2, r2, #31
 8003402:	2101      	movs	r1, #1
 8003404:	fa01 f202 	lsl.w	r2, r1, r2
 8003408:	4013      	ands	r3, r2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1ad      	bne.n	800336a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 8110 	beq.w	8003644 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003424:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003428:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d079      	beq.n	8003528 <HAL_RCC_OscConfig+0x760>
 8003434:	2301      	movs	r3, #1
 8003436:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003446:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	461a      	mov	r2, r3
 8003452:	4bab      	ldr	r3, [pc, #684]	@ (8003700 <HAL_RCC_OscConfig+0x938>)
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	461a      	mov	r2, r3
 800345a:	2301      	movs	r3, #1
 800345c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345e:	f7fd fc23 	bl	8000ca8 <HAL_GetTick>
 8003462:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003468:	f7fd fc1e 	bl	8000ca8 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d902      	bls.n	800347e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	f000 bcdb 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
 800347e:	2302      	movs	r3, #2
 8003480:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003484:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003488:	fa93 f3a3 	rbit	r3, r3
 800348c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003494:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003498:	2202      	movs	r2, #2
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	fa93 f2a3 	rbit	r2, r3
 80034aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034bc:	2202      	movs	r2, #2
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	fa93 f2a3 	rbit	r2, r3
 80034ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80034d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d8:	4b88      	ldr	r3, [pc, #544]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 80034da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034e4:	2102      	movs	r1, #2
 80034e6:	6019      	str	r1, [r3, #0]
 80034e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ec:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	fa93 f1a3 	rbit	r1, r3
 80034f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034fa:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80034fe:	6019      	str	r1, [r3, #0]
  return result;
 8003500:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003504:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 031f 	and.w	r3, r3, #31
 800351a:	2101      	movs	r1, #1
 800351c:	fa01 f303 	lsl.w	r3, r1, r3
 8003520:	4013      	ands	r3, r2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0a0      	beq.n	8003468 <HAL_RCC_OscConfig+0x6a0>
 8003526:	e08d      	b.n	8003644 <HAL_RCC_OscConfig+0x87c>
 8003528:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800352c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003534:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003538:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	fa93 f2a3 	rbit	r2, r3
 8003542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003546:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800354a:	601a      	str	r2, [r3, #0]
  return result;
 800354c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003550:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003554:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003556:	fab3 f383 	clz	r3, r3
 800355a:	b2db      	uxtb	r3, r3
 800355c:	461a      	mov	r2, r3
 800355e:	4b68      	ldr	r3, [pc, #416]	@ (8003700 <HAL_RCC_OscConfig+0x938>)
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	461a      	mov	r2, r3
 8003566:	2300      	movs	r3, #0
 8003568:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800356a:	f7fd fb9d 	bl	8000ca8 <HAL_GetTick>
 800356e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003572:	e00a      	b.n	800358a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003574:	f7fd fb98 	bl	8000ca8 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d902      	bls.n	800358a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	f000 bc55 	b.w	8003e34 <HAL_RCC_OscConfig+0x106c>
 800358a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800358e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003592:	2202      	movs	r2, #2
 8003594:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800359a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	fa93 f2a3 	rbit	r2, r3
 80035a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035b6:	2202      	movs	r2, #2
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035be:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	fa93 f2a3 	rbit	r2, r3
 80035c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035da:	2202      	movs	r2, #2
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	fa93 f2a3 	rbit	r2, r3
 80035ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80035f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f6:	4b41      	ldr	r3, [pc, #260]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 80035f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003602:	2102      	movs	r1, #2
 8003604:	6019      	str	r1, [r3, #0]
 8003606:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800360a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	fa93 f1a3 	rbit	r1, r3
 8003614:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003618:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800361c:	6019      	str	r1, [r3, #0]
  return result;
 800361e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003622:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	fab3 f383 	clz	r3, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003632:	b2db      	uxtb	r3, r3
 8003634:	f003 031f 	and.w	r3, r3, #31
 8003638:	2101      	movs	r1, #1
 800363a:	fa01 f303 	lsl.w	r3, r1, r3
 800363e:	4013      	ands	r3, r2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d197      	bne.n	8003574 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003648:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 81a1 	beq.w	800399c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365a:	2300      	movs	r3, #0
 800365c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003660:	4b26      	ldr	r3, [pc, #152]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d116      	bne.n	800369a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800366c:	4b23      	ldr	r3, [pc, #140]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 8003672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003676:	61d3      	str	r3, [r2, #28]
 8003678:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003680:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003684:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003692:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003694:	2301      	movs	r3, #1
 8003696:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b1a      	ldr	r3, [pc, #104]	@ (8003704 <HAL_RCC_OscConfig+0x93c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d11a      	bne.n	80036dc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a6:	4b17      	ldr	r3, [pc, #92]	@ (8003704 <HAL_RCC_OscConfig+0x93c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <HAL_RCC_OscConfig+0x93c>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7fd faf9 	bl	8000ca8 <HAL_GetTick>
 80036b6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ba:	e009      	b.n	80036d0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036bc:	f7fd faf4 	bl	8000ca8 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b64      	cmp	r3, #100	@ 0x64
 80036ca:	d901      	bls.n	80036d0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e3b1      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003704 <HAL_RCC_OscConfig+0x93c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d0ef      	beq.n	80036bc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10d      	bne.n	8003708 <HAL_RCC_OscConfig+0x940>
 80036ec:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	4a02      	ldr	r2, [pc, #8]	@ (80036fc <HAL_RCC_OscConfig+0x934>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6213      	str	r3, [r2, #32]
 80036f8:	e03c      	b.n	8003774 <HAL_RCC_OscConfig+0x9ac>
 80036fa:	bf00      	nop
 80036fc:	40021000 	.word	0x40021000
 8003700:	10908120 	.word	0x10908120
 8003704:	40007000 	.word	0x40007000
 8003708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10c      	bne.n	8003732 <HAL_RCC_OscConfig+0x96a>
 8003718:	4bc1      	ldr	r3, [pc, #772]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4ac0      	ldr	r2, [pc, #768]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800371e:	f023 0301 	bic.w	r3, r3, #1
 8003722:	6213      	str	r3, [r2, #32]
 8003724:	4bbe      	ldr	r3, [pc, #760]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4abd      	ldr	r2, [pc, #756]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800372a:	f023 0304 	bic.w	r3, r3, #4
 800372e:	6213      	str	r3, [r2, #32]
 8003730:	e020      	b.n	8003774 <HAL_RCC_OscConfig+0x9ac>
 8003732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x994>
 8003742:	4bb7      	ldr	r3, [pc, #732]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	4ab6      	ldr	r2, [pc, #728]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6213      	str	r3, [r2, #32]
 800374e:	4bb4      	ldr	r3, [pc, #720]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	4ab3      	ldr	r2, [pc, #716]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6213      	str	r3, [r2, #32]
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x9ac>
 800375c:	4bb0      	ldr	r3, [pc, #704]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	4aaf      	ldr	r2, [pc, #700]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6213      	str	r3, [r2, #32]
 8003768:	4bad      	ldr	r3, [pc, #692]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	4aac      	ldr	r2, [pc, #688]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003774:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003778:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 8081 	beq.w	8003888 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003786:	f7fd fa8f 	bl	8000ca8 <HAL_GetTick>
 800378a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378e:	e00b      	b.n	80037a8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fd fa8a 	bl	8000ca8 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d901      	bls.n	80037a8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e345      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
 80037a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ac:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037b0:	2202      	movs	r2, #2
 80037b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037d4:	2202      	movs	r2, #2
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	fa93 f2a3 	rbit	r2, r3
 80037e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80037ee:	601a      	str	r2, [r3, #0]
  return result;
 80037f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80037f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fa:	fab3 f383 	clz	r3, r3
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d102      	bne.n	8003814 <HAL_RCC_OscConfig+0xa4c>
 800380e:	4b84      	ldr	r3, [pc, #528]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	e013      	b.n	800383c <HAL_RCC_OscConfig+0xa74>
 8003814:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003818:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800381c:	2202      	movs	r2, #2
 800381e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003824:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	fa93 f2a3 	rbit	r2, r3
 800382e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003832:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	4b79      	ldr	r3, [pc, #484]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003840:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003844:	2102      	movs	r1, #2
 8003846:	6011      	str	r1, [r2, #0]
 8003848:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800384c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	fa92 f1a2 	rbit	r1, r2
 8003856:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800385a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800385e:	6011      	str	r1, [r2, #0]
  return result;
 8003860:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003864:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003868:	6812      	ldr	r2, [r2, #0]
 800386a:	fab2 f282 	clz	r2, r2
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	f002 021f 	and.w	r2, r2, #31
 800387a:	2101      	movs	r1, #1
 800387c:	fa01 f202 	lsl.w	r2, r1, r2
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d084      	beq.n	8003790 <HAL_RCC_OscConfig+0x9c8>
 8003886:	e07f      	b.n	8003988 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003888:	f7fd fa0e 	bl	8000ca8 <HAL_GetTick>
 800388c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003890:	e00b      	b.n	80038aa <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003892:	f7fd fa09 	bl	8000ca8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e2c4      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
 80038aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ae:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80038b2:	2202      	movs	r2, #2
 80038b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ba:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	fa93 f2a3 	rbit	r2, r3
 80038c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038d6:	2202      	movs	r2, #2
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038de:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	fa93 f2a3 	rbit	r2, r3
 80038e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ec:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80038f0:	601a      	str	r2, [r3, #0]
  return result;
 80038f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80038fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fc:	fab3 f383 	clz	r3, r3
 8003900:	b2db      	uxtb	r3, r3
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f043 0302 	orr.w	r3, r3, #2
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d102      	bne.n	8003916 <HAL_RCC_OscConfig+0xb4e>
 8003910:	4b43      	ldr	r3, [pc, #268]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	e013      	b.n	800393e <HAL_RCC_OscConfig+0xb76>
 8003916:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800391a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800391e:	2202      	movs	r2, #2
 8003920:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003926:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	fa93 f2a3 	rbit	r2, r3
 8003930:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003934:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	4b39      	ldr	r3, [pc, #228]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 800393c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800393e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003942:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003946:	2102      	movs	r1, #2
 8003948:	6011      	str	r1, [r2, #0]
 800394a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800394e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	fa92 f1a2 	rbit	r1, r2
 8003958:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800395c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003960:	6011      	str	r1, [r2, #0]
  return result;
 8003962:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003966:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	fab2 f282 	clz	r2, r2
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	f002 021f 	and.w	r2, r2, #31
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f202 	lsl.w	r2, r1, r2
 8003982:	4013      	ands	r3, r2
 8003984:	2b00      	cmp	r3, #0
 8003986:	d184      	bne.n	8003892 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003988:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 800398c:	2b01      	cmp	r3, #1
 800398e:	d105      	bne.n	800399c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003990:	4b23      	ldr	r3, [pc, #140]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4a22      	ldr	r2, [pc, #136]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 8003996:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800399a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800399c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69db      	ldr	r3, [r3, #28]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8242 	beq.w	8003e32 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ae:	4b1c      	ldr	r3, [pc, #112]	@ (8003a20 <HAL_RCC_OscConfig+0xc58>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	f000 8213 	beq.w	8003de2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	2b02      	cmp	r3, #2
 80039ca:	f040 8162 	bne.w	8003c92 <HAL_RCC_OscConfig+0xeca>
 80039ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80039d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80039da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	fa93 f2a3 	rbit	r2, r3
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039f2:	601a      	str	r2, [r3, #0]
  return result;
 80039f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80039fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	fab3 f383 	clz	r3, r3
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003a08:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	461a      	mov	r2, r3
 8003a10:	2300      	movs	r3, #0
 8003a12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a14:	f7fd f948 	bl	8000ca8 <HAL_GetTick>
 8003a18:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a1c:	e00c      	b.n	8003a38 <HAL_RCC_OscConfig+0xc70>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fd f940 	bl	8000ca8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d901      	bls.n	8003a38 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a34:	2303      	movs	r3, #3
 8003a36:	e1fd      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
 8003a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a3c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a4a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a5c:	601a      	str	r2, [r3, #0]
  return result;
 8003a5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a62:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003a66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a68:	fab3 f383 	clz	r3, r3
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	f043 0301 	orr.w	r3, r3, #1
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_RCC_OscConfig+0xcba>
 8003a7c:	4bb0      	ldr	r3, [pc, #704]	@ (8003d40 <HAL_RCC_OscConfig+0xf78>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	e027      	b.n	8003ad2 <HAL_RCC_OscConfig+0xd0a>
 8003a82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a86:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a94:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	fa93 f2a3 	rbit	r2, r3
 8003a9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aac:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003ab0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aba:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	fa93 f2a3 	rbit	r2, r3
 8003ac4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	4b9c      	ldr	r3, [pc, #624]	@ (8003d40 <HAL_RCC_OscConfig+0xf78>)
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ad6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003ada:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ade:	6011      	str	r1, [r2, #0]
 8003ae0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ae4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	fa92 f1a2 	rbit	r1, r2
 8003aee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003af2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003af6:	6011      	str	r1, [r2, #0]
  return result;
 8003af8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003afc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	fab2 f282 	clz	r2, r2
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	f042 0220 	orr.w	r2, r2, #32
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	f002 021f 	and.w	r2, r2, #31
 8003b12:	2101      	movs	r1, #1
 8003b14:	fa01 f202 	lsl.w	r2, r1, r2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d182      	bne.n	8003a24 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b1e:	4b88      	ldr	r3, [pc, #544]	@ (8003d40 <HAL_RCC_OscConfig+0xf78>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003b32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b36:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	497f      	ldr	r1, [pc, #508]	@ (8003d40 <HAL_RCC_OscConfig+0xf78>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
 8003b46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b4a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b4e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b58:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	fa93 f2a3 	rbit	r2, r3
 8003b62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b66:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b6a:	601a      	str	r2, [r3, #0]
  return result;
 8003b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b70:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003b74:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b76:	fab3 f383 	clz	r3, r3
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003b80:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	461a      	mov	r2, r3
 8003b88:	2301      	movs	r3, #1
 8003b8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8c:	f7fd f88c 	bl	8000ca8 <HAL_GetTick>
 8003b90:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b94:	e009      	b.n	8003baa <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b96:	f7fd f887 	bl	8000ca8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e144      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
 8003baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bae:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003bb2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003bb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bbc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	fa93 f2a3 	rbit	r2, r3
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bce:	601a      	str	r2, [r3, #0]
  return result;
 8003bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003bd8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bda:	fab3 f383 	clz	r3, r3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f043 0301 	orr.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <HAL_RCC_OscConfig+0xe2c>
 8003bee:	4b54      	ldr	r3, [pc, #336]	@ (8003d40 <HAL_RCC_OscConfig+0xf78>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	e027      	b.n	8003c44 <HAL_RCC_OscConfig+0xe7c>
 8003bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003bfc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c06:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	fa93 f2a3 	rbit	r2, r3
 8003c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c14:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c22:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	fa93 f2a3 	rbit	r2, r3
 8003c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003c3e:	601a      	str	r2, [r3, #0]
 8003c40:	4b3f      	ldr	r3, [pc, #252]	@ (8003d40 <HAL_RCC_OscConfig+0xf78>)
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c48:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c4c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c56:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	fa92 f1a2 	rbit	r1, r2
 8003c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c64:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c68:	6011      	str	r1, [r2, #0]
  return result;
 8003c6a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003c6e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	fab2 f282 	clz	r2, r2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	f042 0220 	orr.w	r2, r2, #32
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f002 021f 	and.w	r2, r2, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d082      	beq.n	8003b96 <HAL_RCC_OscConfig+0xdce>
 8003c90:	e0cf      	b.n	8003e32 <HAL_RCC_OscConfig+0x106a>
 8003c92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c96:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003c9a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	fa93 f2a3 	rbit	r2, r3
 8003cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cb6:	601a      	str	r2, [r3, #0]
  return result;
 8003cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003cc0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc2:	fab3 f383 	clz	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ccc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7fc ffe6 	bl	8000ca8 <HAL_GetTick>
 8003cdc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce0:	e009      	b.n	8003cf6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce2:	f7fc ffe1 	bl	8000ca8 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e09e      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
 8003cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cfa:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003cfe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d08:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	fa93 f2a3 	rbit	r2, r3
 8003d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d16:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d1a:	601a      	str	r2, [r3, #0]
  return result;
 8003d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d20:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003d24:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d26:	fab3 f383 	clz	r3, r3
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f043 0301 	orr.w	r3, r3, #1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d104      	bne.n	8003d44 <HAL_RCC_OscConfig+0xf7c>
 8003d3a:	4b01      	ldr	r3, [pc, #4]	@ (8003d40 <HAL_RCC_OscConfig+0xf78>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	e029      	b.n	8003d94 <HAL_RCC_OscConfig+0xfcc>
 8003d40:	40021000 	.word	0x40021000
 8003d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d48:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d56:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	fa93 f2a3 	rbit	r2, r3
 8003d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d64:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d6e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d72:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d7c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	fa93 f2a3 	rbit	r2, r3
 8003d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	4b2b      	ldr	r3, [pc, #172]	@ (8003e40 <HAL_RCC_OscConfig+0x1078>)
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003d98:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003d9c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003da0:	6011      	str	r1, [r2, #0]
 8003da2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003da6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	fa92 f1a2 	rbit	r1, r2
 8003db0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003db4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003db8:	6011      	str	r1, [r2, #0]
  return result;
 8003dba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003dbe:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	fab2 f282 	clz	r2, r2
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	f042 0220 	orr.w	r2, r2, #32
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f002 021f 	and.w	r2, r2, #31
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d180      	bne.n	8003ce2 <HAL_RCC_OscConfig+0xf1a>
 8003de0:	e027      	b.n	8003e32 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d101      	bne.n	8003df6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e01e      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df6:	4b12      	ldr	r3, [pc, #72]	@ (8003e40 <HAL_RCC_OscConfig+0x1078>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003dfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d10b      	bne.n	8003e2e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e16:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003e1a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d001      	beq.n	8003e32 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000

08003e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b09e      	sub	sp, #120	@ 0x78
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e162      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e5c:	4b90      	ldr	r3, [pc, #576]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0307 	and.w	r3, r3, #7
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d910      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 0207 	bic.w	r2, r3, #7
 8003e72:	498b      	ldr	r1, [pc, #556]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b89      	ldr	r3, [pc, #548]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e14a      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d008      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e98:	4b82      	ldr	r3, [pc, #520]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	497f      	ldr	r1, [pc, #508]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 80dc 	beq.w	8004070 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d13c      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xf6>
 8003ec0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ec4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ed0:	fab3 f383 	clz	r3, r3
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d102      	bne.n	8003eea <HAL_RCC_ClockConfig+0xa6>
 8003ee4:	4b6f      	ldr	r3, [pc, #444]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	e00f      	b.n	8003f0a <HAL_RCC_ClockConfig+0xc6>
 8003eea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003eee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003ef2:	fa93 f3a3 	rbit	r3, r3
 8003ef6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ef8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003efe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f00:	fa93 f3a3 	rbit	r3, r3
 8003f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f06:	4b67      	ldr	r3, [pc, #412]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003f0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f12:	fa92 f2a2 	rbit	r2, r2
 8003f16:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003f18:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003f1a:	fab2 f282 	clz	r2, r2
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	f042 0220 	orr.w	r2, r2, #32
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f002 021f 	and.w	r2, r2, #31
 8003f2a:	2101      	movs	r1, #1
 8003f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d17b      	bne.n	800402e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e0f3      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d13c      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x178>
 8003f42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f46:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	095b      	lsrs	r3, r3, #5
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_RCC_ClockConfig+0x128>
 8003f66:	4b4f      	ldr	r3, [pc, #316]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	e00f      	b.n	8003f8c <HAL_RCC_ClockConfig+0x148>
 8003f6c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f74:	fa93 f3a3 	rbit	r3, r3
 8003f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f82:	fa93 f3a3 	rbit	r3, r3
 8003f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f88:	4b46      	ldr	r3, [pc, #280]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f90:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f94:	fa92 f2a2 	rbit	r2, r2
 8003f98:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003f9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f9c:	fab2 f282 	clz	r2, r2
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	f042 0220 	orr.w	r2, r2, #32
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	f002 021f 	and.w	r2, r2, #31
 8003fac:	2101      	movs	r1, #1
 8003fae:	fa01 f202 	lsl.w	r2, r1, r2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d13a      	bne.n	800402e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0b2      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fc2:	fa93 f3a3 	rbit	r3, r3
 8003fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	d102      	bne.n	8003fe4 <HAL_RCC_ClockConfig+0x1a0>
 8003fde:	4b31      	ldr	r3, [pc, #196]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	e00d      	b.n	8004000 <HAL_RCC_ClockConfig+0x1bc>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fea:	fa93 f3a3 	rbit	r3, r3
 8003fee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	fa93 f3a3 	rbit	r3, r3
 8003ffa:	61fb      	str	r3, [r7, #28]
 8003ffc:	4b29      	ldr	r3, [pc, #164]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	2202      	movs	r2, #2
 8004002:	61ba      	str	r2, [r7, #24]
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	fa92 f2a2 	rbit	r2, r2
 800400a:	617a      	str	r2, [r7, #20]
  return result;
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	fab2 f282 	clz	r2, r2
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	f042 0220 	orr.w	r2, r2, #32
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	f002 021f 	and.w	r2, r2, #31
 800401e:	2101      	movs	r1, #1
 8004020:	fa01 f202 	lsl.w	r2, r1, r2
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e079      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800402e:	4b1d      	ldr	r3, [pc, #116]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f023 0203 	bic.w	r2, r3, #3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	491a      	ldr	r1, [pc, #104]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 800403c:	4313      	orrs	r3, r2
 800403e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004040:	f7fc fe32 	bl	8000ca8 <HAL_GetTick>
 8004044:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004046:	e00a      	b.n	800405e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004048:	f7fc fe2e 	bl	8000ca8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004056:	4293      	cmp	r3, r2
 8004058:	d901      	bls.n	800405e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e061      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <HAL_RCC_ClockConfig+0x260>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f003 020c 	and.w	r2, r3, #12
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	429a      	cmp	r2, r3
 800406e:	d1eb      	bne.n	8004048 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004070:	4b0b      	ldr	r3, [pc, #44]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d214      	bcs.n	80040a8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b08      	ldr	r3, [pc, #32]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	4906      	ldr	r1, [pc, #24]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b04      	ldr	r3, [pc, #16]	@ (80040a0 <HAL_RCC_ClockConfig+0x25c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d005      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e040      	b.n	8004122 <HAL_RCC_ClockConfig+0x2de>
 80040a0:	40022000 	.word	0x40022000
 80040a4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0304 	and.w	r3, r3, #4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d008      	beq.n	80040c6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040b4:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	491a      	ldr	r1, [pc, #104]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d009      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040d2:	4b16      	ldr	r3, [pc, #88]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4912      	ldr	r1, [pc, #72]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040e6:	f000 f829 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040ea:	4601      	mov	r1, r0
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <HAL_RCC_ClockConfig+0x2e8>)
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80040f4:	22f0      	movs	r2, #240	@ 0xf0
 80040f6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	fa92 f2a2 	rbit	r2, r2
 80040fe:	60fa      	str	r2, [r7, #12]
  return result;
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	fab2 f282 	clz	r2, r2
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	40d3      	lsrs	r3, r2
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <HAL_RCC_ClockConfig+0x2ec>)
 800410c:	5cd3      	ldrb	r3, [r2, r3]
 800410e:	fa21 f303 	lsr.w	r3, r1, r3
 8004112:	4a08      	ldr	r2, [pc, #32]	@ (8004134 <HAL_RCC_ClockConfig+0x2f0>)
 8004114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <HAL_RCC_ClockConfig+0x2f4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc fd80 	bl	8000c20 <HAL_InitTick>
  
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3778      	adds	r7, #120	@ 0x78
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	40021000 	.word	0x40021000
 8004130:	08005b00 	.word	0x08005b00
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	b480      	push	{r7}
 800413e:	b087      	sub	sp, #28
 8004140:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004142:	2300      	movs	r3, #0
 8004144:	60fb      	str	r3, [r7, #12]
 8004146:	2300      	movs	r3, #0
 8004148:	60bb      	str	r3, [r7, #8]
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	2300      	movs	r3, #0
 8004150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004156:	4b1e      	ldr	r3, [pc, #120]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d002      	beq.n	800416c <HAL_RCC_GetSysClockFreq+0x30>
 8004166:	2b08      	cmp	r3, #8
 8004168:	d003      	beq.n	8004172 <HAL_RCC_GetSysClockFreq+0x36>
 800416a:	e026      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800416c:	4b19      	ldr	r3, [pc, #100]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800416e:	613b      	str	r3, [r7, #16]
      break;
 8004170:	e026      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	0c9b      	lsrs	r3, r3, #18
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	4a17      	ldr	r2, [pc, #92]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800417c:	5cd3      	ldrb	r3, [r2, r3]
 800417e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004180:	4b13      	ldr	r3, [pc, #76]	@ (80041d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004184:	f003 030f 	and.w	r3, r3, #15
 8004188:	4a14      	ldr	r2, [pc, #80]	@ (80041dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800418a:	5cd3      	ldrb	r3, [r2, r3]
 800418c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004198:	4a0e      	ldr	r2, [pc, #56]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	fb02 f303 	mul.w	r3, r2, r3
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e004      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a0c      	ldr	r2, [pc, #48]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80041ae:	fb02 f303 	mul.w	r3, r2, r3
 80041b2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	613b      	str	r3, [r7, #16]
      break;
 80041b8:	e002      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041ba:	4b06      	ldr	r3, [pc, #24]	@ (80041d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80041bc:	613b      	str	r3, [r7, #16]
      break;
 80041be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041c0:	693b      	ldr	r3, [r7, #16]
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40021000 	.word	0x40021000
 80041d4:	007a1200 	.word	0x007a1200
 80041d8:	08005b18 	.word	0x08005b18
 80041dc:	08005b28 	.word	0x08005b28
 80041e0:	003d0900 	.word	0x003d0900

080041e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041ea:	681b      	ldr	r3, [r3, #0]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000000 	.word	0x20000000

080041fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b082      	sub	sp, #8
 8004200:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004202:	f7ff ffef 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 8004206:	4601      	mov	r1, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004210:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004214:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	fa92 f2a2 	rbit	r2, r2
 800421c:	603a      	str	r2, [r7, #0]
  return result;
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	fab2 f282 	clz	r2, r2
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	40d3      	lsrs	r3, r2
 8004228:	4a04      	ldr	r2, [pc, #16]	@ (800423c <HAL_RCC_GetPCLK1Freq+0x40>)
 800422a:	5cd3      	ldrb	r3, [r2, r3]
 800422c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000
 800423c:	08005b10 	.word	0x08005b10

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004246:	f7ff ffcd 	bl	80041e4 <HAL_RCC_GetHCLKFreq>
 800424a:	4601      	mov	r1, r0
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004254:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004258:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	fa92 f2a2 	rbit	r2, r2
 8004260:	603a      	str	r2, [r7, #0]
  return result;
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	fab2 f282 	clz	r2, r2
 8004268:	b2d2      	uxtb	r2, r2
 800426a:	40d3      	lsrs	r3, r2
 800426c:	4a04      	ldr	r2, [pc, #16]	@ (8004280 <HAL_RCC_GetPCLK2Freq+0x40>)
 800426e:	5cd3      	ldrb	r3, [r2, r3]
 8004270:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004274:	4618      	mov	r0, r3
 8004276:	3708      	adds	r7, #8
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	08005b10 	.word	0x08005b10

08004284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e040      	b.n	8004318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d106      	bne.n	80042ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7fc fb58 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2224      	movs	r2, #36	@ 0x24
 80042b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 0201 	bic.w	r2, r2, #1
 80042c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d002      	beq.n	80042d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f9e8 	bl	80046a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8af 	bl	8004434 <UART_SetConfig>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e01b      	b.n	8004318 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80042ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80042fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f042 0201 	orr.w	r2, r2, #1
 800430e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fa67 	bl	80047e4 <UART_CheckIdleState>
 8004316:	4603      	mov	r3, r0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3708      	adds	r7, #8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	603b      	str	r3, [r7, #0]
 800432c:	4613      	mov	r3, r2
 800432e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004334:	2b20      	cmp	r3, #32
 8004336:	d177      	bne.n	8004428 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d002      	beq.n	8004344 <HAL_UART_Transmit+0x24>
 800433e:	88fb      	ldrh	r3, [r7, #6]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e070      	b.n	800442a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2221      	movs	r2, #33	@ 0x21
 8004354:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004356:	f7fc fca7 	bl	8000ca8 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	88fa      	ldrh	r2, [r7, #6]
 8004360:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	88fa      	ldrh	r2, [r7, #6]
 8004368:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004374:	d108      	bne.n	8004388 <HAL_UART_Transmit+0x68>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d104      	bne.n	8004388 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e003      	b.n	8004390 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004390:	e02f      	b.n	80043f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2200      	movs	r2, #0
 800439a:	2180      	movs	r1, #128	@ 0x80
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fac9 	bl	8004934 <UART_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2220      	movs	r2, #32
 80043ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e03b      	b.n	800442a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10b      	bne.n	80043d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	881a      	ldrh	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043c4:	b292      	uxth	r2, r2
 80043c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	3302      	adds	r3, #2
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	e007      	b.n	80043e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	781a      	ldrb	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3301      	adds	r3, #1
 80043de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	3b01      	subs	r3, #1
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1c9      	bne.n	8004392 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	9300      	str	r3, [sp, #0]
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2200      	movs	r2, #0
 8004406:	2140      	movs	r1, #64	@ 0x40
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f000 fa93 	bl	8004934 <UART_WaitOnFlagUntilTimeout>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2220      	movs	r2, #32
 8004418:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e005      	b.n	800442a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004424:	2300      	movs	r3, #0
 8004426:	e000      	b.n	800442a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004428:	2302      	movs	r3, #2
  }
}
 800442a:	4618      	mov	r0, r3
 800442c:	3720      	adds	r7, #32
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689a      	ldr	r2, [r3, #8]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	431a      	orrs	r2, r3
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	695b      	ldr	r3, [r3, #20]
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	4b8a      	ldr	r3, [pc, #552]	@ (8004688 <UART_SetConfig+0x254>)
 8004460:	4013      	ands	r3, r2
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	6979      	ldr	r1, [r7, #20]
 8004468:	430b      	orrs	r3, r1
 800446a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	4313      	orrs	r3, r2
 8004490:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a78      	ldr	r2, [pc, #480]	@ (800468c <UART_SetConfig+0x258>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d120      	bne.n	80044f2 <UART_SetConfig+0xbe>
 80044b0:	4b77      	ldr	r3, [pc, #476]	@ (8004690 <UART_SetConfig+0x25c>)
 80044b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d817      	bhi.n	80044ec <UART_SetConfig+0xb8>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0x90>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044e1 	.word	0x080044e1
 80044cc:	080044e7 	.word	0x080044e7
 80044d0:	080044db 	.word	0x080044db
 80044d4:	2300      	movs	r3, #0
 80044d6:	77fb      	strb	r3, [r7, #31]
 80044d8:	e01d      	b.n	8004516 <UART_SetConfig+0xe2>
 80044da:	2302      	movs	r3, #2
 80044dc:	77fb      	strb	r3, [r7, #31]
 80044de:	e01a      	b.n	8004516 <UART_SetConfig+0xe2>
 80044e0:	2304      	movs	r3, #4
 80044e2:	77fb      	strb	r3, [r7, #31]
 80044e4:	e017      	b.n	8004516 <UART_SetConfig+0xe2>
 80044e6:	2308      	movs	r3, #8
 80044e8:	77fb      	strb	r3, [r7, #31]
 80044ea:	e014      	b.n	8004516 <UART_SetConfig+0xe2>
 80044ec:	2310      	movs	r3, #16
 80044ee:	77fb      	strb	r3, [r7, #31]
 80044f0:	e011      	b.n	8004516 <UART_SetConfig+0xe2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a67      	ldr	r2, [pc, #412]	@ (8004694 <UART_SetConfig+0x260>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d102      	bne.n	8004502 <UART_SetConfig+0xce>
 80044fc:	2300      	movs	r3, #0
 80044fe:	77fb      	strb	r3, [r7, #31]
 8004500:	e009      	b.n	8004516 <UART_SetConfig+0xe2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a64      	ldr	r2, [pc, #400]	@ (8004698 <UART_SetConfig+0x264>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d102      	bne.n	8004512 <UART_SetConfig+0xde>
 800450c:	2300      	movs	r3, #0
 800450e:	77fb      	strb	r3, [r7, #31]
 8004510:	e001      	b.n	8004516 <UART_SetConfig+0xe2>
 8004512:	2310      	movs	r3, #16
 8004514:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	69db      	ldr	r3, [r3, #28]
 800451a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800451e:	d15a      	bne.n	80045d6 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004520:	7ffb      	ldrb	r3, [r7, #31]
 8004522:	2b08      	cmp	r3, #8
 8004524:	d827      	bhi.n	8004576 <UART_SetConfig+0x142>
 8004526:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <UART_SetConfig+0xf8>)
 8004528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452c:	08004551 	.word	0x08004551
 8004530:	08004559 	.word	0x08004559
 8004534:	08004561 	.word	0x08004561
 8004538:	08004577 	.word	0x08004577
 800453c:	08004567 	.word	0x08004567
 8004540:	08004577 	.word	0x08004577
 8004544:	08004577 	.word	0x08004577
 8004548:	08004577 	.word	0x08004577
 800454c:	0800456f 	.word	0x0800456f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004550:	f7ff fe54 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 8004554:	61b8      	str	r0, [r7, #24]
        break;
 8004556:	e013      	b.n	8004580 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004558:	f7ff fe72 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 800455c:	61b8      	str	r0, [r7, #24]
        break;
 800455e:	e00f      	b.n	8004580 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004560:	4b4e      	ldr	r3, [pc, #312]	@ (800469c <UART_SetConfig+0x268>)
 8004562:	61bb      	str	r3, [r7, #24]
        break;
 8004564:	e00c      	b.n	8004580 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004566:	f7ff fde9 	bl	800413c <HAL_RCC_GetSysClockFreq>
 800456a:	61b8      	str	r0, [r7, #24]
        break;
 800456c:	e008      	b.n	8004580 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800456e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004572:	61bb      	str	r3, [r7, #24]
        break;
 8004574:	e004      	b.n	8004580 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	77bb      	strb	r3, [r7, #30]
        break;
 800457e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d074      	beq.n	8004670 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	005a      	lsls	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	441a      	add	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	fbb2 f3f3 	udiv	r3, r2, r3
 800459a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	2b0f      	cmp	r3, #15
 80045a0:	d916      	bls.n	80045d0 <UART_SetConfig+0x19c>
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045a8:	d212      	bcs.n	80045d0 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	f023 030f 	bic.w	r3, r3, #15
 80045b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f003 0307 	and.w	r3, r3, #7
 80045be:	b29a      	uxth	r2, r3
 80045c0:	89fb      	ldrh	r3, [r7, #14]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	89fa      	ldrh	r2, [r7, #14]
 80045cc:	60da      	str	r2, [r3, #12]
 80045ce:	e04f      	b.n	8004670 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	77bb      	strb	r3, [r7, #30]
 80045d4:	e04c      	b.n	8004670 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	2b08      	cmp	r3, #8
 80045da:	d828      	bhi.n	800462e <UART_SetConfig+0x1fa>
 80045dc:	a201      	add	r2, pc, #4	@ (adr r2, 80045e4 <UART_SetConfig+0x1b0>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	08004609 	.word	0x08004609
 80045e8:	08004611 	.word	0x08004611
 80045ec:	08004619 	.word	0x08004619
 80045f0:	0800462f 	.word	0x0800462f
 80045f4:	0800461f 	.word	0x0800461f
 80045f8:	0800462f 	.word	0x0800462f
 80045fc:	0800462f 	.word	0x0800462f
 8004600:	0800462f 	.word	0x0800462f
 8004604:	08004627 	.word	0x08004627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004608:	f7ff fdf8 	bl	80041fc <HAL_RCC_GetPCLK1Freq>
 800460c:	61b8      	str	r0, [r7, #24]
        break;
 800460e:	e013      	b.n	8004638 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004610:	f7ff fe16 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8004614:	61b8      	str	r0, [r7, #24]
        break;
 8004616:	e00f      	b.n	8004638 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004618:	4b20      	ldr	r3, [pc, #128]	@ (800469c <UART_SetConfig+0x268>)
 800461a:	61bb      	str	r3, [r7, #24]
        break;
 800461c:	e00c      	b.n	8004638 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800461e:	f7ff fd8d 	bl	800413c <HAL_RCC_GetSysClockFreq>
 8004622:	61b8      	str	r0, [r7, #24]
        break;
 8004624:	e008      	b.n	8004638 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004626:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800462a:	61bb      	str	r3, [r7, #24]
        break;
 800462c:	e004      	b.n	8004638 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	77bb      	strb	r3, [r7, #30]
        break;
 8004636:	bf00      	nop
    }

    if (pclk != 0U)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d018      	beq.n	8004670 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	085a      	lsrs	r2, r3, #1
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	441a      	add	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	2b0f      	cmp	r3, #15
 8004656:	d909      	bls.n	800466c <UART_SetConfig+0x238>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800465e:	d205      	bcs.n	800466c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	b29a      	uxth	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	e001      	b.n	8004670 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800467c:	7fbb      	ldrb	r3, [r7, #30]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	efff69f3 	.word	0xefff69f3
 800468c:	40013800 	.word	0x40013800
 8004690:	40021000 	.word	0x40021000
 8004694:	40004400 	.word	0x40004400
 8004698:	40004800 	.word	0x40004800
 800469c:	007a1200 	.word	0x007a1200

080046a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	430a      	orrs	r2, r1
 80046ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004756:	f003 0320 	and.w	r3, r3, #32
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00a      	beq.n	8004774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01a      	beq.n	80047b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800479a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800479e:	d10a      	bne.n	80047b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	430a      	orrs	r2, r1
 80047b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d00a      	beq.n	80047d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	430a      	orrs	r2, r1
 80047d6:	605a      	str	r2, [r3, #4]
  }
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b098      	sub	sp, #96	@ 0x60
 80047e8:	af02      	add	r7, sp, #8
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047f4:	f7fc fa58 	bl	8000ca8 <HAL_GetTick>
 80047f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b08      	cmp	r3, #8
 8004806:	d12e      	bne.n	8004866 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004810:	2200      	movs	r2, #0
 8004812:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f88c 	bl	8004934 <UART_WaitOnFlagUntilTimeout>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d021      	beq.n	8004866 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800482a:	e853 3f00 	ldrex	r3, [r3]
 800482e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004836:	653b      	str	r3, [r7, #80]	@ 0x50
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004840:	647b      	str	r3, [r7, #68]	@ 0x44
 8004842:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004848:	e841 2300 	strex	r3, r2, [r1]
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800484e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d1e6      	bne.n	8004822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2220      	movs	r2, #32
 8004858:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e062      	b.n	800492c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d149      	bne.n	8004908 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004874:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800487c:	2200      	movs	r2, #0
 800487e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f856 	bl	8004934 <UART_WaitOnFlagUntilTimeout>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d03c      	beq.n	8004908 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	623b      	str	r3, [r7, #32]
   return(result);
 800489c:	6a3b      	ldr	r3, [r7, #32]
 800489e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80048b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e6      	bne.n	800488e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3308      	adds	r3, #8
 80048c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	e853 3f00 	ldrex	r3, [r3]
 80048ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0301 	bic.w	r3, r3, #1
 80048d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048e0:	61fa      	str	r2, [r7, #28]
 80048e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e4:	69b9      	ldr	r1, [r7, #24]
 80048e6:	69fa      	ldr	r2, [r7, #28]
 80048e8:	e841 2300 	strex	r3, r2, [r1]
 80048ec:	617b      	str	r3, [r7, #20]
   return(result);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e5      	bne.n	80048c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e011      	b.n	800492c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	3758      	adds	r7, #88	@ 0x58
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}

08004934 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b084      	sub	sp, #16
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004944:	e04f      	b.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d04b      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800494e:	f7fc f9ab 	bl	8000ca8 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <UART_WaitOnFlagUntilTimeout+0x30>
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d101      	bne.n	8004968 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e04e      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d037      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b80      	cmp	r3, #128	@ 0x80
 800497a:	d034      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b40      	cmp	r3, #64	@ 0x40
 8004980:	d031      	beq.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b08      	cmp	r3, #8
 800498e:	d110      	bne.n	80049b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2208      	movs	r2, #8
 8004996:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f838 	bl	8004a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2208      	movs	r2, #8
 80049a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e029      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80049c0:	d111      	bne.n	80049e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f81e 	bl	8004a0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e00f      	b.n	8004a06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	bf0c      	ite	eq
 80049f6:	2301      	moveq	r3, #1
 80049f8:	2300      	movne	r3, #0
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	461a      	mov	r2, r3
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d0a0      	beq.n	8004946 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b095      	sub	sp, #84	@ 0x54
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1e:	e853 3f00 	ldrex	r3, [r3]
 8004a22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a34:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a3c:	e841 2300 	strex	r3, r2, [r1]
 8004a40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1e6      	bne.n	8004a16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	f023 0301 	bic.w	r3, r3, #1
 8004a5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3308      	adds	r3, #8
 8004a66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e5      	bne.n	8004a48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d118      	bne.n	8004ab6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f023 0310 	bic.w	r3, r3, #16
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6979      	ldr	r1, [r7, #20]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	613b      	str	r3, [r7, #16]
   return(result);
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e6      	bne.n	8004a84 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004aca:	bf00      	nop
 8004acc:	3754      	adds	r7, #84	@ 0x54
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
	...

08004ad8 <std>:
 8004ad8:	2300      	movs	r3, #0
 8004ada:	b510      	push	{r4, lr}
 8004adc:	4604      	mov	r4, r0
 8004ade:	e9c0 3300 	strd	r3, r3, [r0]
 8004ae2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ae6:	6083      	str	r3, [r0, #8]
 8004ae8:	8181      	strh	r1, [r0, #12]
 8004aea:	6643      	str	r3, [r0, #100]	@ 0x64
 8004aec:	81c2      	strh	r2, [r0, #14]
 8004aee:	6183      	str	r3, [r0, #24]
 8004af0:	4619      	mov	r1, r3
 8004af2:	2208      	movs	r2, #8
 8004af4:	305c      	adds	r0, #92	@ 0x5c
 8004af6:	f000 f9c2 	bl	8004e7e <memset>
 8004afa:	4b0d      	ldr	r3, [pc, #52]	@ (8004b30 <std+0x58>)
 8004afc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <std+0x5c>)
 8004b00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <std+0x60>)
 8004b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004b06:	4b0d      	ldr	r3, [pc, #52]	@ (8004b3c <std+0x64>)
 8004b08:	6323      	str	r3, [r4, #48]	@ 0x30
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b40 <std+0x68>)
 8004b0c:	6224      	str	r4, [r4, #32]
 8004b0e:	429c      	cmp	r4, r3
 8004b10:	d006      	beq.n	8004b20 <std+0x48>
 8004b12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004b16:	4294      	cmp	r4, r2
 8004b18:	d002      	beq.n	8004b20 <std+0x48>
 8004b1a:	33d0      	adds	r3, #208	@ 0xd0
 8004b1c:	429c      	cmp	r4, r3
 8004b1e:	d105      	bne.n	8004b2c <std+0x54>
 8004b20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b28:	f000 ba22 	b.w	8004f70 <__retarget_lock_init_recursive>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	bf00      	nop
 8004b30:	08004df9 	.word	0x08004df9
 8004b34:	08004e1b 	.word	0x08004e1b
 8004b38:	08004e53 	.word	0x08004e53
 8004b3c:	08004e77 	.word	0x08004e77
 8004b40:	20000218 	.word	0x20000218

08004b44 <stdio_exit_handler>:
 8004b44:	4a02      	ldr	r2, [pc, #8]	@ (8004b50 <stdio_exit_handler+0xc>)
 8004b46:	4903      	ldr	r1, [pc, #12]	@ (8004b54 <stdio_exit_handler+0x10>)
 8004b48:	4803      	ldr	r0, [pc, #12]	@ (8004b58 <stdio_exit_handler+0x14>)
 8004b4a:	f000 b869 	b.w	8004c20 <_fwalk_sglue>
 8004b4e:	bf00      	nop
 8004b50:	2000000c 	.word	0x2000000c
 8004b54:	08005821 	.word	0x08005821
 8004b58:	2000001c 	.word	0x2000001c

08004b5c <cleanup_stdio>:
 8004b5c:	6841      	ldr	r1, [r0, #4]
 8004b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b90 <cleanup_stdio+0x34>)
 8004b60:	4299      	cmp	r1, r3
 8004b62:	b510      	push	{r4, lr}
 8004b64:	4604      	mov	r4, r0
 8004b66:	d001      	beq.n	8004b6c <cleanup_stdio+0x10>
 8004b68:	f000 fe5a 	bl	8005820 <_fflush_r>
 8004b6c:	68a1      	ldr	r1, [r4, #8]
 8004b6e:	4b09      	ldr	r3, [pc, #36]	@ (8004b94 <cleanup_stdio+0x38>)
 8004b70:	4299      	cmp	r1, r3
 8004b72:	d002      	beq.n	8004b7a <cleanup_stdio+0x1e>
 8004b74:	4620      	mov	r0, r4
 8004b76:	f000 fe53 	bl	8005820 <_fflush_r>
 8004b7a:	68e1      	ldr	r1, [r4, #12]
 8004b7c:	4b06      	ldr	r3, [pc, #24]	@ (8004b98 <cleanup_stdio+0x3c>)
 8004b7e:	4299      	cmp	r1, r3
 8004b80:	d004      	beq.n	8004b8c <cleanup_stdio+0x30>
 8004b82:	4620      	mov	r0, r4
 8004b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b88:	f000 be4a 	b.w	8005820 <_fflush_r>
 8004b8c:	bd10      	pop	{r4, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000218 	.word	0x20000218
 8004b94:	20000280 	.word	0x20000280
 8004b98:	200002e8 	.word	0x200002e8

08004b9c <global_stdio_init.part.0>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <global_stdio_init.part.0+0x30>)
 8004ba0:	4c0b      	ldr	r4, [pc, #44]	@ (8004bd0 <global_stdio_init.part.0+0x34>)
 8004ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8004bd4 <global_stdio_init.part.0+0x38>)
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	4620      	mov	r0, r4
 8004ba8:	2200      	movs	r2, #0
 8004baa:	2104      	movs	r1, #4
 8004bac:	f7ff ff94 	bl	8004ad8 <std>
 8004bb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	2109      	movs	r1, #9
 8004bb8:	f7ff ff8e 	bl	8004ad8 <std>
 8004bbc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc6:	2112      	movs	r1, #18
 8004bc8:	f7ff bf86 	b.w	8004ad8 <std>
 8004bcc:	20000350 	.word	0x20000350
 8004bd0:	20000218 	.word	0x20000218
 8004bd4:	08004b45 	.word	0x08004b45

08004bd8 <__sfp_lock_acquire>:
 8004bd8:	4801      	ldr	r0, [pc, #4]	@ (8004be0 <__sfp_lock_acquire+0x8>)
 8004bda:	f000 b9ca 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 8004bde:	bf00      	nop
 8004be0:	20000359 	.word	0x20000359

08004be4 <__sfp_lock_release>:
 8004be4:	4801      	ldr	r0, [pc, #4]	@ (8004bec <__sfp_lock_release+0x8>)
 8004be6:	f000 b9c5 	b.w	8004f74 <__retarget_lock_release_recursive>
 8004bea:	bf00      	nop
 8004bec:	20000359 	.word	0x20000359

08004bf0 <__sinit>:
 8004bf0:	b510      	push	{r4, lr}
 8004bf2:	4604      	mov	r4, r0
 8004bf4:	f7ff fff0 	bl	8004bd8 <__sfp_lock_acquire>
 8004bf8:	6a23      	ldr	r3, [r4, #32]
 8004bfa:	b11b      	cbz	r3, 8004c04 <__sinit+0x14>
 8004bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c00:	f7ff bff0 	b.w	8004be4 <__sfp_lock_release>
 8004c04:	4b04      	ldr	r3, [pc, #16]	@ (8004c18 <__sinit+0x28>)
 8004c06:	6223      	str	r3, [r4, #32]
 8004c08:	4b04      	ldr	r3, [pc, #16]	@ (8004c1c <__sinit+0x2c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d1f5      	bne.n	8004bfc <__sinit+0xc>
 8004c10:	f7ff ffc4 	bl	8004b9c <global_stdio_init.part.0>
 8004c14:	e7f2      	b.n	8004bfc <__sinit+0xc>
 8004c16:	bf00      	nop
 8004c18:	08004b5d 	.word	0x08004b5d
 8004c1c:	20000350 	.word	0x20000350

08004c20 <_fwalk_sglue>:
 8004c20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c24:	4607      	mov	r7, r0
 8004c26:	4688      	mov	r8, r1
 8004c28:	4614      	mov	r4, r2
 8004c2a:	2600      	movs	r6, #0
 8004c2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c30:	f1b9 0901 	subs.w	r9, r9, #1
 8004c34:	d505      	bpl.n	8004c42 <_fwalk_sglue+0x22>
 8004c36:	6824      	ldr	r4, [r4, #0]
 8004c38:	2c00      	cmp	r4, #0
 8004c3a:	d1f7      	bne.n	8004c2c <_fwalk_sglue+0xc>
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c42:	89ab      	ldrh	r3, [r5, #12]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d907      	bls.n	8004c58 <_fwalk_sglue+0x38>
 8004c48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	d003      	beq.n	8004c58 <_fwalk_sglue+0x38>
 8004c50:	4629      	mov	r1, r5
 8004c52:	4638      	mov	r0, r7
 8004c54:	47c0      	blx	r8
 8004c56:	4306      	orrs	r6, r0
 8004c58:	3568      	adds	r5, #104	@ 0x68
 8004c5a:	e7e9      	b.n	8004c30 <_fwalk_sglue+0x10>

08004c5c <iprintf>:
 8004c5c:	b40f      	push	{r0, r1, r2, r3}
 8004c5e:	b507      	push	{r0, r1, r2, lr}
 8004c60:	4906      	ldr	r1, [pc, #24]	@ (8004c7c <iprintf+0x20>)
 8004c62:	ab04      	add	r3, sp, #16
 8004c64:	6808      	ldr	r0, [r1, #0]
 8004c66:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c6a:	6881      	ldr	r1, [r0, #8]
 8004c6c:	9301      	str	r3, [sp, #4]
 8004c6e:	f000 faad 	bl	80051cc <_vfiprintf_r>
 8004c72:	b003      	add	sp, #12
 8004c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c78:	b004      	add	sp, #16
 8004c7a:	4770      	bx	lr
 8004c7c:	20000018 	.word	0x20000018

08004c80 <setbuf>:
 8004c80:	fab1 f281 	clz	r2, r1
 8004c84:	0952      	lsrs	r2, r2, #5
 8004c86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c8a:	0052      	lsls	r2, r2, #1
 8004c8c:	f000 b800 	b.w	8004c90 <setvbuf>

08004c90 <setvbuf>:
 8004c90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c94:	461d      	mov	r5, r3
 8004c96:	4b57      	ldr	r3, [pc, #348]	@ (8004df4 <setvbuf+0x164>)
 8004c98:	681f      	ldr	r7, [r3, #0]
 8004c9a:	4604      	mov	r4, r0
 8004c9c:	460e      	mov	r6, r1
 8004c9e:	4690      	mov	r8, r2
 8004ca0:	b127      	cbz	r7, 8004cac <setvbuf+0x1c>
 8004ca2:	6a3b      	ldr	r3, [r7, #32]
 8004ca4:	b913      	cbnz	r3, 8004cac <setvbuf+0x1c>
 8004ca6:	4638      	mov	r0, r7
 8004ca8:	f7ff ffa2 	bl	8004bf0 <__sinit>
 8004cac:	f1b8 0f02 	cmp.w	r8, #2
 8004cb0:	d006      	beq.n	8004cc0 <setvbuf+0x30>
 8004cb2:	f1b8 0f01 	cmp.w	r8, #1
 8004cb6:	f200 809a 	bhi.w	8004dee <setvbuf+0x15e>
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	f2c0 8097 	blt.w	8004dee <setvbuf+0x15e>
 8004cc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004cc2:	07d9      	lsls	r1, r3, #31
 8004cc4:	d405      	bmi.n	8004cd2 <setvbuf+0x42>
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	059a      	lsls	r2, r3, #22
 8004cca:	d402      	bmi.n	8004cd2 <setvbuf+0x42>
 8004ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004cce:	f000 f950 	bl	8004f72 <__retarget_lock_acquire_recursive>
 8004cd2:	4621      	mov	r1, r4
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f000 fda3 	bl	8005820 <_fflush_r>
 8004cda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cdc:	b141      	cbz	r1, 8004cf0 <setvbuf+0x60>
 8004cde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ce2:	4299      	cmp	r1, r3
 8004ce4:	d002      	beq.n	8004cec <setvbuf+0x5c>
 8004ce6:	4638      	mov	r0, r7
 8004ce8:	f000 f946 	bl	8004f78 <_free_r>
 8004cec:	2300      	movs	r3, #0
 8004cee:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61a3      	str	r3, [r4, #24]
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	d503      	bpl.n	8004d04 <setvbuf+0x74>
 8004cfc:	6921      	ldr	r1, [r4, #16]
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f000 f93a 	bl	8004f78 <_free_r>
 8004d04:	89a3      	ldrh	r3, [r4, #12]
 8004d06:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8004d0a:	f023 0303 	bic.w	r3, r3, #3
 8004d0e:	f1b8 0f02 	cmp.w	r8, #2
 8004d12:	81a3      	strh	r3, [r4, #12]
 8004d14:	d061      	beq.n	8004dda <setvbuf+0x14a>
 8004d16:	ab01      	add	r3, sp, #4
 8004d18:	466a      	mov	r2, sp
 8004d1a:	4621      	mov	r1, r4
 8004d1c:	4638      	mov	r0, r7
 8004d1e:	f000 fda7 	bl	8005870 <__swhatbuf_r>
 8004d22:	89a3      	ldrh	r3, [r4, #12]
 8004d24:	4318      	orrs	r0, r3
 8004d26:	81a0      	strh	r0, [r4, #12]
 8004d28:	bb2d      	cbnz	r5, 8004d76 <setvbuf+0xe6>
 8004d2a:	9d00      	ldr	r5, [sp, #0]
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f000 f96d 	bl	800500c <malloc>
 8004d32:	4606      	mov	r6, r0
 8004d34:	2800      	cmp	r0, #0
 8004d36:	d152      	bne.n	8004dde <setvbuf+0x14e>
 8004d38:	f8dd 9000 	ldr.w	r9, [sp]
 8004d3c:	45a9      	cmp	r9, r5
 8004d3e:	d140      	bne.n	8004dc2 <setvbuf+0x132>
 8004d40:	f04f 35ff 	mov.w	r5, #4294967295
 8004d44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d48:	f043 0202 	orr.w	r2, r3, #2
 8004d4c:	81a2      	strh	r2, [r4, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	60a2      	str	r2, [r4, #8]
 8004d52:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8004d56:	6022      	str	r2, [r4, #0]
 8004d58:	6122      	str	r2, [r4, #16]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	6162      	str	r2, [r4, #20]
 8004d5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d60:	07d6      	lsls	r6, r2, #31
 8004d62:	d404      	bmi.n	8004d6e <setvbuf+0xde>
 8004d64:	0598      	lsls	r0, r3, #22
 8004d66:	d402      	bmi.n	8004d6e <setvbuf+0xde>
 8004d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d6a:	f000 f903 	bl	8004f74 <__retarget_lock_release_recursive>
 8004d6e:	4628      	mov	r0, r5
 8004d70:	b003      	add	sp, #12
 8004d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d76:	2e00      	cmp	r6, #0
 8004d78:	d0d8      	beq.n	8004d2c <setvbuf+0x9c>
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	b913      	cbnz	r3, 8004d84 <setvbuf+0xf4>
 8004d7e:	4638      	mov	r0, r7
 8004d80:	f7ff ff36 	bl	8004bf0 <__sinit>
 8004d84:	f1b8 0f01 	cmp.w	r8, #1
 8004d88:	bf08      	it	eq
 8004d8a:	89a3      	ldrheq	r3, [r4, #12]
 8004d8c:	6026      	str	r6, [r4, #0]
 8004d8e:	bf04      	itt	eq
 8004d90:	f043 0301 	orreq.w	r3, r3, #1
 8004d94:	81a3      	strheq	r3, [r4, #12]
 8004d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d9a:	f013 0208 	ands.w	r2, r3, #8
 8004d9e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8004da2:	d01e      	beq.n	8004de2 <setvbuf+0x152>
 8004da4:	07d9      	lsls	r1, r3, #31
 8004da6:	bf41      	itttt	mi
 8004da8:	2200      	movmi	r2, #0
 8004daa:	426d      	negmi	r5, r5
 8004dac:	60a2      	strmi	r2, [r4, #8]
 8004dae:	61a5      	strmi	r5, [r4, #24]
 8004db0:	bf58      	it	pl
 8004db2:	60a5      	strpl	r5, [r4, #8]
 8004db4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004db6:	07d2      	lsls	r2, r2, #31
 8004db8:	d401      	bmi.n	8004dbe <setvbuf+0x12e>
 8004dba:	059b      	lsls	r3, r3, #22
 8004dbc:	d513      	bpl.n	8004de6 <setvbuf+0x156>
 8004dbe:	2500      	movs	r5, #0
 8004dc0:	e7d5      	b.n	8004d6e <setvbuf+0xde>
 8004dc2:	4648      	mov	r0, r9
 8004dc4:	f000 f922 	bl	800500c <malloc>
 8004dc8:	4606      	mov	r6, r0
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d0b8      	beq.n	8004d40 <setvbuf+0xb0>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd4:	81a3      	strh	r3, [r4, #12]
 8004dd6:	464d      	mov	r5, r9
 8004dd8:	e7cf      	b.n	8004d7a <setvbuf+0xea>
 8004dda:	2500      	movs	r5, #0
 8004ddc:	e7b2      	b.n	8004d44 <setvbuf+0xb4>
 8004dde:	46a9      	mov	r9, r5
 8004de0:	e7f5      	b.n	8004dce <setvbuf+0x13e>
 8004de2:	60a2      	str	r2, [r4, #8]
 8004de4:	e7e6      	b.n	8004db4 <setvbuf+0x124>
 8004de6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004de8:	f000 f8c4 	bl	8004f74 <__retarget_lock_release_recursive>
 8004dec:	e7e7      	b.n	8004dbe <setvbuf+0x12e>
 8004dee:	f04f 35ff 	mov.w	r5, #4294967295
 8004df2:	e7bc      	b.n	8004d6e <setvbuf+0xde>
 8004df4:	20000018 	.word	0x20000018

08004df8 <__sread>:
 8004df8:	b510      	push	{r4, lr}
 8004dfa:	460c      	mov	r4, r1
 8004dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e00:	f000 f868 	bl	8004ed4 <_read_r>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	bfab      	itete	ge
 8004e08:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e0a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e0c:	181b      	addge	r3, r3, r0
 8004e0e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e12:	bfac      	ite	ge
 8004e14:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e16:	81a3      	strhlt	r3, [r4, #12]
 8004e18:	bd10      	pop	{r4, pc}

08004e1a <__swrite>:
 8004e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e1e:	461f      	mov	r7, r3
 8004e20:	898b      	ldrh	r3, [r1, #12]
 8004e22:	05db      	lsls	r3, r3, #23
 8004e24:	4605      	mov	r5, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	4616      	mov	r6, r2
 8004e2a:	d505      	bpl.n	8004e38 <__swrite+0x1e>
 8004e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e30:	2302      	movs	r3, #2
 8004e32:	2200      	movs	r2, #0
 8004e34:	f000 f83c 	bl	8004eb0 <_lseek_r>
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e42:	81a3      	strh	r3, [r4, #12]
 8004e44:	4632      	mov	r2, r6
 8004e46:	463b      	mov	r3, r7
 8004e48:	4628      	mov	r0, r5
 8004e4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e4e:	f000 b853 	b.w	8004ef8 <_write_r>

08004e52 <__sseek>:
 8004e52:	b510      	push	{r4, lr}
 8004e54:	460c      	mov	r4, r1
 8004e56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e5a:	f000 f829 	bl	8004eb0 <_lseek_r>
 8004e5e:	1c43      	adds	r3, r0, #1
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	bf15      	itete	ne
 8004e64:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e66:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e6a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e6e:	81a3      	strheq	r3, [r4, #12]
 8004e70:	bf18      	it	ne
 8004e72:	81a3      	strhne	r3, [r4, #12]
 8004e74:	bd10      	pop	{r4, pc}

08004e76 <__sclose>:
 8004e76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e7a:	f000 b809 	b.w	8004e90 <_close_r>

08004e7e <memset>:
 8004e7e:	4402      	add	r2, r0
 8004e80:	4603      	mov	r3, r0
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d100      	bne.n	8004e88 <memset+0xa>
 8004e86:	4770      	bx	lr
 8004e88:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8c:	e7f9      	b.n	8004e82 <memset+0x4>
	...

08004e90 <_close_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d06      	ldr	r5, [pc, #24]	@ (8004eac <_close_r+0x1c>)
 8004e94:	2300      	movs	r3, #0
 8004e96:	4604      	mov	r4, r0
 8004e98:	4608      	mov	r0, r1
 8004e9a:	602b      	str	r3, [r5, #0]
 8004e9c:	f7fb fe03 	bl	8000aa6 <_close>
 8004ea0:	1c43      	adds	r3, r0, #1
 8004ea2:	d102      	bne.n	8004eaa <_close_r+0x1a>
 8004ea4:	682b      	ldr	r3, [r5, #0]
 8004ea6:	b103      	cbz	r3, 8004eaa <_close_r+0x1a>
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
 8004eac:	20000354 	.word	0x20000354

08004eb0 <_lseek_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d07      	ldr	r5, [pc, #28]	@ (8004ed0 <_lseek_r+0x20>)
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	4608      	mov	r0, r1
 8004eb8:	4611      	mov	r1, r2
 8004eba:	2200      	movs	r2, #0
 8004ebc:	602a      	str	r2, [r5, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f7fb fe18 	bl	8000af4 <_lseek>
 8004ec4:	1c43      	adds	r3, r0, #1
 8004ec6:	d102      	bne.n	8004ece <_lseek_r+0x1e>
 8004ec8:	682b      	ldr	r3, [r5, #0]
 8004eca:	b103      	cbz	r3, 8004ece <_lseek_r+0x1e>
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	bd38      	pop	{r3, r4, r5, pc}
 8004ed0:	20000354 	.word	0x20000354

08004ed4 <_read_r>:
 8004ed4:	b538      	push	{r3, r4, r5, lr}
 8004ed6:	4d07      	ldr	r5, [pc, #28]	@ (8004ef4 <_read_r+0x20>)
 8004ed8:	4604      	mov	r4, r0
 8004eda:	4608      	mov	r0, r1
 8004edc:	4611      	mov	r1, r2
 8004ede:	2200      	movs	r2, #0
 8004ee0:	602a      	str	r2, [r5, #0]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f7fb fdc2 	bl	8000a6c <_read>
 8004ee8:	1c43      	adds	r3, r0, #1
 8004eea:	d102      	bne.n	8004ef2 <_read_r+0x1e>
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	b103      	cbz	r3, 8004ef2 <_read_r+0x1e>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	bd38      	pop	{r3, r4, r5, pc}
 8004ef4:	20000354 	.word	0x20000354

08004ef8 <_write_r>:
 8004ef8:	b538      	push	{r3, r4, r5, lr}
 8004efa:	4d07      	ldr	r5, [pc, #28]	@ (8004f18 <_write_r+0x20>)
 8004efc:	4604      	mov	r4, r0
 8004efe:	4608      	mov	r0, r1
 8004f00:	4611      	mov	r1, r2
 8004f02:	2200      	movs	r2, #0
 8004f04:	602a      	str	r2, [r5, #0]
 8004f06:	461a      	mov	r2, r3
 8004f08:	f7fb fc34 	bl	8000774 <_write>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	d102      	bne.n	8004f16 <_write_r+0x1e>
 8004f10:	682b      	ldr	r3, [r5, #0]
 8004f12:	b103      	cbz	r3, 8004f16 <_write_r+0x1e>
 8004f14:	6023      	str	r3, [r4, #0]
 8004f16:	bd38      	pop	{r3, r4, r5, pc}
 8004f18:	20000354 	.word	0x20000354

08004f1c <__errno>:
 8004f1c:	4b01      	ldr	r3, [pc, #4]	@ (8004f24 <__errno+0x8>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000018 	.word	0x20000018

08004f28 <__libc_init_array>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	4d0d      	ldr	r5, [pc, #52]	@ (8004f60 <__libc_init_array+0x38>)
 8004f2c:	4c0d      	ldr	r4, [pc, #52]	@ (8004f64 <__libc_init_array+0x3c>)
 8004f2e:	1b64      	subs	r4, r4, r5
 8004f30:	10a4      	asrs	r4, r4, #2
 8004f32:	2600      	movs	r6, #0
 8004f34:	42a6      	cmp	r6, r4
 8004f36:	d109      	bne.n	8004f4c <__libc_init_array+0x24>
 8004f38:	4d0b      	ldr	r5, [pc, #44]	@ (8004f68 <__libc_init_array+0x40>)
 8004f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8004f6c <__libc_init_array+0x44>)
 8004f3c:	f000 fdc0 	bl	8005ac0 <_init>
 8004f40:	1b64      	subs	r4, r4, r5
 8004f42:	10a4      	asrs	r4, r4, #2
 8004f44:	2600      	movs	r6, #0
 8004f46:	42a6      	cmp	r6, r4
 8004f48:	d105      	bne.n	8004f56 <__libc_init_array+0x2e>
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}
 8004f4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f50:	4798      	blx	r3
 8004f52:	3601      	adds	r6, #1
 8004f54:	e7ee      	b.n	8004f34 <__libc_init_array+0xc>
 8004f56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f5a:	4798      	blx	r3
 8004f5c:	3601      	adds	r6, #1
 8004f5e:	e7f2      	b.n	8004f46 <__libc_init_array+0x1e>
 8004f60:	08005b74 	.word	0x08005b74
 8004f64:	08005b74 	.word	0x08005b74
 8004f68:	08005b74 	.word	0x08005b74
 8004f6c:	08005b78 	.word	0x08005b78

08004f70 <__retarget_lock_init_recursive>:
 8004f70:	4770      	bx	lr

08004f72 <__retarget_lock_acquire_recursive>:
 8004f72:	4770      	bx	lr

08004f74 <__retarget_lock_release_recursive>:
 8004f74:	4770      	bx	lr
	...

08004f78 <_free_r>:
 8004f78:	b538      	push	{r3, r4, r5, lr}
 8004f7a:	4605      	mov	r5, r0
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d041      	beq.n	8005004 <_free_r+0x8c>
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f0c      	subs	r4, r1, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfb8      	it	lt
 8004f8a:	18e4      	addlt	r4, r4, r3
 8004f8c:	f000 f8e8 	bl	8005160 <__malloc_lock>
 8004f90:	4a1d      	ldr	r2, [pc, #116]	@ (8005008 <_free_r+0x90>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	b933      	cbnz	r3, 8004fa4 <_free_r+0x2c>
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	6014      	str	r4, [r2, #0]
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fa0:	f000 b8e4 	b.w	800516c <__malloc_unlock>
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d908      	bls.n	8004fba <_free_r+0x42>
 8004fa8:	6820      	ldr	r0, [r4, #0]
 8004faa:	1821      	adds	r1, r4, r0
 8004fac:	428b      	cmp	r3, r1
 8004fae:	bf01      	itttt	eq
 8004fb0:	6819      	ldreq	r1, [r3, #0]
 8004fb2:	685b      	ldreq	r3, [r3, #4]
 8004fb4:	1809      	addeq	r1, r1, r0
 8004fb6:	6021      	streq	r1, [r4, #0]
 8004fb8:	e7ed      	b.n	8004f96 <_free_r+0x1e>
 8004fba:	461a      	mov	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	b10b      	cbz	r3, 8004fc4 <_free_r+0x4c>
 8004fc0:	42a3      	cmp	r3, r4
 8004fc2:	d9fa      	bls.n	8004fba <_free_r+0x42>
 8004fc4:	6811      	ldr	r1, [r2, #0]
 8004fc6:	1850      	adds	r0, r2, r1
 8004fc8:	42a0      	cmp	r0, r4
 8004fca:	d10b      	bne.n	8004fe4 <_free_r+0x6c>
 8004fcc:	6820      	ldr	r0, [r4, #0]
 8004fce:	4401      	add	r1, r0
 8004fd0:	1850      	adds	r0, r2, r1
 8004fd2:	4283      	cmp	r3, r0
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	d1e0      	bne.n	8004f9a <_free_r+0x22>
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	6053      	str	r3, [r2, #4]
 8004fde:	4408      	add	r0, r1
 8004fe0:	6010      	str	r0, [r2, #0]
 8004fe2:	e7da      	b.n	8004f9a <_free_r+0x22>
 8004fe4:	d902      	bls.n	8004fec <_free_r+0x74>
 8004fe6:	230c      	movs	r3, #12
 8004fe8:	602b      	str	r3, [r5, #0]
 8004fea:	e7d6      	b.n	8004f9a <_free_r+0x22>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	1821      	adds	r1, r4, r0
 8004ff0:	428b      	cmp	r3, r1
 8004ff2:	bf04      	itt	eq
 8004ff4:	6819      	ldreq	r1, [r3, #0]
 8004ff6:	685b      	ldreq	r3, [r3, #4]
 8004ff8:	6063      	str	r3, [r4, #4]
 8004ffa:	bf04      	itt	eq
 8004ffc:	1809      	addeq	r1, r1, r0
 8004ffe:	6021      	streq	r1, [r4, #0]
 8005000:	6054      	str	r4, [r2, #4]
 8005002:	e7ca      	b.n	8004f9a <_free_r+0x22>
 8005004:	bd38      	pop	{r3, r4, r5, pc}
 8005006:	bf00      	nop
 8005008:	20000360 	.word	0x20000360

0800500c <malloc>:
 800500c:	4b02      	ldr	r3, [pc, #8]	@ (8005018 <malloc+0xc>)
 800500e:	4601      	mov	r1, r0
 8005010:	6818      	ldr	r0, [r3, #0]
 8005012:	f000 b825 	b.w	8005060 <_malloc_r>
 8005016:	bf00      	nop
 8005018:	20000018 	.word	0x20000018

0800501c <sbrk_aligned>:
 800501c:	b570      	push	{r4, r5, r6, lr}
 800501e:	4e0f      	ldr	r6, [pc, #60]	@ (800505c <sbrk_aligned+0x40>)
 8005020:	460c      	mov	r4, r1
 8005022:	6831      	ldr	r1, [r6, #0]
 8005024:	4605      	mov	r5, r0
 8005026:	b911      	cbnz	r1, 800502e <sbrk_aligned+0x12>
 8005028:	f000 fd3a 	bl	8005aa0 <_sbrk_r>
 800502c:	6030      	str	r0, [r6, #0]
 800502e:	4621      	mov	r1, r4
 8005030:	4628      	mov	r0, r5
 8005032:	f000 fd35 	bl	8005aa0 <_sbrk_r>
 8005036:	1c43      	adds	r3, r0, #1
 8005038:	d103      	bne.n	8005042 <sbrk_aligned+0x26>
 800503a:	f04f 34ff 	mov.w	r4, #4294967295
 800503e:	4620      	mov	r0, r4
 8005040:	bd70      	pop	{r4, r5, r6, pc}
 8005042:	1cc4      	adds	r4, r0, #3
 8005044:	f024 0403 	bic.w	r4, r4, #3
 8005048:	42a0      	cmp	r0, r4
 800504a:	d0f8      	beq.n	800503e <sbrk_aligned+0x22>
 800504c:	1a21      	subs	r1, r4, r0
 800504e:	4628      	mov	r0, r5
 8005050:	f000 fd26 	bl	8005aa0 <_sbrk_r>
 8005054:	3001      	adds	r0, #1
 8005056:	d1f2      	bne.n	800503e <sbrk_aligned+0x22>
 8005058:	e7ef      	b.n	800503a <sbrk_aligned+0x1e>
 800505a:	bf00      	nop
 800505c:	2000035c 	.word	0x2000035c

08005060 <_malloc_r>:
 8005060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005064:	1ccd      	adds	r5, r1, #3
 8005066:	f025 0503 	bic.w	r5, r5, #3
 800506a:	3508      	adds	r5, #8
 800506c:	2d0c      	cmp	r5, #12
 800506e:	bf38      	it	cc
 8005070:	250c      	movcc	r5, #12
 8005072:	2d00      	cmp	r5, #0
 8005074:	4606      	mov	r6, r0
 8005076:	db01      	blt.n	800507c <_malloc_r+0x1c>
 8005078:	42a9      	cmp	r1, r5
 800507a:	d904      	bls.n	8005086 <_malloc_r+0x26>
 800507c:	230c      	movs	r3, #12
 800507e:	6033      	str	r3, [r6, #0]
 8005080:	2000      	movs	r0, #0
 8005082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005086:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800515c <_malloc_r+0xfc>
 800508a:	f000 f869 	bl	8005160 <__malloc_lock>
 800508e:	f8d8 3000 	ldr.w	r3, [r8]
 8005092:	461c      	mov	r4, r3
 8005094:	bb44      	cbnz	r4, 80050e8 <_malloc_r+0x88>
 8005096:	4629      	mov	r1, r5
 8005098:	4630      	mov	r0, r6
 800509a:	f7ff ffbf 	bl	800501c <sbrk_aligned>
 800509e:	1c43      	adds	r3, r0, #1
 80050a0:	4604      	mov	r4, r0
 80050a2:	d158      	bne.n	8005156 <_malloc_r+0xf6>
 80050a4:	f8d8 4000 	ldr.w	r4, [r8]
 80050a8:	4627      	mov	r7, r4
 80050aa:	2f00      	cmp	r7, #0
 80050ac:	d143      	bne.n	8005136 <_malloc_r+0xd6>
 80050ae:	2c00      	cmp	r4, #0
 80050b0:	d04b      	beq.n	800514a <_malloc_r+0xea>
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	4639      	mov	r1, r7
 80050b6:	4630      	mov	r0, r6
 80050b8:	eb04 0903 	add.w	r9, r4, r3
 80050bc:	f000 fcf0 	bl	8005aa0 <_sbrk_r>
 80050c0:	4581      	cmp	r9, r0
 80050c2:	d142      	bne.n	800514a <_malloc_r+0xea>
 80050c4:	6821      	ldr	r1, [r4, #0]
 80050c6:	1a6d      	subs	r5, r5, r1
 80050c8:	4629      	mov	r1, r5
 80050ca:	4630      	mov	r0, r6
 80050cc:	f7ff ffa6 	bl	800501c <sbrk_aligned>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d03a      	beq.n	800514a <_malloc_r+0xea>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	442b      	add	r3, r5
 80050d8:	6023      	str	r3, [r4, #0]
 80050da:	f8d8 3000 	ldr.w	r3, [r8]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	bb62      	cbnz	r2, 800513c <_malloc_r+0xdc>
 80050e2:	f8c8 7000 	str.w	r7, [r8]
 80050e6:	e00f      	b.n	8005108 <_malloc_r+0xa8>
 80050e8:	6822      	ldr	r2, [r4, #0]
 80050ea:	1b52      	subs	r2, r2, r5
 80050ec:	d420      	bmi.n	8005130 <_malloc_r+0xd0>
 80050ee:	2a0b      	cmp	r2, #11
 80050f0:	d917      	bls.n	8005122 <_malloc_r+0xc2>
 80050f2:	1961      	adds	r1, r4, r5
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	6025      	str	r5, [r4, #0]
 80050f8:	bf18      	it	ne
 80050fa:	6059      	strne	r1, [r3, #4]
 80050fc:	6863      	ldr	r3, [r4, #4]
 80050fe:	bf08      	it	eq
 8005100:	f8c8 1000 	streq.w	r1, [r8]
 8005104:	5162      	str	r2, [r4, r5]
 8005106:	604b      	str	r3, [r1, #4]
 8005108:	4630      	mov	r0, r6
 800510a:	f000 f82f 	bl	800516c <__malloc_unlock>
 800510e:	f104 000b 	add.w	r0, r4, #11
 8005112:	1d23      	adds	r3, r4, #4
 8005114:	f020 0007 	bic.w	r0, r0, #7
 8005118:	1ac2      	subs	r2, r0, r3
 800511a:	bf1c      	itt	ne
 800511c:	1a1b      	subne	r3, r3, r0
 800511e:	50a3      	strne	r3, [r4, r2]
 8005120:	e7af      	b.n	8005082 <_malloc_r+0x22>
 8005122:	6862      	ldr	r2, [r4, #4]
 8005124:	42a3      	cmp	r3, r4
 8005126:	bf0c      	ite	eq
 8005128:	f8c8 2000 	streq.w	r2, [r8]
 800512c:	605a      	strne	r2, [r3, #4]
 800512e:	e7eb      	b.n	8005108 <_malloc_r+0xa8>
 8005130:	4623      	mov	r3, r4
 8005132:	6864      	ldr	r4, [r4, #4]
 8005134:	e7ae      	b.n	8005094 <_malloc_r+0x34>
 8005136:	463c      	mov	r4, r7
 8005138:	687f      	ldr	r7, [r7, #4]
 800513a:	e7b6      	b.n	80050aa <_malloc_r+0x4a>
 800513c:	461a      	mov	r2, r3
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	42a3      	cmp	r3, r4
 8005142:	d1fb      	bne.n	800513c <_malloc_r+0xdc>
 8005144:	2300      	movs	r3, #0
 8005146:	6053      	str	r3, [r2, #4]
 8005148:	e7de      	b.n	8005108 <_malloc_r+0xa8>
 800514a:	230c      	movs	r3, #12
 800514c:	6033      	str	r3, [r6, #0]
 800514e:	4630      	mov	r0, r6
 8005150:	f000 f80c 	bl	800516c <__malloc_unlock>
 8005154:	e794      	b.n	8005080 <_malloc_r+0x20>
 8005156:	6005      	str	r5, [r0, #0]
 8005158:	e7d6      	b.n	8005108 <_malloc_r+0xa8>
 800515a:	bf00      	nop
 800515c:	20000360 	.word	0x20000360

08005160 <__malloc_lock>:
 8005160:	4801      	ldr	r0, [pc, #4]	@ (8005168 <__malloc_lock+0x8>)
 8005162:	f7ff bf06 	b.w	8004f72 <__retarget_lock_acquire_recursive>
 8005166:	bf00      	nop
 8005168:	20000358 	.word	0x20000358

0800516c <__malloc_unlock>:
 800516c:	4801      	ldr	r0, [pc, #4]	@ (8005174 <__malloc_unlock+0x8>)
 800516e:	f7ff bf01 	b.w	8004f74 <__retarget_lock_release_recursive>
 8005172:	bf00      	nop
 8005174:	20000358 	.word	0x20000358

08005178 <__sfputc_r>:
 8005178:	6893      	ldr	r3, [r2, #8]
 800517a:	3b01      	subs	r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	b410      	push	{r4}
 8005180:	6093      	str	r3, [r2, #8]
 8005182:	da08      	bge.n	8005196 <__sfputc_r+0x1e>
 8005184:	6994      	ldr	r4, [r2, #24]
 8005186:	42a3      	cmp	r3, r4
 8005188:	db01      	blt.n	800518e <__sfputc_r+0x16>
 800518a:	290a      	cmp	r1, #10
 800518c:	d103      	bne.n	8005196 <__sfputc_r+0x1e>
 800518e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005192:	f000 bbcf 	b.w	8005934 <__swbuf_r>
 8005196:	6813      	ldr	r3, [r2, #0]
 8005198:	1c58      	adds	r0, r3, #1
 800519a:	6010      	str	r0, [r2, #0]
 800519c:	7019      	strb	r1, [r3, #0]
 800519e:	4608      	mov	r0, r1
 80051a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a4:	4770      	bx	lr

080051a6 <__sfputs_r>:
 80051a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051a8:	4606      	mov	r6, r0
 80051aa:	460f      	mov	r7, r1
 80051ac:	4614      	mov	r4, r2
 80051ae:	18d5      	adds	r5, r2, r3
 80051b0:	42ac      	cmp	r4, r5
 80051b2:	d101      	bne.n	80051b8 <__sfputs_r+0x12>
 80051b4:	2000      	movs	r0, #0
 80051b6:	e007      	b.n	80051c8 <__sfputs_r+0x22>
 80051b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051bc:	463a      	mov	r2, r7
 80051be:	4630      	mov	r0, r6
 80051c0:	f7ff ffda 	bl	8005178 <__sfputc_r>
 80051c4:	1c43      	adds	r3, r0, #1
 80051c6:	d1f3      	bne.n	80051b0 <__sfputs_r+0xa>
 80051c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080051cc <_vfiprintf_r>:
 80051cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	460d      	mov	r5, r1
 80051d2:	b09d      	sub	sp, #116	@ 0x74
 80051d4:	4614      	mov	r4, r2
 80051d6:	4698      	mov	r8, r3
 80051d8:	4606      	mov	r6, r0
 80051da:	b118      	cbz	r0, 80051e4 <_vfiprintf_r+0x18>
 80051dc:	6a03      	ldr	r3, [r0, #32]
 80051de:	b90b      	cbnz	r3, 80051e4 <_vfiprintf_r+0x18>
 80051e0:	f7ff fd06 	bl	8004bf0 <__sinit>
 80051e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051e6:	07d9      	lsls	r1, r3, #31
 80051e8:	d405      	bmi.n	80051f6 <_vfiprintf_r+0x2a>
 80051ea:	89ab      	ldrh	r3, [r5, #12]
 80051ec:	059a      	lsls	r2, r3, #22
 80051ee:	d402      	bmi.n	80051f6 <_vfiprintf_r+0x2a>
 80051f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051f2:	f7ff febe 	bl	8004f72 <__retarget_lock_acquire_recursive>
 80051f6:	89ab      	ldrh	r3, [r5, #12]
 80051f8:	071b      	lsls	r3, r3, #28
 80051fa:	d501      	bpl.n	8005200 <_vfiprintf_r+0x34>
 80051fc:	692b      	ldr	r3, [r5, #16]
 80051fe:	b99b      	cbnz	r3, 8005228 <_vfiprintf_r+0x5c>
 8005200:	4629      	mov	r1, r5
 8005202:	4630      	mov	r0, r6
 8005204:	f000 fbd4 	bl	80059b0 <__swsetup_r>
 8005208:	b170      	cbz	r0, 8005228 <_vfiprintf_r+0x5c>
 800520a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800520c:	07dc      	lsls	r4, r3, #31
 800520e:	d504      	bpl.n	800521a <_vfiprintf_r+0x4e>
 8005210:	f04f 30ff 	mov.w	r0, #4294967295
 8005214:	b01d      	add	sp, #116	@ 0x74
 8005216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800521a:	89ab      	ldrh	r3, [r5, #12]
 800521c:	0598      	lsls	r0, r3, #22
 800521e:	d4f7      	bmi.n	8005210 <_vfiprintf_r+0x44>
 8005220:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005222:	f7ff fea7 	bl	8004f74 <__retarget_lock_release_recursive>
 8005226:	e7f3      	b.n	8005210 <_vfiprintf_r+0x44>
 8005228:	2300      	movs	r3, #0
 800522a:	9309      	str	r3, [sp, #36]	@ 0x24
 800522c:	2320      	movs	r3, #32
 800522e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005232:	f8cd 800c 	str.w	r8, [sp, #12]
 8005236:	2330      	movs	r3, #48	@ 0x30
 8005238:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053e8 <_vfiprintf_r+0x21c>
 800523c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005240:	f04f 0901 	mov.w	r9, #1
 8005244:	4623      	mov	r3, r4
 8005246:	469a      	mov	sl, r3
 8005248:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524c:	b10a      	cbz	r2, 8005252 <_vfiprintf_r+0x86>
 800524e:	2a25      	cmp	r2, #37	@ 0x25
 8005250:	d1f9      	bne.n	8005246 <_vfiprintf_r+0x7a>
 8005252:	ebba 0b04 	subs.w	fp, sl, r4
 8005256:	d00b      	beq.n	8005270 <_vfiprintf_r+0xa4>
 8005258:	465b      	mov	r3, fp
 800525a:	4622      	mov	r2, r4
 800525c:	4629      	mov	r1, r5
 800525e:	4630      	mov	r0, r6
 8005260:	f7ff ffa1 	bl	80051a6 <__sfputs_r>
 8005264:	3001      	adds	r0, #1
 8005266:	f000 80a7 	beq.w	80053b8 <_vfiprintf_r+0x1ec>
 800526a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800526c:	445a      	add	r2, fp
 800526e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005270:	f89a 3000 	ldrb.w	r3, [sl]
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 809f 	beq.w	80053b8 <_vfiprintf_r+0x1ec>
 800527a:	2300      	movs	r3, #0
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005284:	f10a 0a01 	add.w	sl, sl, #1
 8005288:	9304      	str	r3, [sp, #16]
 800528a:	9307      	str	r3, [sp, #28]
 800528c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005290:	931a      	str	r3, [sp, #104]	@ 0x68
 8005292:	4654      	mov	r4, sl
 8005294:	2205      	movs	r2, #5
 8005296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529a:	4853      	ldr	r0, [pc, #332]	@ (80053e8 <_vfiprintf_r+0x21c>)
 800529c:	f7fa ff98 	bl	80001d0 <memchr>
 80052a0:	9a04      	ldr	r2, [sp, #16]
 80052a2:	b9d8      	cbnz	r0, 80052dc <_vfiprintf_r+0x110>
 80052a4:	06d1      	lsls	r1, r2, #27
 80052a6:	bf44      	itt	mi
 80052a8:	2320      	movmi	r3, #32
 80052aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ae:	0713      	lsls	r3, r2, #28
 80052b0:	bf44      	itt	mi
 80052b2:	232b      	movmi	r3, #43	@ 0x2b
 80052b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052b8:	f89a 3000 	ldrb.w	r3, [sl]
 80052bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80052be:	d015      	beq.n	80052ec <_vfiprintf_r+0x120>
 80052c0:	9a07      	ldr	r2, [sp, #28]
 80052c2:	4654      	mov	r4, sl
 80052c4:	2000      	movs	r0, #0
 80052c6:	f04f 0c0a 	mov.w	ip, #10
 80052ca:	4621      	mov	r1, r4
 80052cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d0:	3b30      	subs	r3, #48	@ 0x30
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	d94b      	bls.n	800536e <_vfiprintf_r+0x1a2>
 80052d6:	b1b0      	cbz	r0, 8005306 <_vfiprintf_r+0x13a>
 80052d8:	9207      	str	r2, [sp, #28]
 80052da:	e014      	b.n	8005306 <_vfiprintf_r+0x13a>
 80052dc:	eba0 0308 	sub.w	r3, r0, r8
 80052e0:	fa09 f303 	lsl.w	r3, r9, r3
 80052e4:	4313      	orrs	r3, r2
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	46a2      	mov	sl, r4
 80052ea:	e7d2      	b.n	8005292 <_vfiprintf_r+0xc6>
 80052ec:	9b03      	ldr	r3, [sp, #12]
 80052ee:	1d19      	adds	r1, r3, #4
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	9103      	str	r1, [sp, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfbb      	ittet	lt
 80052f8:	425b      	neglt	r3, r3
 80052fa:	f042 0202 	orrlt.w	r2, r2, #2
 80052fe:	9307      	strge	r3, [sp, #28]
 8005300:	9307      	strlt	r3, [sp, #28]
 8005302:	bfb8      	it	lt
 8005304:	9204      	strlt	r2, [sp, #16]
 8005306:	7823      	ldrb	r3, [r4, #0]
 8005308:	2b2e      	cmp	r3, #46	@ 0x2e
 800530a:	d10a      	bne.n	8005322 <_vfiprintf_r+0x156>
 800530c:	7863      	ldrb	r3, [r4, #1]
 800530e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005310:	d132      	bne.n	8005378 <_vfiprintf_r+0x1ac>
 8005312:	9b03      	ldr	r3, [sp, #12]
 8005314:	1d1a      	adds	r2, r3, #4
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	9203      	str	r2, [sp, #12]
 800531a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800531e:	3402      	adds	r4, #2
 8005320:	9305      	str	r3, [sp, #20]
 8005322:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053f8 <_vfiprintf_r+0x22c>
 8005326:	7821      	ldrb	r1, [r4, #0]
 8005328:	2203      	movs	r2, #3
 800532a:	4650      	mov	r0, sl
 800532c:	f7fa ff50 	bl	80001d0 <memchr>
 8005330:	b138      	cbz	r0, 8005342 <_vfiprintf_r+0x176>
 8005332:	9b04      	ldr	r3, [sp, #16]
 8005334:	eba0 000a 	sub.w	r0, r0, sl
 8005338:	2240      	movs	r2, #64	@ 0x40
 800533a:	4082      	lsls	r2, r0
 800533c:	4313      	orrs	r3, r2
 800533e:	3401      	adds	r4, #1
 8005340:	9304      	str	r3, [sp, #16]
 8005342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005346:	4829      	ldr	r0, [pc, #164]	@ (80053ec <_vfiprintf_r+0x220>)
 8005348:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800534c:	2206      	movs	r2, #6
 800534e:	f7fa ff3f 	bl	80001d0 <memchr>
 8005352:	2800      	cmp	r0, #0
 8005354:	d03f      	beq.n	80053d6 <_vfiprintf_r+0x20a>
 8005356:	4b26      	ldr	r3, [pc, #152]	@ (80053f0 <_vfiprintf_r+0x224>)
 8005358:	bb1b      	cbnz	r3, 80053a2 <_vfiprintf_r+0x1d6>
 800535a:	9b03      	ldr	r3, [sp, #12]
 800535c:	3307      	adds	r3, #7
 800535e:	f023 0307 	bic.w	r3, r3, #7
 8005362:	3308      	adds	r3, #8
 8005364:	9303      	str	r3, [sp, #12]
 8005366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005368:	443b      	add	r3, r7
 800536a:	9309      	str	r3, [sp, #36]	@ 0x24
 800536c:	e76a      	b.n	8005244 <_vfiprintf_r+0x78>
 800536e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005372:	460c      	mov	r4, r1
 8005374:	2001      	movs	r0, #1
 8005376:	e7a8      	b.n	80052ca <_vfiprintf_r+0xfe>
 8005378:	2300      	movs	r3, #0
 800537a:	3401      	adds	r4, #1
 800537c:	9305      	str	r3, [sp, #20]
 800537e:	4619      	mov	r1, r3
 8005380:	f04f 0c0a 	mov.w	ip, #10
 8005384:	4620      	mov	r0, r4
 8005386:	f810 2b01 	ldrb.w	r2, [r0], #1
 800538a:	3a30      	subs	r2, #48	@ 0x30
 800538c:	2a09      	cmp	r2, #9
 800538e:	d903      	bls.n	8005398 <_vfiprintf_r+0x1cc>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0c6      	beq.n	8005322 <_vfiprintf_r+0x156>
 8005394:	9105      	str	r1, [sp, #20]
 8005396:	e7c4      	b.n	8005322 <_vfiprintf_r+0x156>
 8005398:	fb0c 2101 	mla	r1, ip, r1, r2
 800539c:	4604      	mov	r4, r0
 800539e:	2301      	movs	r3, #1
 80053a0:	e7f0      	b.n	8005384 <_vfiprintf_r+0x1b8>
 80053a2:	ab03      	add	r3, sp, #12
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	462a      	mov	r2, r5
 80053a8:	4b12      	ldr	r3, [pc, #72]	@ (80053f4 <_vfiprintf_r+0x228>)
 80053aa:	a904      	add	r1, sp, #16
 80053ac:	4630      	mov	r0, r6
 80053ae:	f3af 8000 	nop.w
 80053b2:	4607      	mov	r7, r0
 80053b4:	1c78      	adds	r0, r7, #1
 80053b6:	d1d6      	bne.n	8005366 <_vfiprintf_r+0x19a>
 80053b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80053ba:	07d9      	lsls	r1, r3, #31
 80053bc:	d405      	bmi.n	80053ca <_vfiprintf_r+0x1fe>
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	059a      	lsls	r2, r3, #22
 80053c2:	d402      	bmi.n	80053ca <_vfiprintf_r+0x1fe>
 80053c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80053c6:	f7ff fdd5 	bl	8004f74 <__retarget_lock_release_recursive>
 80053ca:	89ab      	ldrh	r3, [r5, #12]
 80053cc:	065b      	lsls	r3, r3, #25
 80053ce:	f53f af1f 	bmi.w	8005210 <_vfiprintf_r+0x44>
 80053d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053d4:	e71e      	b.n	8005214 <_vfiprintf_r+0x48>
 80053d6:	ab03      	add	r3, sp, #12
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	462a      	mov	r2, r5
 80053dc:	4b05      	ldr	r3, [pc, #20]	@ (80053f4 <_vfiprintf_r+0x228>)
 80053de:	a904      	add	r1, sp, #16
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 f879 	bl	80054d8 <_printf_i>
 80053e6:	e7e4      	b.n	80053b2 <_vfiprintf_r+0x1e6>
 80053e8:	08005b38 	.word	0x08005b38
 80053ec:	08005b42 	.word	0x08005b42
 80053f0:	00000000 	.word	0x00000000
 80053f4:	080051a7 	.word	0x080051a7
 80053f8:	08005b3e 	.word	0x08005b3e

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4698      	mov	r8, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	3b00      	subs	r3, #0
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005458:	4641      	mov	r1, r8
 800545a:	4638      	mov	r0, r7
 800545c:	47c8      	blx	r9
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	f003 0306 	and.w	r3, r3, #6
 800546a:	2b04      	cmp	r3, #4
 800546c:	bf02      	ittt	eq
 800546e:	68e5      	ldreq	r5, [r4, #12]
 8005470:	6833      	ldreq	r3, [r6, #0]
 8005472:	1aed      	subeq	r5, r5, r3
 8005474:	68a3      	ldr	r3, [r4, #8]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4641      	mov	r1, r8
 8005498:	4638      	mov	r0, r7
 800549a:	47c8      	blx	r9
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	@ 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4641      	mov	r1, r8
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c8      	blx	r9
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80054e0:	2f78      	cmp	r7, #120	@ 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	@ 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d2 	beq.w	800569e <_printf_i+0x1c6>
 80054fa:	2f58      	cmp	r7, #88	@ 0x58
 80054fc:	f000 80b9 	beq.w	8005672 <_printf_i+0x19a>
 8005500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	@ (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005685 	.word	0x08005685
 8005548:	080055af 	.word	0x080055af
 800554c:	0800563f 	.word	0x0800563f
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056a7 	.word	0x080056a7
 800555c:	08005501 	.word	0x08005501
 8005560:	080055af 	.word	0x080055af
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	08005647 	.word	0x08005647
 8005570:	6833      	ldr	r3, [r6, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6032      	str	r2, [r6, #0]
 8005578:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e09d      	b.n	80056c0 <_printf_i+0x1e8>
 8005584:	6833      	ldr	r3, [r6, #0]
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	1d19      	adds	r1, r3, #4
 800558a:	6031      	str	r1, [r6, #0]
 800558c:	0606      	lsls	r6, r0, #24
 800558e:	d501      	bpl.n	8005594 <_printf_i+0xbc>
 8005590:	681d      	ldr	r5, [r3, #0]
 8005592:	e003      	b.n	800559c <_printf_i+0xc4>
 8005594:	0645      	lsls	r5, r0, #25
 8005596:	d5fb      	bpl.n	8005590 <_printf_i+0xb8>
 8005598:	f9b3 5000 	ldrsh.w	r5, [r3]
 800559c:	2d00      	cmp	r5, #0
 800559e:	da03      	bge.n	80055a8 <_printf_i+0xd0>
 80055a0:	232d      	movs	r3, #45	@ 0x2d
 80055a2:	426d      	negs	r5, r5
 80055a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055a8:	4859      	ldr	r0, [pc, #356]	@ (8005710 <_printf_i+0x238>)
 80055aa:	230a      	movs	r3, #10
 80055ac:	e011      	b.n	80055d2 <_printf_i+0xfa>
 80055ae:	6821      	ldr	r1, [r4, #0]
 80055b0:	6833      	ldr	r3, [r6, #0]
 80055b2:	0608      	lsls	r0, r1, #24
 80055b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80055b8:	d402      	bmi.n	80055c0 <_printf_i+0xe8>
 80055ba:	0649      	lsls	r1, r1, #25
 80055bc:	bf48      	it	mi
 80055be:	b2ad      	uxthmi	r5, r5
 80055c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80055c2:	4853      	ldr	r0, [pc, #332]	@ (8005710 <_printf_i+0x238>)
 80055c4:	6033      	str	r3, [r6, #0]
 80055c6:	bf14      	ite	ne
 80055c8:	230a      	movne	r3, #10
 80055ca:	2308      	moveq	r3, #8
 80055cc:	2100      	movs	r1, #0
 80055ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80055d2:	6866      	ldr	r6, [r4, #4]
 80055d4:	60a6      	str	r6, [r4, #8]
 80055d6:	2e00      	cmp	r6, #0
 80055d8:	bfa2      	ittt	ge
 80055da:	6821      	ldrge	r1, [r4, #0]
 80055dc:	f021 0104 	bicge.w	r1, r1, #4
 80055e0:	6021      	strge	r1, [r4, #0]
 80055e2:	b90d      	cbnz	r5, 80055e8 <_printf_i+0x110>
 80055e4:	2e00      	cmp	r6, #0
 80055e6:	d04b      	beq.n	8005680 <_printf_i+0x1a8>
 80055e8:	4616      	mov	r6, r2
 80055ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80055ee:	fb03 5711 	mls	r7, r3, r1, r5
 80055f2:	5dc7      	ldrb	r7, [r0, r7]
 80055f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80055f8:	462f      	mov	r7, r5
 80055fa:	42bb      	cmp	r3, r7
 80055fc:	460d      	mov	r5, r1
 80055fe:	d9f4      	bls.n	80055ea <_printf_i+0x112>
 8005600:	2b08      	cmp	r3, #8
 8005602:	d10b      	bne.n	800561c <_printf_i+0x144>
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	07df      	lsls	r7, r3, #31
 8005608:	d508      	bpl.n	800561c <_printf_i+0x144>
 800560a:	6923      	ldr	r3, [r4, #16]
 800560c:	6861      	ldr	r1, [r4, #4]
 800560e:	4299      	cmp	r1, r3
 8005610:	bfde      	ittt	le
 8005612:	2330      	movle	r3, #48	@ 0x30
 8005614:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005618:	f106 36ff 	addle.w	r6, r6, #4294967295
 800561c:	1b92      	subs	r2, r2, r6
 800561e:	6122      	str	r2, [r4, #16]
 8005620:	f8cd a000 	str.w	sl, [sp]
 8005624:	464b      	mov	r3, r9
 8005626:	aa03      	add	r2, sp, #12
 8005628:	4621      	mov	r1, r4
 800562a:	4640      	mov	r0, r8
 800562c:	f7ff fee6 	bl	80053fc <_printf_common>
 8005630:	3001      	adds	r0, #1
 8005632:	d14a      	bne.n	80056ca <_printf_i+0x1f2>
 8005634:	f04f 30ff 	mov.w	r0, #4294967295
 8005638:	b004      	add	sp, #16
 800563a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	f043 0320 	orr.w	r3, r3, #32
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	4833      	ldr	r0, [pc, #204]	@ (8005714 <_printf_i+0x23c>)
 8005648:	2778      	movs	r7, #120	@ 0x78
 800564a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	6831      	ldr	r1, [r6, #0]
 8005652:	061f      	lsls	r7, r3, #24
 8005654:	f851 5b04 	ldr.w	r5, [r1], #4
 8005658:	d402      	bmi.n	8005660 <_printf_i+0x188>
 800565a:	065f      	lsls	r7, r3, #25
 800565c:	bf48      	it	mi
 800565e:	b2ad      	uxthmi	r5, r5
 8005660:	6031      	str	r1, [r6, #0]
 8005662:	07d9      	lsls	r1, r3, #31
 8005664:	bf44      	itt	mi
 8005666:	f043 0320 	orrmi.w	r3, r3, #32
 800566a:	6023      	strmi	r3, [r4, #0]
 800566c:	b11d      	cbz	r5, 8005676 <_printf_i+0x19e>
 800566e:	2310      	movs	r3, #16
 8005670:	e7ac      	b.n	80055cc <_printf_i+0xf4>
 8005672:	4827      	ldr	r0, [pc, #156]	@ (8005710 <_printf_i+0x238>)
 8005674:	e7e9      	b.n	800564a <_printf_i+0x172>
 8005676:	6823      	ldr	r3, [r4, #0]
 8005678:	f023 0320 	bic.w	r3, r3, #32
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	e7f6      	b.n	800566e <_printf_i+0x196>
 8005680:	4616      	mov	r6, r2
 8005682:	e7bd      	b.n	8005600 <_printf_i+0x128>
 8005684:	6833      	ldr	r3, [r6, #0]
 8005686:	6825      	ldr	r5, [r4, #0]
 8005688:	6961      	ldr	r1, [r4, #20]
 800568a:	1d18      	adds	r0, r3, #4
 800568c:	6030      	str	r0, [r6, #0]
 800568e:	062e      	lsls	r6, r5, #24
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	d501      	bpl.n	8005698 <_printf_i+0x1c0>
 8005694:	6019      	str	r1, [r3, #0]
 8005696:	e002      	b.n	800569e <_printf_i+0x1c6>
 8005698:	0668      	lsls	r0, r5, #25
 800569a:	d5fb      	bpl.n	8005694 <_printf_i+0x1bc>
 800569c:	8019      	strh	r1, [r3, #0]
 800569e:	2300      	movs	r3, #0
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	4616      	mov	r6, r2
 80056a4:	e7bc      	b.n	8005620 <_printf_i+0x148>
 80056a6:	6833      	ldr	r3, [r6, #0]
 80056a8:	1d1a      	adds	r2, r3, #4
 80056aa:	6032      	str	r2, [r6, #0]
 80056ac:	681e      	ldr	r6, [r3, #0]
 80056ae:	6862      	ldr	r2, [r4, #4]
 80056b0:	2100      	movs	r1, #0
 80056b2:	4630      	mov	r0, r6
 80056b4:	f7fa fd8c 	bl	80001d0 <memchr>
 80056b8:	b108      	cbz	r0, 80056be <_printf_i+0x1e6>
 80056ba:	1b80      	subs	r0, r0, r6
 80056bc:	6060      	str	r0, [r4, #4]
 80056be:	6863      	ldr	r3, [r4, #4]
 80056c0:	6123      	str	r3, [r4, #16]
 80056c2:	2300      	movs	r3, #0
 80056c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056c8:	e7aa      	b.n	8005620 <_printf_i+0x148>
 80056ca:	6923      	ldr	r3, [r4, #16]
 80056cc:	4632      	mov	r2, r6
 80056ce:	4649      	mov	r1, r9
 80056d0:	4640      	mov	r0, r8
 80056d2:	47d0      	blx	sl
 80056d4:	3001      	adds	r0, #1
 80056d6:	d0ad      	beq.n	8005634 <_printf_i+0x15c>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	079b      	lsls	r3, r3, #30
 80056dc:	d413      	bmi.n	8005706 <_printf_i+0x22e>
 80056de:	68e0      	ldr	r0, [r4, #12]
 80056e0:	9b03      	ldr	r3, [sp, #12]
 80056e2:	4298      	cmp	r0, r3
 80056e4:	bfb8      	it	lt
 80056e6:	4618      	movlt	r0, r3
 80056e8:	e7a6      	b.n	8005638 <_printf_i+0x160>
 80056ea:	2301      	movs	r3, #1
 80056ec:	4632      	mov	r2, r6
 80056ee:	4649      	mov	r1, r9
 80056f0:	4640      	mov	r0, r8
 80056f2:	47d0      	blx	sl
 80056f4:	3001      	adds	r0, #1
 80056f6:	d09d      	beq.n	8005634 <_printf_i+0x15c>
 80056f8:	3501      	adds	r5, #1
 80056fa:	68e3      	ldr	r3, [r4, #12]
 80056fc:	9903      	ldr	r1, [sp, #12]
 80056fe:	1a5b      	subs	r3, r3, r1
 8005700:	42ab      	cmp	r3, r5
 8005702:	dcf2      	bgt.n	80056ea <_printf_i+0x212>
 8005704:	e7eb      	b.n	80056de <_printf_i+0x206>
 8005706:	2500      	movs	r5, #0
 8005708:	f104 0619 	add.w	r6, r4, #25
 800570c:	e7f5      	b.n	80056fa <_printf_i+0x222>
 800570e:	bf00      	nop
 8005710:	08005b49 	.word	0x08005b49
 8005714:	08005b5a 	.word	0x08005b5a

08005718 <__sflush_r>:
 8005718:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	0716      	lsls	r6, r2, #28
 8005722:	4605      	mov	r5, r0
 8005724:	460c      	mov	r4, r1
 8005726:	d454      	bmi.n	80057d2 <__sflush_r+0xba>
 8005728:	684b      	ldr	r3, [r1, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	dc02      	bgt.n	8005734 <__sflush_r+0x1c>
 800572e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005730:	2b00      	cmp	r3, #0
 8005732:	dd48      	ble.n	80057c6 <__sflush_r+0xae>
 8005734:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005736:	2e00      	cmp	r6, #0
 8005738:	d045      	beq.n	80057c6 <__sflush_r+0xae>
 800573a:	2300      	movs	r3, #0
 800573c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005740:	682f      	ldr	r7, [r5, #0]
 8005742:	6a21      	ldr	r1, [r4, #32]
 8005744:	602b      	str	r3, [r5, #0]
 8005746:	d030      	beq.n	80057aa <__sflush_r+0x92>
 8005748:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	0759      	lsls	r1, r3, #29
 800574e:	d505      	bpl.n	800575c <__sflush_r+0x44>
 8005750:	6863      	ldr	r3, [r4, #4]
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005756:	b10b      	cbz	r3, 800575c <__sflush_r+0x44>
 8005758:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800575a:	1ad2      	subs	r2, r2, r3
 800575c:	2300      	movs	r3, #0
 800575e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005760:	6a21      	ldr	r1, [r4, #32]
 8005762:	4628      	mov	r0, r5
 8005764:	47b0      	blx	r6
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	89a3      	ldrh	r3, [r4, #12]
 800576a:	d106      	bne.n	800577a <__sflush_r+0x62>
 800576c:	6829      	ldr	r1, [r5, #0]
 800576e:	291d      	cmp	r1, #29
 8005770:	d82b      	bhi.n	80057ca <__sflush_r+0xb2>
 8005772:	4a2a      	ldr	r2, [pc, #168]	@ (800581c <__sflush_r+0x104>)
 8005774:	410a      	asrs	r2, r1
 8005776:	07d6      	lsls	r6, r2, #31
 8005778:	d427      	bmi.n	80057ca <__sflush_r+0xb2>
 800577a:	2200      	movs	r2, #0
 800577c:	6062      	str	r2, [r4, #4]
 800577e:	04d9      	lsls	r1, r3, #19
 8005780:	6922      	ldr	r2, [r4, #16]
 8005782:	6022      	str	r2, [r4, #0]
 8005784:	d504      	bpl.n	8005790 <__sflush_r+0x78>
 8005786:	1c42      	adds	r2, r0, #1
 8005788:	d101      	bne.n	800578e <__sflush_r+0x76>
 800578a:	682b      	ldr	r3, [r5, #0]
 800578c:	b903      	cbnz	r3, 8005790 <__sflush_r+0x78>
 800578e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005790:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005792:	602f      	str	r7, [r5, #0]
 8005794:	b1b9      	cbz	r1, 80057c6 <__sflush_r+0xae>
 8005796:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800579a:	4299      	cmp	r1, r3
 800579c:	d002      	beq.n	80057a4 <__sflush_r+0x8c>
 800579e:	4628      	mov	r0, r5
 80057a0:	f7ff fbea 	bl	8004f78 <_free_r>
 80057a4:	2300      	movs	r3, #0
 80057a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80057a8:	e00d      	b.n	80057c6 <__sflush_r+0xae>
 80057aa:	2301      	movs	r3, #1
 80057ac:	4628      	mov	r0, r5
 80057ae:	47b0      	blx	r6
 80057b0:	4602      	mov	r2, r0
 80057b2:	1c50      	adds	r0, r2, #1
 80057b4:	d1c9      	bne.n	800574a <__sflush_r+0x32>
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d0c6      	beq.n	800574a <__sflush_r+0x32>
 80057bc:	2b1d      	cmp	r3, #29
 80057be:	d001      	beq.n	80057c4 <__sflush_r+0xac>
 80057c0:	2b16      	cmp	r3, #22
 80057c2:	d11e      	bne.n	8005802 <__sflush_r+0xea>
 80057c4:	602f      	str	r7, [r5, #0]
 80057c6:	2000      	movs	r0, #0
 80057c8:	e022      	b.n	8005810 <__sflush_r+0xf8>
 80057ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ce:	b21b      	sxth	r3, r3
 80057d0:	e01b      	b.n	800580a <__sflush_r+0xf2>
 80057d2:	690f      	ldr	r7, [r1, #16]
 80057d4:	2f00      	cmp	r7, #0
 80057d6:	d0f6      	beq.n	80057c6 <__sflush_r+0xae>
 80057d8:	0793      	lsls	r3, r2, #30
 80057da:	680e      	ldr	r6, [r1, #0]
 80057dc:	bf08      	it	eq
 80057de:	694b      	ldreq	r3, [r1, #20]
 80057e0:	600f      	str	r7, [r1, #0]
 80057e2:	bf18      	it	ne
 80057e4:	2300      	movne	r3, #0
 80057e6:	eba6 0807 	sub.w	r8, r6, r7
 80057ea:	608b      	str	r3, [r1, #8]
 80057ec:	f1b8 0f00 	cmp.w	r8, #0
 80057f0:	dde9      	ble.n	80057c6 <__sflush_r+0xae>
 80057f2:	6a21      	ldr	r1, [r4, #32]
 80057f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80057f6:	4643      	mov	r3, r8
 80057f8:	463a      	mov	r2, r7
 80057fa:	4628      	mov	r0, r5
 80057fc:	47b0      	blx	r6
 80057fe:	2800      	cmp	r0, #0
 8005800:	dc08      	bgt.n	8005814 <__sflush_r+0xfc>
 8005802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005806:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005814:	4407      	add	r7, r0
 8005816:	eba8 0800 	sub.w	r8, r8, r0
 800581a:	e7e7      	b.n	80057ec <__sflush_r+0xd4>
 800581c:	dfbffffe 	.word	0xdfbffffe

08005820 <_fflush_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	690b      	ldr	r3, [r1, #16]
 8005824:	4605      	mov	r5, r0
 8005826:	460c      	mov	r4, r1
 8005828:	b913      	cbnz	r3, 8005830 <_fflush_r+0x10>
 800582a:	2500      	movs	r5, #0
 800582c:	4628      	mov	r0, r5
 800582e:	bd38      	pop	{r3, r4, r5, pc}
 8005830:	b118      	cbz	r0, 800583a <_fflush_r+0x1a>
 8005832:	6a03      	ldr	r3, [r0, #32]
 8005834:	b90b      	cbnz	r3, 800583a <_fflush_r+0x1a>
 8005836:	f7ff f9db 	bl	8004bf0 <__sinit>
 800583a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d0f3      	beq.n	800582a <_fflush_r+0xa>
 8005842:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005844:	07d0      	lsls	r0, r2, #31
 8005846:	d404      	bmi.n	8005852 <_fflush_r+0x32>
 8005848:	0599      	lsls	r1, r3, #22
 800584a:	d402      	bmi.n	8005852 <_fflush_r+0x32>
 800584c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800584e:	f7ff fb90 	bl	8004f72 <__retarget_lock_acquire_recursive>
 8005852:	4628      	mov	r0, r5
 8005854:	4621      	mov	r1, r4
 8005856:	f7ff ff5f 	bl	8005718 <__sflush_r>
 800585a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800585c:	07da      	lsls	r2, r3, #31
 800585e:	4605      	mov	r5, r0
 8005860:	d4e4      	bmi.n	800582c <_fflush_r+0xc>
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	059b      	lsls	r3, r3, #22
 8005866:	d4e1      	bmi.n	800582c <_fflush_r+0xc>
 8005868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800586a:	f7ff fb83 	bl	8004f74 <__retarget_lock_release_recursive>
 800586e:	e7dd      	b.n	800582c <_fflush_r+0xc>

08005870 <__swhatbuf_r>:
 8005870:	b570      	push	{r4, r5, r6, lr}
 8005872:	460c      	mov	r4, r1
 8005874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005878:	2900      	cmp	r1, #0
 800587a:	b096      	sub	sp, #88	@ 0x58
 800587c:	4615      	mov	r5, r2
 800587e:	461e      	mov	r6, r3
 8005880:	da0d      	bge.n	800589e <__swhatbuf_r+0x2e>
 8005882:	89a3      	ldrh	r3, [r4, #12]
 8005884:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005888:	f04f 0100 	mov.w	r1, #0
 800588c:	bf14      	ite	ne
 800588e:	2340      	movne	r3, #64	@ 0x40
 8005890:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005894:	2000      	movs	r0, #0
 8005896:	6031      	str	r1, [r6, #0]
 8005898:	602b      	str	r3, [r5, #0]
 800589a:	b016      	add	sp, #88	@ 0x58
 800589c:	bd70      	pop	{r4, r5, r6, pc}
 800589e:	466a      	mov	r2, sp
 80058a0:	f000 f8dc 	bl	8005a5c <_fstat_r>
 80058a4:	2800      	cmp	r0, #0
 80058a6:	dbec      	blt.n	8005882 <__swhatbuf_r+0x12>
 80058a8:	9901      	ldr	r1, [sp, #4]
 80058aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80058ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80058b2:	4259      	negs	r1, r3
 80058b4:	4159      	adcs	r1, r3
 80058b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058ba:	e7eb      	b.n	8005894 <__swhatbuf_r+0x24>

080058bc <__smakebuf_r>:
 80058bc:	898b      	ldrh	r3, [r1, #12]
 80058be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058c0:	079d      	lsls	r5, r3, #30
 80058c2:	4606      	mov	r6, r0
 80058c4:	460c      	mov	r4, r1
 80058c6:	d507      	bpl.n	80058d8 <__smakebuf_r+0x1c>
 80058c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80058cc:	6023      	str	r3, [r4, #0]
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	2301      	movs	r3, #1
 80058d2:	6163      	str	r3, [r4, #20]
 80058d4:	b003      	add	sp, #12
 80058d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058d8:	ab01      	add	r3, sp, #4
 80058da:	466a      	mov	r2, sp
 80058dc:	f7ff ffc8 	bl	8005870 <__swhatbuf_r>
 80058e0:	9f00      	ldr	r7, [sp, #0]
 80058e2:	4605      	mov	r5, r0
 80058e4:	4639      	mov	r1, r7
 80058e6:	4630      	mov	r0, r6
 80058e8:	f7ff fbba 	bl	8005060 <_malloc_r>
 80058ec:	b948      	cbnz	r0, 8005902 <__smakebuf_r+0x46>
 80058ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058f2:	059a      	lsls	r2, r3, #22
 80058f4:	d4ee      	bmi.n	80058d4 <__smakebuf_r+0x18>
 80058f6:	f023 0303 	bic.w	r3, r3, #3
 80058fa:	f043 0302 	orr.w	r3, r3, #2
 80058fe:	81a3      	strh	r3, [r4, #12]
 8005900:	e7e2      	b.n	80058c8 <__smakebuf_r+0xc>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	6020      	str	r0, [r4, #0]
 8005906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	9b01      	ldr	r3, [sp, #4]
 800590e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005912:	b15b      	cbz	r3, 800592c <__smakebuf_r+0x70>
 8005914:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005918:	4630      	mov	r0, r6
 800591a:	f000 f8b1 	bl	8005a80 <_isatty_r>
 800591e:	b128      	cbz	r0, 800592c <__smakebuf_r+0x70>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	f023 0303 	bic.w	r3, r3, #3
 8005926:	f043 0301 	orr.w	r3, r3, #1
 800592a:	81a3      	strh	r3, [r4, #12]
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	431d      	orrs	r5, r3
 8005930:	81a5      	strh	r5, [r4, #12]
 8005932:	e7cf      	b.n	80058d4 <__smakebuf_r+0x18>

08005934 <__swbuf_r>:
 8005934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005936:	460e      	mov	r6, r1
 8005938:	4614      	mov	r4, r2
 800593a:	4605      	mov	r5, r0
 800593c:	b118      	cbz	r0, 8005946 <__swbuf_r+0x12>
 800593e:	6a03      	ldr	r3, [r0, #32]
 8005940:	b90b      	cbnz	r3, 8005946 <__swbuf_r+0x12>
 8005942:	f7ff f955 	bl	8004bf0 <__sinit>
 8005946:	69a3      	ldr	r3, [r4, #24]
 8005948:	60a3      	str	r3, [r4, #8]
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	071a      	lsls	r2, r3, #28
 800594e:	d501      	bpl.n	8005954 <__swbuf_r+0x20>
 8005950:	6923      	ldr	r3, [r4, #16]
 8005952:	b943      	cbnz	r3, 8005966 <__swbuf_r+0x32>
 8005954:	4621      	mov	r1, r4
 8005956:	4628      	mov	r0, r5
 8005958:	f000 f82a 	bl	80059b0 <__swsetup_r>
 800595c:	b118      	cbz	r0, 8005966 <__swbuf_r+0x32>
 800595e:	f04f 37ff 	mov.w	r7, #4294967295
 8005962:	4638      	mov	r0, r7
 8005964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	6922      	ldr	r2, [r4, #16]
 800596a:	1a98      	subs	r0, r3, r2
 800596c:	6963      	ldr	r3, [r4, #20]
 800596e:	b2f6      	uxtb	r6, r6
 8005970:	4283      	cmp	r3, r0
 8005972:	4637      	mov	r7, r6
 8005974:	dc05      	bgt.n	8005982 <__swbuf_r+0x4e>
 8005976:	4621      	mov	r1, r4
 8005978:	4628      	mov	r0, r5
 800597a:	f7ff ff51 	bl	8005820 <_fflush_r>
 800597e:	2800      	cmp	r0, #0
 8005980:	d1ed      	bne.n	800595e <__swbuf_r+0x2a>
 8005982:	68a3      	ldr	r3, [r4, #8]
 8005984:	3b01      	subs	r3, #1
 8005986:	60a3      	str	r3, [r4, #8]
 8005988:	6823      	ldr	r3, [r4, #0]
 800598a:	1c5a      	adds	r2, r3, #1
 800598c:	6022      	str	r2, [r4, #0]
 800598e:	701e      	strb	r6, [r3, #0]
 8005990:	6962      	ldr	r2, [r4, #20]
 8005992:	1c43      	adds	r3, r0, #1
 8005994:	429a      	cmp	r2, r3
 8005996:	d004      	beq.n	80059a2 <__swbuf_r+0x6e>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	07db      	lsls	r3, r3, #31
 800599c:	d5e1      	bpl.n	8005962 <__swbuf_r+0x2e>
 800599e:	2e0a      	cmp	r6, #10
 80059a0:	d1df      	bne.n	8005962 <__swbuf_r+0x2e>
 80059a2:	4621      	mov	r1, r4
 80059a4:	4628      	mov	r0, r5
 80059a6:	f7ff ff3b 	bl	8005820 <_fflush_r>
 80059aa:	2800      	cmp	r0, #0
 80059ac:	d0d9      	beq.n	8005962 <__swbuf_r+0x2e>
 80059ae:	e7d6      	b.n	800595e <__swbuf_r+0x2a>

080059b0 <__swsetup_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4b29      	ldr	r3, [pc, #164]	@ (8005a58 <__swsetup_r+0xa8>)
 80059b4:	4605      	mov	r5, r0
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	460c      	mov	r4, r1
 80059ba:	b118      	cbz	r0, 80059c4 <__swsetup_r+0x14>
 80059bc:	6a03      	ldr	r3, [r0, #32]
 80059be:	b90b      	cbnz	r3, 80059c4 <__swsetup_r+0x14>
 80059c0:	f7ff f916 	bl	8004bf0 <__sinit>
 80059c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059c8:	0719      	lsls	r1, r3, #28
 80059ca:	d422      	bmi.n	8005a12 <__swsetup_r+0x62>
 80059cc:	06da      	lsls	r2, r3, #27
 80059ce:	d407      	bmi.n	80059e0 <__swsetup_r+0x30>
 80059d0:	2209      	movs	r2, #9
 80059d2:	602a      	str	r2, [r5, #0]
 80059d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059d8:	81a3      	strh	r3, [r4, #12]
 80059da:	f04f 30ff 	mov.w	r0, #4294967295
 80059de:	e033      	b.n	8005a48 <__swsetup_r+0x98>
 80059e0:	0758      	lsls	r0, r3, #29
 80059e2:	d512      	bpl.n	8005a0a <__swsetup_r+0x5a>
 80059e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059e6:	b141      	cbz	r1, 80059fa <__swsetup_r+0x4a>
 80059e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059ec:	4299      	cmp	r1, r3
 80059ee:	d002      	beq.n	80059f6 <__swsetup_r+0x46>
 80059f0:	4628      	mov	r0, r5
 80059f2:	f7ff fac1 	bl	8004f78 <_free_r>
 80059f6:	2300      	movs	r3, #0
 80059f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80059fa:	89a3      	ldrh	r3, [r4, #12]
 80059fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a00:	81a3      	strh	r3, [r4, #12]
 8005a02:	2300      	movs	r3, #0
 8005a04:	6063      	str	r3, [r4, #4]
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f043 0308 	orr.w	r3, r3, #8
 8005a10:	81a3      	strh	r3, [r4, #12]
 8005a12:	6923      	ldr	r3, [r4, #16]
 8005a14:	b94b      	cbnz	r3, 8005a2a <__swsetup_r+0x7a>
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a20:	d003      	beq.n	8005a2a <__swsetup_r+0x7a>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff ff49 	bl	80058bc <__smakebuf_r>
 8005a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a2e:	f013 0201 	ands.w	r2, r3, #1
 8005a32:	d00a      	beq.n	8005a4a <__swsetup_r+0x9a>
 8005a34:	2200      	movs	r2, #0
 8005a36:	60a2      	str	r2, [r4, #8]
 8005a38:	6962      	ldr	r2, [r4, #20]
 8005a3a:	4252      	negs	r2, r2
 8005a3c:	61a2      	str	r2, [r4, #24]
 8005a3e:	6922      	ldr	r2, [r4, #16]
 8005a40:	b942      	cbnz	r2, 8005a54 <__swsetup_r+0xa4>
 8005a42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a46:	d1c5      	bne.n	80059d4 <__swsetup_r+0x24>
 8005a48:	bd38      	pop	{r3, r4, r5, pc}
 8005a4a:	0799      	lsls	r1, r3, #30
 8005a4c:	bf58      	it	pl
 8005a4e:	6962      	ldrpl	r2, [r4, #20]
 8005a50:	60a2      	str	r2, [r4, #8]
 8005a52:	e7f4      	b.n	8005a3e <__swsetup_r+0x8e>
 8005a54:	2000      	movs	r0, #0
 8005a56:	e7f7      	b.n	8005a48 <__swsetup_r+0x98>
 8005a58:	20000018 	.word	0x20000018

08005a5c <_fstat_r>:
 8005a5c:	b538      	push	{r3, r4, r5, lr}
 8005a5e:	4d07      	ldr	r5, [pc, #28]	@ (8005a7c <_fstat_r+0x20>)
 8005a60:	2300      	movs	r3, #0
 8005a62:	4604      	mov	r4, r0
 8005a64:	4608      	mov	r0, r1
 8005a66:	4611      	mov	r1, r2
 8005a68:	602b      	str	r3, [r5, #0]
 8005a6a:	f7fb f828 	bl	8000abe <_fstat>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d102      	bne.n	8005a78 <_fstat_r+0x1c>
 8005a72:	682b      	ldr	r3, [r5, #0]
 8005a74:	b103      	cbz	r3, 8005a78 <_fstat_r+0x1c>
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	bd38      	pop	{r3, r4, r5, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000354 	.word	0x20000354

08005a80 <_isatty_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d06      	ldr	r5, [pc, #24]	@ (8005a9c <_isatty_r+0x1c>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fb f827 	bl	8000ade <_isatty>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_isatty_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_isatty_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	20000354 	.word	0x20000354

08005aa0 <_sbrk_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d06      	ldr	r5, [pc, #24]	@ (8005abc <_sbrk_r+0x1c>)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	602b      	str	r3, [r5, #0]
 8005aac:	f7fb f830 	bl	8000b10 <_sbrk>
 8005ab0:	1c43      	adds	r3, r0, #1
 8005ab2:	d102      	bne.n	8005aba <_sbrk_r+0x1a>
 8005ab4:	682b      	ldr	r3, [r5, #0]
 8005ab6:	b103      	cbz	r3, 8005aba <_sbrk_r+0x1a>
 8005ab8:	6023      	str	r3, [r4, #0]
 8005aba:	bd38      	pop	{r3, r4, r5, pc}
 8005abc:	20000354 	.word	0x20000354

08005ac0 <_init>:
 8005ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ac2:	bf00      	nop
 8005ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ac6:	bc08      	pop	{r3}
 8005ac8:	469e      	mov	lr, r3
 8005aca:	4770      	bx	lr

08005acc <_fini>:
 8005acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ace:	bf00      	nop
 8005ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ad2:	bc08      	pop	{r3}
 8005ad4:	469e      	mov	lr, r3
 8005ad6:	4770      	bx	lr
